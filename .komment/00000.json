[
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "a 3D camera class called `Camera3D`. The class has a constructor that takes four parameters: field of view (fov), aspect ratio, near and far distances. It also has methods for calculating the projection matrix, adjusting to the viewport size, processing input events, and moving the camera. The code uses various packages such as `org.lwjgl.input` for handling keyboard and mouse events, `org.lwjgl.opengl` for rendering 3D graphics, and `com.ch` for math operations.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D.CameraStruct3D Pages: 1 -->\n<svg width=\"198pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 198.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D.CameraStruct3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"190,-19 0,-19 0,0 190,0 190,-19\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D.CameraStruct3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera_1_1CameraStruct.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"176.5,-74 13.5,-74 13.5,-55 176.5,-55 176.5,-74\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera.CameraStruct</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95,-44.66C95,-35.93 95,-25.99 95,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"91.5,-44.75 95,-54.75 98.5,-44.75 91.5,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "diagram": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"math\"\n        color=\"#33363A\"\n        Vector3f\n        Matrix4f\n    }\n    CameraStruct\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Camera3D [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    CameraStruct -> Camera3D \n    Vector3f -> Camera3D \n    Camera3D -> Matrix4f \n}\n",
        "items": [
          {
            "id": "ff595986-cfa2-e6a7-2148-05f22c10e3f1",
            "ancestors": [],
            "type": "function",
            "description": "is a subclass of the Camera class that provides additional functionality for manipulating the camera's position and viewport size. It contains a matrix4f variable for storing the camera's projection matrix, and an inner class called CameraStruct3D that stores the camera's position, viewport size, and other properties. The processInput method processes input from the user, such as mouse movements and keyboard keys, to adjust the camera's position and rotation.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "d1c36876-79a7-f4b0-0b4d-ca5a609fa7ef",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1"
            ],
            "type": "function",
            "description": "calculates a Matrix4f object representing the projection transformation based on the provided CameraStruct data.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera information, including its intrinsic and extrinsic parameters, which are used to compute the projection matrix.\n\n* `projection`: A `Matrix4f` object that represents the camera's projection matrix.\n* `getAsMatrix4()`: A method that returns the `Matrix4f` representation of the input data.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the camera's projection matrix.\n\nThe `Matrix4f` object `projection` represents a 4x4 homogeneous transformation matrix that maps 3D points from the camera's coordinate system to the projection coordinate system.\n\nThe elements of the matrix are composed of the following:\n\n* The upper left 3x3 block represents the camera's intrinsic parameters, such as the focal length and distortion coefficients.\n* The additional 1x4 block represents the camera's extrinsic parameters, such as the rotation and translation vectors relative to the world coordinate system.\n\nThe matrix is homogeneous, meaning that the last column represents a scalar value that can be used for division or multiplication with other matrices.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Camera3D myCamera = new Camera3D(50, 1, -1);\nmyCamera.calculateProjectionMatrix();\n",
              "description": "\nThis code creates a new camera object with the specified field of view and near and far clipping planes, and then calls the calculateProjectionMatrix method to generate a projection matrix based on the values of the CameraStruct data parameter. The resulting projection matrix is stored in the projection attribute of the myCamera object."
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "fe86aa27-617e-0f8b-da49-6423a461dcbe",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1"
            ],
            "type": "function",
            "description": "adjusts the camera's projection matrix and view matrix based on the window size, and then sets the viewport to the new size using GL11.glViewport().",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "2D viewport width of the screen.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "2D image size of the viewport, which is used to calculate the aspect ratio and projection matrix, and to set the viewport dimensions in the GL11.glViewport() method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    int width = 1280; //input\n    int height = 720; //input\n    Camera3D camera = new Camera3D(fov, aspect, zNear, zFar);\n    camera.adjustToViewport(width, height);\n}\n",
              "description": ""
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "ff9cd82c-3fa1-e693-cc43-823eb75bb256",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1"
            ],
            "type": "function",
            "description": "is a custom class that extends the Camera Struct and provides additional functionality for a 3D camera. It includes fields for fov, aspect, zNear, and zFar, which are used to calculate the perspective projection matrix. The getAsMatrix4() method returns a Matrix4f object representing the perspective projection matrix.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "12a6bbc9-3065-b8a2-2846-7ee8f5db796b",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1",
              "ff9cd82c-3fa1-e693-cc43-823eb75bb256"
            ],
            "type": "function",
            "description": "returns a matrix representing a perspective projection, with fields for field of view (fov), aspect ratio, near and far distances.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 matrix representing a perspective projection.\n\n* The function returns a `Matrix4f` object representing a 4x4 matrix that encodes the perspective projection of a 3D scene in homogeneous coordinates.\n* The `fov` parameter represents the field of view (in radians) of the projection, while `aspect` is the aspect ratio of the viewport.\n* The `zNear` and `zFar` parameters define the near and far clipping planes of the projection, respectively.\n\nThe resulting matrix has the following properties:\n\n* It represents a perspective projection, meaning that objects that are closer to the viewer will appear larger than those further away.\n* The matrix is inverted (i.e., transposed), as required for many applications in computer graphics and vision.\n* The matrix has determinant 1, indicating that it represents an orthogonal projection (i.e., a projection where the columns of the matrix are mutually perpendicular).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Test {\n\tpublic static void main(String[] args) {\n\t\tCamera3D camera = new Camera3D(90, 16/9, 0.1f, 100);\n\t\tcamera.adjustToViewport(800, 600);\n\t\tMatrix4f matrix = camera.getAsMatrix4();\n\t\tSystem.out.println(matrix);\n\t}\n}\n",
              "description": "\nIn this example, the method getAsMatrix4 is called on a new Camera3D object with the specified parameters, and then the resulting Matrix4f is printed to the console. This demonstrates how the method can be used to obtain the projection matrix for a camera."
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "314fa62b-92a0-6e96-e747-0922679576ec",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1"
            ],
            "type": "function",
            "description": "processes input from the mouse and keyboard to move an object in 3D space using rotation and translation. It adjusts movement speed based on the LShift key and moves the object in different directions based on other keys.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "delta time, which is used to calculate the movement of the object based on the input from the keyboard keys.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "3D movement speed of the object being controlled, and it is multiplied by the time step `dt` to determine the total distance traveled during each frame.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of the character's movement in response to user input, which affects how quickly the character moves in response to mouse movements.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(90, 16:9, 0.1, 100);\n\nfloat dt = 0.1f; // time since last frame (in seconds)\nfloat speed = 5.0f; // movement speed\nfloat sensitivity = 0.2f; // mouse sensitivity\n\ncamera.processInput(dt, speed, sensitivity);\n",
              "description": "\nIn this example, the `processInput()` method is called on a new instance of `Camera3D`, passing in the time since the last frame (`dt`), the desired movement speed (`speed`), and the desired mouse sensitivity (`sensitivity`). The method will then process user input, adjusting the camera's rotation and position based on the specified inputs."
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "8eb6a150-5801-13a8-914f-7318c4ad6541",
            "ancestors": [
              "ff595986-cfa2-e6a7-2148-05f22c10e3f1"
            ],
            "type": "function",
            "description": "moves the object by a specified amount in the direction of a provided vector, using the transform's `setPos()` method.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction in which the object should be moved, with its magnitude specified by the `amt` parameter.\n\n* `dir`: A `Vector3f` object representing a 3D direction vector.\n\t+ It has three components: `x`, `y`, and `z`, which represent the respective coordinates of the direction vector in the X, Y, and Z axes.\n\t+ Each component has a value between -1 and 1, indicating the magnitude of the direction vector.",
                "complex_type": true
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "amount of movement to be applied to the object's position along the direction specified by the `dir` parameter.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f dir = new Vector3f(1, 0, 0); // Forward direction\nfloat amt = 5;\nmove(dir, amt); // Moves the object in the forward direction by 5 units.\n",
              "description": ""
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]