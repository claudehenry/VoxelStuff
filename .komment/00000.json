[
  {
    "name": "Camera.java",
    "path": "src/com/ch/Camera.java",
    "content": {
      "structured": {
        "description": "A Camera class that represents a camera in a 3D space. It includes various methods and fields for calculating view and projection matrices, as well as handling transformations and adjusting to a specified viewport size. The code also includes an abstract class called `CameraStruct` which contains a matrix4f field and provides an abstract method for getting the matrix4f value.",
        "items": [
          {
            "id": "9af48091-2541-369a-4743-78396957550e",
            "ancestors": [],
            "description": "Is an abstract class that provides methods for calculating view and projection matrices, as well as getting and setting transformation values. It also has an abstract method for calculating a projection matrix and another abstract method for adjusting to the viewport size.",
            "name": "Camera",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 49,
            "docLength": null
          },
          {
            "id": "3e422187-14ea-ea8a-3a4a-0ee70d30491d",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Retrieves a matrix representing the view projection transformation, which combines the camera's view matrix and projection matrix. If the `viewProjectionMat4` variable is null or has changed since the last calculation, the function calculates and returns the view matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the view projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\nMatrix4f viewProj = camera.getViewProjection();\n",
              "description": "\nThis creates a new instance of the Camera class with the projection parameter, then calls the getViewProjection method and assigns the result to the viewProj variable."
            },
            "name": "getViewProjection",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bf585232-9e02-a687-6e44-233a1877e873",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Calculates a view matrix that represents the transformation of a 3D camera's perspective and translation.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix representing the view transformation of a camera.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public void render() {\n\tMatrix4f viewProjection = camera.calculateViewMatrix();\n\t// do something with the viewProjection matrix...\n}\n",
              "description": "\nIn this example, we are calling the `calculateViewMatrix()` method of a `Camera` object and storing its return value in a `viewProjection` variable. We can then use this `viewProjection` matrix to perform rendering operations that require the camera's view matrix."
            },
            "name": "calculateViewMatrix",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "6f969950-7579-70b3-3440-9df187b14433",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Generates a transformation matrix for translating an object by a specified distance from its current position. The matrix is initialized with the negative of the camera's position, and then the translation amount is applied to each axis.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 transformation matrix that represents the camera's translation relative to its initial position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n\t\tpublic static void main(String[] args) {\n\t\t\tCamera camera = new Camera();\n\t\t\tMatrix4f translationMatrix = camera.getTranslationMatrix();\n\t\t\tSystem.out.println(translationMatrix); // prints out the matrix \n\t\t}\n\t}\n",
              "description": ""
            },
            "name": "getTranslationMatrix",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cd09ef5b-4714-64a5-424b-7d063d3ff93c",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Returns the `transform` object, which represents a transformation from one coordinate system to another.",
            "params": [],
            "returns": {
              "type_name": "Transform",
              "description": "a reference to an instance of the `Transform` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class CameraUser {\n    public static void main(String[] args) {\n        // Create a camera object with a projection matrix\n        Matrix4f projection = new Matrix4f();\n        Camera camera = new Camera(projection);\n        \n        // Get the transform of the camera\n        Transform transform = camera.getTransform();\n        \n        // Use the transform somehow, e.g. modify its position or rotation\n        transform.setPosition(new Vector3f(1, 2, 3));\n    }\n}\n",
              "description": ""
            },
            "name": "getTransform",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "31e91c20-81ee-5197-d04b-2244e343c634",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Is an abstract class that provides a base implementation for all camera structs in the `com.ch` package. It includes an abstract method `getAsMatrix4()` for returning a Matrix4f object, which can be used to represent the camera's transformation matrix in various contexts.",
            "name": "CameraStruct",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "src/com/ch/Texture.java",
    "content": {
      "structured": {
        "description": "A `Texture` class that loads and manages textures for an OpenGL application. The code uses various packages such as `GL11`, `GL14`, and `Util` to create and manage textures, bind them to specific texture slots, and set texture parameters like filtering, wrapping, and texture min/mag filter. The `loadTexture()` method loads a texture from a file using `ImageIO` and creates a byte buffer representation of it. The `bind()` method binds the texture to a specific texture slot, and the `getID()` method returns the ID of the bound texture.",
        "items": [
          {
            "id": "39c41fe9-263d-ac9b-d946-fc35de9eaf45",
            "ancestors": [],
            "description": "Defines a class for managing textures in an OpenGL environment. The class provides methods for binding and unbinding textures, as well as loading textures from files. The loadTexture method takes a file path as an argument and returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 75,
            "docLength": null
          },
          {
            "id": "b7e8284a-e38a-9b9c-e14e-7494a421e96b",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "0) binds an object to a specified method invocation site.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\t\tbind(0);\n\t}\n\nThis method binds the texture to the specified sampler slot, which in this case is 0.",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "864099ec-49b8-8cac-8c4d-d0fbfbbd05cd",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Sets the active texture slot to a specific index (0-31) and binds a texture to that slot using the `glBindTexture()` method.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot that specifies which texture to bind to the current texture unit.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"example.png\");\ntexture.bind(1);\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "701cc593-e22d-cdb8-fe4b-7848b708ff2c",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Returns the instance variable `id`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the integer value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// Instantiating the Texture class with a string parameter\n\tTexture texture = new Texture(\"grass_block.png\");\n\t\n\tSystem.out.println(texture.getID());\n}\n",
              "description": "\nThe code above shows an example on how to get the id of a texture object from the texture class."
            },
            "name": "getID",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b60ad4ba-7599-cca4-5e46-bb38a8d5d33e",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Loads a texture from a file, converts it to a GL texture and stores it in an integer ID.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "name of the texture file to be loaded and read by the `loadTexture()` method.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer ID representing a loaded texture.",
              "complex_type": false
            },
            "name": "loadTexture",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 48,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "A 3D camera class `Camera3D` that inherits from the `Camera` class. The class has various methods for calculating and updating the camera's projection matrix, as well as handling user input for moving the camera. The code uses the `GL11` package for rendering and the `Keyboard` and `Mouse` packages for handling keyboard and mouse input. The code also defines a `CameraStruct3D` class that represents the camera's state, including its position, orientation, and field of view.",
        "items": [
          {
            "id": "d3b5efe2-2f38-5592-fd46-6af9598f352c",
            "ancestors": [],
            "description": "Defines a camera class that inherits from the `Camera` class and has additional features such as adjusting to the viewport size, calculating the projection matrix, and processing input events. The class also includes a `processInput` method that handles mouse and keyboard input events and moves the camera accordingly.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "b5218fcf-52a2-37b0-a649-83fa3d9d5f1f",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c"
            ],
            "description": "Takes a `CameraStruct` object as input and returns the projection matrix in form of a `Matrix4f` object.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera's properties, such as its position, orientation, and field of view, which are used to calculate the projection matrix.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the projection matrix as specified by the input `CameraStruct`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45f, 16f/9f, 0.1f, 100f);\n\tCameraStruct struct = new CameraStruct();\n\tstruct.aspect = 2;\n\tcamera.calculateProjectionMatrix(struct);\n",
              "description": ""
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "188ec5de-5d4f-4ba0-4549-60fb06d755c7",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c"
            ],
            "description": "Adjusts the camera's projection and view matrices to fit within the specified viewport dimensions. It also sets the viewport dimensions using `GL11.glViewport()`.",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "width of the viewport in pixels.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "2D viewport size of the graphical representation of the scene, which is used to calculate the appropriate projection matrix and view matrix for the camera's rendering.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void adjustToViewport(int width, int height) {\n\t((CameraStruct3D) this.values).aspect = (float) width / height;\n\tcalculateProjectionMatrix(values);\n\ttry {\n\t\tcalculateViewMatrix();\n\t} catch (NullPointerException e) {\n\t}\n\tGL11.glViewport(0, 0, width, height);\n}\n",
              "description": ""
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "6b3928b2-0907-5c93-9e4c-28fcdd6bcf8d",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c"
            ],
            "description": "Is a sub-class of the Camera Struct that contains additional attributes and methods to handle 3D camera calculations, such as fov, aspect, zNear, and zFar. It also provides a method for getting the matrix representation of the camera's projection.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "f9b2aa59-e102-c681-504f-fea4e77e3186",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c",
              "6b3928b2-0907-5c93-9e4c-28fcdd6bcf8d"
            ],
            "description": "Initializes a matrix representing a perspective projection with the specified field of view (fov), aspect ratio, near and far distances.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing a perspective projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "// Create a new camera struct with the given values\n\t\tCameraStruct3D cameraValues = new CameraStruct3D(70, 16/9, 0.1f, 100f);\n\t\t\n\t\t// Calculate the projection matrix based on the camera values\n\t\tMatrix4f projectionMatrix = cameraValues.getAsMatrix4();\n",
              "description": ""
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1277f83c-db28-d398-2c49-3d992949db89",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c"
            ],
            "description": "Rotates the object based on mouse input and key presses, moving it along the forward direction of its rotation.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "3D game time step, which is used to calculate the movement of the object based on keyboard input.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "3D movement speed of the entity being controlled by the code, which is multiplied by the time interval `dt` to determine the distance traveled during each iteration of the function.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of the mouse input, which determines how much the character will move when the mouse is moved.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "import org.lwjgl.input.Keyboard;\nimport org.lwjgl.input.Mouse;\n\nfloat dt = 0.1f;\nfloat speed = 5f;\nfloat sensitivity = 2f;\nprocessInput(dt, speed, sensitivity);\n",
              "description": ""
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "a9d66d4b-ab74-83aa-2847-755e4e14e555",
            "ancestors": [
              "d3b5efe2-2f38-5592-fd46-6af9598f352c"
            ],
            "description": "Modifies the position of an object by adding a directional vector multiplied by a scalar value to its current position.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction in which to move the object, with the magnitude of the movement specified by the `amt` parameter.",
                "complex_type": false
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "amount of movement along the specified direction, which is added to the current position of the transform.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45, 16 / 9, 0.1f, 100);\n    Vector3f forwardVector = new Vector3f(0, 0, -1);\n\tcamera.move(forwardVector, 10f);\n",
              "description": ""
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class that loads and manages shaders for rendering 3D graphics using OpenGL. The code loads shaders from files, compiles and links them to create a program, and provides methods for setting uniform values and matrix transformations. The code also includes utility functions for reading shader source code from files and validating the program.",
        "items": [
          {
            "id": "50185b82-8214-169e-8248-d2614bc24261",
            "ancestors": [],
            "description": "Is designed to load and manage shaders for an OpenGL context. It provides functions for binding a program, getting the location of uniform and uniform matrix functions, and loading vertex and fragment shaders. The class also validates the program after loading the shaders.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 97,
            "docLength": null
          },
          {
            "id": "92ce00e1-78ce-1280-9a49-fbecc6ccecb5",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "GlUseProgram(program) to associate a program object with the current GL context.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main{\n    public static void main(String[] args){\n        // create a new Shader object with the name \"myShader\"\n        Shader myShader = new Shader(\"myShader\");\n        \n        // bind the shader to the OpenGL context\n        myShader.bind();\n    }\n}\n",
              "description": "\nIn this example, a new instance of the `Shader` class is created with the name \"myShader\". Then, the `bind()` method is called on this instance, which binds the shader to the OpenGL context."
            },
            "name": "bind",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ea4d7563-f22f-ecad-ce48-dd3e777ce103",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Returns the value of the `program` field.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the value of the `program` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public void myMethod() {\n\t\tShader shader = Shader.loadShader(\"MyShader\");\n\t\tint program = shader.getProgram();\n\t}\n",
              "description": "\nIn the above code, we first load a shader by calling the static method loadShader with the name of the shader file, and then we get the program ID associated with the loaded shader using the method getProgram() in our Shader class. The value returned is an integer representing the program ID that can be used to interact with the shader through OpenGL calls."
            },
            "name": "getProgram",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2d795f97-72b1-79ab-8e40-c028e30fd7ad",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Is a method that sets a uniform float value(s) for a given shader program location, based on the length of the input array of float values.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform location for which the values are being set.",
                "complex_type": false
              },
              {
                "name": "vals",
                "type_name": "float[]",
                "description": "0 or more floating-point values that will be passed to the corresponding glUniform() method to set the uniform value of the same name as the function.\n\n* Length: 1 to 4\n* Content: A sequence of floating-point values\n\nThe length of `vals` determines the number of arguments passed to the corresponding GL uniform function (GL20.glUniform1f, GL20.glUniform2f, GL20.glUniform3f, or GL20.glUniform4f).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Shader shader = new Shader(program);\nshader.uniformf(\"my_float\", 10.5f);\nshader.uniformf(\"my_vec2\", 3.5f, -4.7f);\nshader.uniformf(\"my_vec3\", 1.0f, 2.5f, 3.2f);\nshader.uniformf(\"my_vec4\", -1.5f, 2.0f, 3.8f, -4.7f);\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "1fbec190-62e1-0a99-1440-2f4c605aeec2",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Unloads a 4x4 uniform matrix from an OpenGL context to a flipped buffer.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "3D uniform matrix that is to be loaded and applied as a transformation to the graphics object.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 matrix to be uniformed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void render() {\n\t\t...\n\t\tMatrix4f modelView = ...; // create model-view matrix\n\t\tshader.uniformMat4(\"model_view\", modelView); // pass it to the shader\n\t\t...\n\t}\n",
              "description": ""
            },
            "name": "unifromMat4",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9b3fc502-d8b7-2ea6-ca42-f0bfe0421795",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Is a part of the Java API for OpenGL, and it returns the uniform location of a named uniform in an OpenGL program.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform to locate.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in a program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader myShader = Shader.loadShader(\"MyShader\");\nint uniformLocation = myShader.getLoaction(\"uniformName\")\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "80f793bf-cb11-ed97-8741-84637e9b3f39",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Loads a shader program from a file and creates a new shader object that represents it.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of a shader file to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Shader",
              "description": "a new instance of `Shader` object that represents a shader program created by combining a vertex shader and a fragment shader.",
              "complex_type": false
            },
            "name": "loadShader",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "1332abfc-f975-65b7-6e44-dc3f31c7885b",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Loads a shader program into memory and attaches it to a program handle.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader to be created, which can be either a fragment shader or a vertex shader.",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "3D graphics shader source code that will be compiled and linked to create the final shader program.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program that will be used to link the loaded shader with, allowing for the creation of a fully functional graphics program.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "8c91f297-7b42-4780-3044-3fe26ebaf4da",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Validates a program by checking its link and validation statuses, printing any error messages if they exist, and exiting the program with an error code if there are issues.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D program to be validated and linked, and is passed through the `glLinkProgram()` and `glValidateProgram()` functions for validation and linking.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6e50dbd9-0193-9ca5-7749-ebd1771b8141",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Reads the contents of a given text file and returns its raw string value.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "file to read and return its text content.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string containing the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 100,
              "insert": 100,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Transform.java",
    "path": "src/com/ch/Transform.java",
    "content": {
      "structured": {
        "description": "A `Transform` class that handles transformations in 3D space. It has several methods for rotating and translating objects in 3D space, as well as a `getTransformation()` method that returns a matrix representation of the transformation. The class also has an `update()` method that updates the transformation matrix based on the position, rotation, and scale of the object. Additionally, it has a `setParent()` method for setting the parent transform, and a `getTransformedPos()` and `getTransformedRot()` methods for obtaining the transformed position and rotation of the object.",
        "items": [
          {
            "id": "c5d1cafe-a09c-9c91-3647-893faaa7c191",
            "ancestors": [],
            "description": "Is an extension of the Math package, allowing for rotations and scale changes in 3D space. It has several public methods such as update() to update the transform matrix, rotate() and lookAt() to change the orientation, and getTransformedPos() and getTransformedRot() to return transformed positions and rotations respectively. Additionally, it has properties like pos, rot, and scale that can be modified, and a parent field that can link this transform to another one in a hierarchy.",
            "name": "Transform",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 131,
            "docLength": null
          },
          {
            "id": "92e361e2-f63c-4890-aa41-e081d46d9b41",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Updates an object's position, rotation, and scale based on its previous values or initializes them if not provided.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(0, 0, 1));\ntransform.update();\n",
              "description": ""
            },
            "name": "update",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "1a81aa17-ec73-a3a8-dd46-bed67059266b",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Multiplies a quaternion representing a rotation axis by an angle and normalizes the result, returning a new quaternion representing the rotated orientation.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D rotation axis around which the rotation will be performed.",
                "complex_type": false
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle of the object around the specified `axis`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform myObject = new Transform();\n\tVector3f axis = new Vector3f(1, 0, 0); // X-axis\n\tfloat angle = 90; // counterclockwise rotation in degrees\n\tmyObject.rotate(axis, angle);\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "322d1fdb-544f-13b8-8a4c-68679cf60aaa",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Computes the rotation required to face a specified point while maintaining a specific direction perpendicular to the plane of the point. The rotation is returned as a `Quaternion` object.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D position of an object that the `lookAt()` method should rotate around.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction perpendicular to the look-at point, which is used to calculate the rotation necessary for the camera to face that direction.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.lookAt(new Vector3f(0, 10, 0), new Vector3f(0, 1, 0));\n",
              "description": "\nThis code creates a new instance of the Transform class and then uses the lookAt method to set the rotation of the transform object to face in the direction of the point (0, 10, 0) with the up vector being (0, 1, 0)."
            },
            "name": "lookAt",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c785d925-f5f7-c080-074e-1b86b4e25918",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Computes a rotation quaternion that looks at a specified point while orienting along a supplied up vector.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D position from which to look at the scene.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction that the look-at rotation should be applied to, relative to the position of the object being rotated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Quaternion",
              "description": "a quaternion representing the rotation needed to look at a point in the environment from a specific position and orientation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f point = new Vector3f(5, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\nTransform transform = new Transform();\ntransform.lookAt(point, up);\nQuaternion rotation = transform.getLookAtRotation(point, up);\n",
              "description": ""
            },
            "name": "getLookAtRotation",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c1a9140e-99bf-d2a2-9e4e-b6abcd286bcf",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Checks if an object's properties have changed from their previous values, returning `true` if any change was detected and `false` otherwise.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean indicating whether any of the object's properties have changed.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform(); // creating an instance of the class Transform and initializing it with a position, rotation and scale \ntransform.hasChanged(); // returns false because all values are equal to their original value\ntransform.pos.x = 1; // updating a position x coordinate\ntransform.hasChanged(); // returns true because only the x coordinate of the position has been updated \n",
              "description": ""
            },
            "name": "hasChanged",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6f349904-07e4-3090-cd46-3ffa764aa63a",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Computes the transformation matrix for an object based on its position, rotation, and scale. It takes the position, rotation, and scale values as input and returns the transformed matrix as output.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix representation of a transformation consisting of translation, rotation, and scaling.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nmyTransform.setPos(new Vector3f(1, 2, 3));\nmyTransform.setRot(new Quaternion(0, 1, 0, 0));\nmyTransform.setScale(new Vector3f(4, 5, 6));\nMatrix4f myTransformation = myTransform.getTransformation();\n",
              "description": ""
            },
            "name": "getTransformation",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "f66627aa-4ea2-55b1-fa40-76b3ac0cd9fb",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Retrieves and returns the transformation matrix of its parent node in the scene graph, taking into account changes made to the parent node's transformation.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` representation of the transformation matrix of the parent node.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    private Transform myTransform;\n\n    public void someMethod() {\n        Matrix4f parentTransformation = myTransform.getParentMatrix();\n        // Use parentTransformation in your code...\n    }\n}\n",
              "description": "\nIn this example, the method getParentMatrix is called on an instance of Transform named \"myTransform\" within the scope of a class named MyClass. The returned Matrix4f is then used to perform transformations on the myTransform object."
            },
            "name": "getParentMatrix",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "e5f3d597-3001-f29b-464f-70c1161105cc",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Sets the `Transform` field `parent`.",
            "params": [
              {
                "name": "parent",
                "type_name": "Transform",
                "description": "Transform to which the current Transform should be set as a child.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\n\ttransform.setParent(parent);\n",
              "description": ""
            },
            "name": "setParent",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1796e641-b09a-07aa-ed46-fe3876552ffa",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Transforms a `Vector3f` object using a matrix representation, returning the transformed position.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a transformed position vector based on the parent matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myPos = new Vector3f();\nmyPos.set(1, 2, 3); // Set the position vector to (1, 2, 3)\n\nTransform myTransform = new Transform(); // Create a new transform object\nmyTransform.setPos(myPos); // Set the position of the transform object to (1, 2, 3)\n\nVector3f transformedPos = myTransform.getTransformedPos(); // Get the transformed position vector\nSystem.out.println(transformedPos); // Output: [2, 4, 6]\n",
              "description": ""
            },
            "name": "getTransformedPos",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3cdd4dc4-0d99-3288-0241-86ee01048de5",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Takes a `Quaternion` object `parentRotation` and multiplies it with another `Quaternion` object `rot`, returning the transformed rotation.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion representation of the transformed rotation matrix multiplied by the input rotation matrix `rot`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "import com.ch.math.Quaternion;\n\npublic class Test {\n    public static void main(String[] args) {\n        Transform myTransform = new Transform();\n        Quaternion rot = new Quaternion(1, 0, 0, 0);\n        myTransform.setRot(rot);\n        \n        Quaternion transformedRot = myTransform.getTransformedRot();\n        System.out.println(\"My Transformed Rotation: \" + transformedRot);\n    }\n}\n",
              "description": ""
            },
            "name": "getTransformedRot",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "16dc88aa-a272-0a89-a746-5e6b14104325",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Returns a `Vector3f` object containing the position of an entity.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object representing the position of the entity.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(1, 2, 3)); // Sets position to (1, 2, 3)\nVector3f pos = transform.getPos();\nSystem.out.println(pos);\n// Output: (1, 2, 3)\n",
              "description": ""
            },
            "name": "getPos",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d61889e4-8baa-99ab-d049-388028c9f7c5",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Sets the position of an object to a specified value.",
            "params": [
              {
                "name": "pos",
                "type_name": "Vector3f",
                "description": "3D position of an object or entity that the method is called on, and assigns it to the `pos` field of the class instance.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nVector3f position = new Vector3f(1, 2, 3);\nt.setPos(position);\n",
              "description": "\nIn this example, we are creating a new instance of the Transform class and storing it in the variable \"t\". We then create a new vector of type Vector3f and store it in the variable \"position\". Finally, we use the setPos method to set the position value stored in variable \"t\" to be equal to the position value stored in variable \"position\"."
            },
            "name": "setPos",
            "location": {
              "start": 111,
              "insert": 111,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "83c1c70f-4d8f-5c87-d94f-315c73f96178",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Adds a vector to the position component of its object parameter, by first getting the current position and then adding the provided vector to it.",
            "params": [
              {
                "name": "addVec",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current position of the object, which is then updated using the `setPos()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\n\t\tTransform t = new Transform();\n\n\t\tVector3f pos = new Vector3f(0, 0, 1);\n\t\tt.setPos(pos);\n\n\t\tVector3f addVec = new Vector3f(0, 1, 0);\n\t\tt.addToPos(addVec);\n\n\t\tSystem.out.println(t.getPos()); // prints (0, 1, 1)\n\t}\n",
              "description": ""
            },
            "name": "addToPos",
            "location": {
              "start": 115,
              "insert": 115,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 1,
            "docLength": null
          },
          {
            "id": "b04df31c-5218-d082-6d4b-15327ae018f3",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Returns a `Quaternion` object representing the rotation of an entity.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion object representing the robot's rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(0, 0, 0));\ntransform.setRot(new Quaternion(1, 0, 0, 0));\ntransform.addToPos(new Vector3f(1, 0, 0));\nQuaternion rotation = transform.getRot();\n",
              "description": "\nIn this example, we first create a new Transform object and set its position to (0, 0, 0) using the setPos() method. Then, we set its rotation to identity quaternion using the setRot() method. Next, we add (1, 0, 0) to its current position using the addToPos() method. Finally, we retrieve its rotation using getRot() and store it in a Quaternion object called \"rotation\"."
            },
            "name": "getRot",
            "location": {
              "start": 117,
              "insert": 117,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b647d1ee-8298-efb8-9344-901566374b92",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Sets the instance field `rot` to the given `Quaternion` representation of a rotation matrix.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "4D quaternion that updates the rotational state of the object, which is stored in the `rot` field of the class.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nQuaternion rotation = Quaternion.fromAngleAxis(90, Vector3f.UNIT_X);\nmyTransform.setRot(rotation);  // sets the rotation of myTransform to a quaterion with the angle axis (90 degrees, X-axis)\n",
              "description": ""
            },
            "name": "setRot",
            "location": {
              "start": 121,
              "insert": 121,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "17b01cc4-6920-c393-bd45-5c0d864e7bdd",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Returns the object's scale value as a `Vector3f` instance.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object representing the scale of the game object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nVector3f scale = new Vector3f(1, 2, 3);\nmyTransform.setScale(scale);\n// Get the current scale of the transform\nVector3f scaleFromMethod = myTransform.getScale();\nSystem.out.println(\"The transform's scale is: \" + scaleFromMethod);\n",
              "description": ""
            },
            "name": "getScale",
            "location": {
              "start": 125,
              "insert": 125,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e47a999d-e41f-e6b6-164a-24de53ed3561",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Sets the scale of an object, replacing its previous value.",
            "params": [
              {
                "name": "scale",
                "type_name": "Vector3f",
                "description": "3D scaling factor for the object, which is applied to its geometry.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform t = new Transform();\nVector3f scale = new Vector3f(2, 4, 8);\nt.setScale(scale);\n",
              "description": ""
            },
            "name": "setScale",
            "location": {
              "start": 129,
              "insert": 129,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "263b67a1-bfef-5a94-fa46-7726673b357b",
            "ancestors": [
              "c5d1cafe-a09c-9c91-3647-893faaa7c191"
            ],
            "description": "Returns an empty string.",
            "params": [],
            "returns": {
              "type_name": "empty",
              "description": "an empty string.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Transform transform = new Transform();\n        String string = transform.toString(); // The value of the variable \"string\" will be an empty string.\n    }\n}\n",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]