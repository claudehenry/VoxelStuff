[
  {
    "name": "Camera.java",
    "path": "src/com/ch/Camera.java",
    "content": {
      "structured": {
        "description": "A Camera class that represents a camera in a 3D space. It includes various methods and fields for calculating view and projection matrices, as well as handling transformations and adjusting to a specified viewport size. The code also includes an abstract class called `CameraStruct` which contains a matrix4f field and provides an abstract method for getting the matrix4f value.",
        "items": [
          {
            "id": "9af48091-2541-369a-4743-78396957550e",
            "ancestors": [],
            "description": "Is an abstract class that provides methods for calculating view and projection matrices, as well as getting and setting transformation values. It also has an abstract method for calculating a projection matrix and another abstract method for adjusting to the viewport size.",
            "name": "Camera",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 49,
            "docLength": null
          },
          {
            "id": "3e422187-14ea-ea8a-3a4a-0ee70d30491d",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Retrieves a matrix representing the view projection transformation, which combines the camera's view matrix and projection matrix. If the `viewProjectionMat4` variable is null or has changed since the last calculation, the function calculates and returns the view matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object representing the view projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera(projection);\nMatrix4f viewProj = camera.getViewProjection();\n",
              "description": "\nThis creates a new instance of the Camera class with the projection parameter, then calls the getViewProjection method and assigns the result to the viewProj variable."
            },
            "name": "getViewProjection",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bf585232-9e02-a687-6e44-233a1877e873",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Calculates a view matrix that represents the transformation of a 3D camera's perspective and translation.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix representing the view transformation of a camera.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public void render() {\n\tMatrix4f viewProjection = camera.calculateViewMatrix();\n\t// do something with the viewProjection matrix...\n}\n",
              "description": "\nIn this example, we are calling the `calculateViewMatrix()` method of a `Camera` object and storing its return value in a `viewProjection` variable. We can then use this `viewProjection` matrix to perform rendering operations that require the camera's view matrix."
            },
            "name": "calculateViewMatrix",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "6f969950-7579-70b3-3440-9df187b14433",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Generates a transformation matrix for translating an object by a specified distance from its current position. The matrix is initialized with the negative of the camera's position, and then the translation amount is applied to each axis.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 transformation matrix that represents the camera's translation relative to its initial position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n\t\tpublic static void main(String[] args) {\n\t\t\tCamera camera = new Camera();\n\t\t\tMatrix4f translationMatrix = camera.getTranslationMatrix();\n\t\t\tSystem.out.println(translationMatrix); // prints out the matrix \n\t\t}\n\t}\n",
              "description": ""
            },
            "name": "getTranslationMatrix",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cd09ef5b-4714-64a5-424b-7d063d3ff93c",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Returns the `transform` object, which represents a transformation from one coordinate system to another.",
            "params": [],
            "returns": {
              "type_name": "Transform",
              "description": "a reference to an instance of the `Transform` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class CameraUser {\n    public static void main(String[] args) {\n        // Create a camera object with a projection matrix\n        Matrix4f projection = new Matrix4f();\n        Camera camera = new Camera(projection);\n        \n        // Get the transform of the camera\n        Transform transform = camera.getTransform();\n        \n        // Use the transform somehow, e.g. modify its position or rotation\n        transform.setPosition(new Vector3f(1, 2, 3));\n    }\n}\n",
              "description": ""
            },
            "name": "getTransform",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "31e91c20-81ee-5197-d04b-2244e343c634",
            "ancestors": [
              "9af48091-2541-369a-4743-78396957550e"
            ],
            "description": "Is an abstract class that provides a base implementation for all camera structs in the `com.ch` package. It includes an abstract method `getAsMatrix4()` for returning a Matrix4f object, which can be used to represent the camera's transformation matrix in various contexts.",
            "name": "CameraStruct",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "src/com/ch/Texture.java",
    "content": {
      "structured": {
        "description": "A `Texture` class that loads and manages textures for an OpenGL application. The code uses various packages such as `GL11`, `GL14`, and `Util` to create and manage textures, bind them to specific texture slots, and set texture parameters like filtering, wrapping, and texture min/mag filter. The `loadTexture()` method loads a texture from a file using `ImageIO` and creates a byte buffer representation of it. The `bind()` method binds the texture to a specific texture slot, and the `getID()` method returns the ID of the bound texture.",
        "items": [
          {
            "id": "39c41fe9-263d-ac9b-d946-fc35de9eaf45",
            "ancestors": [],
            "description": "Defines a class for managing textures in an OpenGL environment. The class provides methods for binding and unbinding textures, as well as loading textures from files. The loadTexture method takes a file path as an argument and returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 75,
            "docLength": null
          },
          {
            "id": "b7e8284a-e38a-9b9c-e14e-7494a421e96b",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "0) binds an object to a specified method invocation site.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\t\tbind(0);\n\t}\n\nThis method binds the texture to the specified sampler slot, which in this case is 0.",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "864099ec-49b8-8cac-8c4d-d0fbfbbd05cd",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Sets the active texture slot to a specific index (0-31) and binds a texture to that slot using the `glBindTexture()` method.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot that specifies which texture to bind to the current texture unit.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"example.png\");\ntexture.bind(1);\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "701cc593-e22d-cdb8-fe4b-7848b708ff2c",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Returns the instance variable `id`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the integer value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// Instantiating the Texture class with a string parameter\n\tTexture texture = new Texture(\"grass_block.png\");\n\t\n\tSystem.out.println(texture.getID());\n}\n",
              "description": "\nThe code above shows an example on how to get the id of a texture object from the texture class."
            },
            "name": "getID",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b60ad4ba-7599-cca4-5e46-bb38a8d5d33e",
            "ancestors": [
              "39c41fe9-263d-ac9b-d946-fc35de9eaf45"
            ],
            "description": "Loads a texture from a file, converts it to a GL texture and stores it in an integer ID.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "name of the texture file to be loaded and read by the `loadTexture()` method.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer ID representing a loaded texture.",
              "complex_type": false
            },
            "name": "loadTexture",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 48,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "A 3D camera class `Camera3D` that implements `Camera`. It takes several parameters for its constructor and provides various methods for calculating projection and view matrices, as well as handling input events such as mouse and keyboard movements. The `processInput` method processes input events by rotating the camera's transform using the arrow keys and moving it along the forward direction of the rotation using the W, S, A, and D keys.",
        "items": [
          {
            "id": "b13357c7-1189-7d8a-6748-17c24f40cf50",
            "ancestors": [],
            "description": "Is an extension of the Camera class that adds additional functionality for manipulating a camera's position and view in a 3D space. The class has several methods for calculating projection and view matrices, as well as handling user input for rotating and moving the camera.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "e7a23ef4-9930-bbac-eb42-6ca896f36506",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50"
            ],
            "description": "Calculates a matrix representation of the camera's projection, based on the given `CameraStruct` data.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera parameters as a `CameraStruct` object, which is used to create the projection matrix.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the camera's projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Camera camera = new Camera3D();\n        CameraStruct data = new CameraStruct3D(45, 16.0f/9.0f, 0.1f, 100.0f);\n        Matrix4f projectionMatrix = camera.calculateProjectionMatrix(data);\n    }\n}\n",
              "description": "\nThe above code will create a new Camera object and use the calculateProjectionMatrix method to generate a projection matrix based on the input of 'data'."
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "9c987f01-1cea-7182-624a-89625ec55240",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50"
            ],
            "description": "Updates a 3D scene's projection and view matrices based on the window size, aspect ratio, and original values stored in the `CameraStruct3D`.",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "2D viewport width for which the camera's projection matrix is calculated and displayed.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "2D viewport size of the canvas on which the 3D scene is rendered.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45, 16/9, 0.1f, 100);\ncamera.adjustToViewport(800, 600);\n",
              "description": ""
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "acfc0b36-67f3-76ab-0448-d1a9439e8c0a",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50"
            ],
            "description": "Is a customized implementation of a camera class that includes additional parameters for the field of view (fov), aspect ratio (aspect), near clipping plane (zNear), and far clipping plane (zFar). The class provides methods for calculating the perspective projection matrix and the view matrix, as well as handling input from the mouse and keyboard.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "5647f86f-7ad3-adbe-ff43-9e7a5363eb68",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50",
              "acfc0b36-67f3-76ab-0448-d1a9439e8c0a"
            ],
            "description": "Initializes a matrix representation of a 3D perspective projection, setting its field of view (fov), aspect ratio, near and far distances.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 matrix representing a perspective projection.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "CameraStruct3D cam = new CameraStruct3D(70, 16.0f / 9.0f, 0.1f, 100.0f);\n\n// Calculate the projection matrix\nMatrix4f projMat = cam.getAsMatrix4();\n",
              "description": "\nThe example code above creates a new instance of CameraStruct3D with custom values for fov, aspect, zNear, and zFar and then retrieves the projection matrix by calling the getAsMatrix4 method on it."
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "01ec8af2-65c1-09a5-6f45-1e26873435df",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50"
            ],
            "description": "Processes input from the mouse and keyboard, applying rotations and translations to an object based on user inputs. It also scales the movement speed based on the LShift key.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "time step used to update the object's position and rotation during animation, with a value of `dt` determining how much the object moves or rotates within the frame.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "3D movement speed of the object being controlled by the player, and it is multiplied by the time interval `dt` to determine the total distance traveled during the frame.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of the object's rotation in response to mouse movements, which affects the amount of rotation applied to the object's transform.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(fov, aspect, zNear, zFar);\nfloat dt = 0.1f;\nfloat speed = 5.0f;\nfloat sens = 0.2f;\ncamera.processInput(dt, speed, sens);\n",
              "description": "\nThis example will rotate the camera by the specified amount of degrees in the x-axis and y-axis respectively, and move the camera forward or backward based on whether the W/S keys are pressed. The rotation and movement will be scaled depending on the value of \"sens\" which determines how fast the camera rotates and moves."
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "1808018c-17a8-feb6-3143-b533117ed50f",
            "ancestors": [
              "b13357c7-1189-7d8a-6748-17c24f40cf50"
            ],
            "description": "Updates the position of an object by adding a directional vector multiplied by a scalar value to its current position.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction to move the object in the game world.",
                "complex_type": false
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "amount of movement along the specified direction, which is added to the current position of the transform.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D myCamera = new Camera3D(45, 16 / 9, 0.1f, 100.0f);\n\nVector3f direction = new Vector3f(0, 0, -1); // This is the forward direction of the camera.\nfloat movementAmount = 2.0f; // This is the amount that the camera will move in the forward direction.\n\nmyCamera.move(direction, movementAmount);\n",
              "description": "\nThe code above creates a new Camera3D object with the given values and then creates a Vector3f variable that represents the forward direction of the camera. The value of movementAmount is set to 2.0f, which represents the amount that the camera will move in the forward direction. Finally, the method move is called on the myCamera object with direction and movementAmount as arguments, causing the camera to move forward by the specified amount."
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class that loads and manages shaders for rendering 3D graphics using OpenGL. The code loads shaders from files, compiles and links them to create a program, and provides methods for setting uniform values and matrix transformations. The code also includes utility functions for reading shader source code from files and validating the program.",
        "items": [
          {
            "id": "50185b82-8214-169e-8248-d2614bc24261",
            "ancestors": [],
            "description": "Is designed to load and manage shaders for an OpenGL context. It provides functions for binding a program, getting the location of uniform and uniform matrix functions, and loading vertex and fragment shaders. The class also validates the program after loading the shaders.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 97,
            "docLength": null
          },
          {
            "id": "92ce00e1-78ce-1280-9a49-fbecc6ccecb5",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "GlUseProgram(program) to associate a program object with the current GL context.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Main{\n    public static void main(String[] args){\n        // create a new Shader object with the name \"myShader\"\n        Shader myShader = new Shader(\"myShader\");\n        \n        // bind the shader to the OpenGL context\n        myShader.bind();\n    }\n}\n",
              "description": "\nIn this example, a new instance of the `Shader` class is created with the name \"myShader\". Then, the `bind()` method is called on this instance, which binds the shader to the OpenGL context."
            },
            "name": "bind",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ea4d7563-f22f-ecad-ce48-dd3e777ce103",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Returns the value of the `program` field.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the value of the `program` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public void myMethod() {\n\t\tShader shader = Shader.loadShader(\"MyShader\");\n\t\tint program = shader.getProgram();\n\t}\n",
              "description": "\nIn the above code, we first load a shader by calling the static method loadShader with the name of the shader file, and then we get the program ID associated with the loaded shader using the method getProgram() in our Shader class. The value returned is an integer representing the program ID that can be used to interact with the shader through OpenGL calls."
            },
            "name": "getProgram",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2d795f97-72b1-79ab-8e40-c028e30fd7ad",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Is a method that sets a uniform float value(s) for a given shader program location, based on the length of the input array of float values.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform location for which the values are being set.",
                "complex_type": false
              },
              {
                "name": "vals",
                "type_name": "float[]",
                "description": "0 or more floating-point values that will be passed to the corresponding glUniform() method to set the uniform value of the same name as the function.\n\n* Length: 1 to 4\n* Content: A sequence of floating-point values\n\nThe length of `vals` determines the number of arguments passed to the corresponding GL uniform function (GL20.glUniform1f, GL20.glUniform2f, GL20.glUniform3f, or GL20.glUniform4f).",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "Shader shader = new Shader(program);\nshader.uniformf(\"my_float\", 10.5f);\nshader.uniformf(\"my_vec2\", 3.5f, -4.7f);\nshader.uniformf(\"my_vec3\", 1.0f, 2.5f, 3.2f);\nshader.uniformf(\"my_vec4\", -1.5f, 2.0f, 3.8f, -4.7f);\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "1fbec190-62e1-0a99-1440-2f4c605aeec2",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Unloads a 4x4 uniform matrix from an OpenGL context to a flipped buffer.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "3D uniform matrix that is to be loaded and applied as a transformation to the graphics object.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 matrix to be uniformed.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void render() {\n\t\t...\n\t\tMatrix4f modelView = ...; // create model-view matrix\n\t\tshader.uniformMat4(\"model_view\", modelView); // pass it to the shader\n\t\t...\n\t}\n",
              "description": ""
            },
            "name": "unifromMat4",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9b3fc502-d8b7-2ea6-ca42-f0bfe0421795",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Is a part of the Java API for OpenGL, and it returns the uniform location of a named uniform in an OpenGL program.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform to locate.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in a program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader myShader = Shader.loadShader(\"MyShader\");\nint uniformLocation = myShader.getLoaction(\"uniformName\")\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "80f793bf-cb11-ed97-8741-84637e9b3f39",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Loads a shader program from a file and creates a new shader object that represents it.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of a shader file to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Shader",
              "description": "a new instance of `Shader` object that represents a shader program created by combining a vertex shader and a fragment shader.",
              "complex_type": false
            },
            "name": "loadShader",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "1332abfc-f975-65b7-6e44-dc3f31c7885b",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Loads a shader program into memory and attaches it to a program handle.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader to be created, which can be either a fragment shader or a vertex shader.",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "3D graphics shader source code that will be compiled and linked to create the final shader program.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program that will be used to link the loaded shader with, allowing for the creation of a fully functional graphics program.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "8c91f297-7b42-4780-3044-3fe26ebaf4da",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Validates a program by checking its link and validation statuses, printing any error messages if they exist, and exiting the program with an error code if there are issues.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D program to be validated and linked, and is passed through the `glLinkProgram()` and `glValidateProgram()` functions for validation and linking.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6e50dbd9-0193-9ca5-7749-ebd1771b8141",
            "ancestors": [
              "50185b82-8214-169e-8248-d2614bc24261"
            ],
            "description": "Reads the contents of a given text file and returns its raw string value.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "file to read and return its text content.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string containing the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 100,
              "insert": 100,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  }
]