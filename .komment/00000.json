[
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "A `Camera3D` class that handles 3D camera functionality. It includes a constructor that initializes the camera's matrices and a method for calculating the projection matrix based on viewport size and aspect ratio. The `processInput()` method processes mouse and keyboard input to rotate and move an object based on its transform, and multiplies the movement speed by 10 when the 'LShift' key is pressed. The code also includes a `move()` method for moving the object along a given direction by a specified distance.",
        "items": [
          {
            "id": "23fb9784-2764-17b1-c241-65de2c25e63c",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of the Camera class that processes mouse and keyboard input to rotate and move an object based on its transform. It also multiplies the movement speed by 10 when the 'LShift' key is pressed. The processInput method calculates the movement amount based on the user's input and moves the object along a specified direction using the getTransform().add() method.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 102,
            "docLength": null
          },
          {
            "id": "96873f35-6121-1eaa-e644-1d190badd007",
            "ancestors": [
              "23fb9784-2764-17b1-c241-65de2c25e63c"
            ],
            "type": "function",
            "description": "calculates a matrix representing the camera's perspective projection, based on the given `CameraStruct` data.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera parameters, which are used to compute the perspective projection matrix.\n\n* `getAsMatrix4()` is a method that returns a `Matrix4f` object representing the camera's projection matrix.\n\nThe function then assigns this projection matrix to a variable called `projection`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the projection matrix as defined by the input `CameraStruct` data.\n\nThe `Matrix4f` object that is returned represents a 4x4 matrix, which encodes the perspective projection transformation. The matrix has the following elements:\n\n* The upper left 3x3 submatrix represents the viewport transform, with the origin at the center of the viewport and the dimensions of the viewport set by the `viewport` field in the `CameraStruct`.\n* The lower right 1x4 submatrix represents the projection transform, which maps the 3D scene coordinates to the image plane. The elements of this submatrix are determined by the `projection` field in the `CameraStruct`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CameraStruct camera = new CameraStruct();\ncamera.fov = 45;\ncamera.aspect = 16/9;\ncamera.zNear = 0.1;\ncamera.zFar = 1000;\nMatrix4f projectionMatrix = calculateProjectionMatrix(camera);\n",
              "description": ""
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "36adb1ef-e936-3bb2-844a-4a207b8ee6ba",
            "ancestors": [
              "23fb9784-2764-17b1-c241-65de2c25e63c"
            ],
            "type": "function",
            "description": "is a subclass of the Camera Struct class and provides additional functionality for handling 3D camera movements. It has fields for fov, aspect, zNear, and zFar, which are used to calculate the perspective matrix, and a method for getting the perspective matrix as a Matrix4f object.",
            "name": "CameraStruct3D",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "9a903596-65cb-aeae-f448-e09260f0b430",
            "ancestors": [
              "23fb9784-2764-17b1-c241-65de2c25e63c",
              "36adb1ef-e936-3bb2-844a-4a207b8ee6ba"
            ],
            "type": "function",
            "description": "initializes a `Matrix4f` object representing a perspective projection matrix with the specified field of view (fov), aspect ratio, near and far distances.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 matrix representing a perspective projection matrix.\n\nThe `Matrix4f` object returned by the function is an instance of the Matrix4f class, which represents a 4x4 matrix in homogeneous coordinates.\n\nThe `initPerspective` method used to create the matrix sets the field of view (fov) in radians, the aspect ratio of the image, the near plane distance (zNear), and the far plane distance (zFar). These values determine the perspective projection of the 3D space, where objects appear smaller as they recede into the distance.\n\nThe matrix returned by the function is a representation of the viewing transformation that maps 3D points from the world coordinate system to the screen coordinate system, taking into account the perspective projection.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Camera3D myCam = new Camera3D(90, 16/9, 0.01f, 1000);\nmyCam.adjustToViewport(500, 500);\nMatrix4f projMat = myCam.getAsMatrix4();\n",
              "description": ""
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Transform.java",
    "path": "src/com/ch/Transform.java",
    "content": {
      "structured": {
        "description": "",
        "items": [
          {
            "id": "d1f8fc75-dba8-4b2b-a3f3-cf190d853556",
            "ancestors": [],
            "type": "function",
            "name": "rotate",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 46,
              "start": 57
            },
            "returns": false,
            "params": [
              {
                "name": "axis",
                "type": "Vector3f"
              },
              {
                "name": "angle",
                "type": "float"
              }
            ],
            "skip": false,
            "docLength": 11,
            "length": 3,
            "comment": {
              "description": "Rotates a `Vector3f` object by an angle about an arbitrary axis, resulting in a new quaternion representation of the rotation.",
              "params": [
                {
                  "name": "axis",
                  "type": "Vector3f",
                  "description": "3D vector that defines the rotation axis."
                },
                {
                  "name": "angle",
                  "type": "float",
                  "description": "3D rotation angle of the object being rotated around the specified axis."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "beeffe67-700d-445d-9f96-1be0b0663226",
            "ancestors": [],
            "type": "function",
            "name": "lookAt",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 61,
              "start": 76
            },
            "returns": false,
            "params": [
              {
                "name": "point",
                "type": "Vector3f"
              },
              {
                "name": "up",
                "type": "Vector3f"
              }
            ],
            "skip": false,
            "docLength": 15,
            "length": 3,
            "comment": {
              "description": "Computes the rotation required to face a specified point while maintaining a given upward direction.",
              "params": [
                {
                  "name": "point",
                  "type": "Vector3f",
                  "description": "3D position of the point that the code should look at."
                },
                {
                  "name": "up",
                  "type": "Vector3f",
                  "description": "3D direction perpendicular to the line of sight and used to calculate the rotation needed to look at the provided point."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "4bac6dd2-f5c4-4a71-a857-b3cd72ff3e9d",
            "ancestors": [],
            "type": "function",
            "name": "getLookAtRotation",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 80,
              "start": 115
            },
            "returns": "Quaternion",
            "params": [
              {
                "name": "point",
                "type": "Vector3f"
              },
              {
                "name": "up",
                "type": "Vector3f"
              }
            ],
            "skip": false,
            "docLength": 35,
            "length": 3,
            "comment": {
              "description": "Computes a quaternion representation of a rotation that looks at a given point from a specified direction. The function takes a point and an up vector as input, and returns a quaternion representing the desired rotation.",
              "params": [
                {
                  "name": "point",
                  "type": "Vector3f",
                  "description": "3D point that the look-at rotation should be applied to."
                },
                {
                  "name": "up",
                  "type": "Vector3f",
                  "description": "3D direction perpendicular to the look-at point, which is used to create a rotation matrix that aligns with the local coordinate system of the function."
                }
              ],
              "returns": {
                "type": "Quaternion",
                "description": "a quaternion representing the rotation necessary to look at a point in space from a specified starting position and orientation."
              }
            }
          },
          {
            "id": "34f0d24a-6ca8-410f-b0f7-313e7290d2fc",
            "ancestors": [],
            "type": "function",
            "name": "setParent",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 199,
              "start": 210
            },
            "returns": false,
            "params": [
              {
                "name": "parent",
                "type": "Transform"
              }
            ],
            "skip": false,
            "docLength": 11,
            "length": 3,
            "comment": {
              "description": "Sets the `parent` field of an object to a given `Transform` instance, allowing for the inheritance of transform properties and layout management.",
              "params": [
                {
                  "name": "parent",
                  "type": "Transform",
                  "description": "3D transform of the parent object to which the current object will be attached or moved relative to."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "3b9e105e-d1eb-47b0-a0eb-3f0a8cf88dc7",
            "ancestors": [],
            "type": "function",
            "name": "setPos",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 269,
              "start": 280
            },
            "returns": false,
            "params": [
              {
                "name": "pos",
                "type": "Vector3f"
              }
            ],
            "skip": false,
            "docLength": 11,
            "length": 3,
            "comment": {
              "description": "Sets the position of a component or object to the input vector.",
              "params": [
                {
                  "name": "pos",
                  "type": "Vector3f",
                  "description": "3D position of the entity to which the method is being called, and it is assigned to the `pos` field of the class."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "1b6d8d0d-56cd-44ea-97d1-f4bca612e57e",
            "ancestors": [],
            "type": "function",
            "name": "addToPos",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 284,
              "start": 294
            },
            "returns": false,
            "params": [
              {
                "name": "addVec",
                "type": "Vector3f"
              }
            ],
            "skip": false,
            "docLength": 10,
            "length": 1,
            "comment": {
              "description": "Updates the position of an object by adding a vector to its current position.",
              "params": [
                {
                  "name": "addVec",
                  "type": "Vector3f",
                  "description": "3D vector to be added to the position of the object, and its value is used to calculate the new position of the object."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "a94f7bd4-0bdd-4b90-aa78-e1a138c86cb9",
            "ancestors": [],
            "type": "function",
            "name": "setRot",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 309,
              "start": 323
            },
            "returns": false,
            "params": [
              {
                "name": "rotation",
                "type": "Quaternion"
              }
            ],
            "skip": false,
            "docLength": 14,
            "length": 3,
            "comment": {
              "description": "Sets the rotational orientation of an object by assigning a provided `Quaternion` instance to the object's `rot` field.",
              "params": [
                {
                  "name": "rotation",
                  "type": "Quaternion",
                  "description": "4D quaternion that specifies the rotational transformation to be applied to the object's orientation."
                }
              ],
              "returns": null
            }
          },
          {
            "id": "0f57e00c-22f0-4619-8add-5a0604e71965",
            "ancestors": [],
            "type": "function",
            "name": "setScale",
            "location": {
              "offset": "\t",
              "indent": 1,
              "insert": 341,
              "start": 352
            },
            "returns": false,
            "params": [
              {
                "name": "scale",
                "type": "Vector3f"
              }
            ],
            "skip": false,
            "docLength": 11,
            "length": 3,
            "comment": {
              "description": "Sets the scaling factor for an object, affecting its size and proportions.",
              "params": [
                {
                  "name": "scale",
                  "type": "Vector3f",
                  "description": "3D scaling factor for the entity, which is applied to its dimensions to transform it."
                }
              ],
              "returns": null
            }
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class that loads and manages OpenGL shaders. It provides methods for binding the shader program, uniform floats and matrices, and validating the program. The code also includes functions for loading shader source code from files and creating the shader programs.",
        "diagram": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"voxel\"\n        color=\"#33363A\"\n        World\n    }\n    subgraph cluster_1 {\n        label=\"math\"\n        color=\"#33363A\"\n        Matrix4f\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Shader [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    Shader -> World \n    Shader -> Shader \n    Matrix4f -> Shader \n}\n",
        "items": [
          {
            "id": "417916f8-284c-fa95-904b-95b20dfd644d",
            "ancestors": [],
            "type": "function",
            "description": "from the file provides a way to load and manage shaders in OpenGL. It allows for the creation of a vertex shader and a fragment shader, which can be linked together to create a program. The class also provides methods for uniform floats and matrices, as well as validation and logging functions to ensure proper functioning of the shader program.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 96,
            "docLength": null
          },
          {
            "id": "9b262855-65b4-4ca0-e143-566ece1e86fe",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "glues a program to the current GL context, enabling its use for rendering.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Example {\n\tpublic static void main(String[] args) {\n\t\tShader shader = new Shader(\"shader\");\n\t\tshader.bind();\n\t}\n}\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4a3ed54b-3213-e1ae-0d4d-579abfc54149",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "retrieves the value of a field called `program`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the value of the `program` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader shader = Shader.loadShader(\"myshader\");\nint program = shader.getProgram();\nGL20.glUseProgram(program);\n",
              "description": ""
            },
            "name": "getProgram",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "88ba9722-5a7a-89a5-af4e-2ed0688760a8",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "in Java is a method that sets floating-point values to GL uniform locations based on the length of an array of values passed as a parameter.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of the uniform location in the program's layout, which is used to determine the correct GL function to call for the given number of input values.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Shader shader = new Shader(0); // Create a shader object using a 0 program ID\nshader.uniformf(\"uniform1\", 1.0, 2.0, 3.0); // Set the value of the \"uniform1\" uniform to (1.0, 2.0, 3.0)\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "89a9cd36-7a3f-bd94-e24f-8e441d3d8166",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "sets a 4x4 uniform matrix value using the `glUniformMatrix4` method and storing it in a location specified by a name parameter.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of the uniform location where the matrix is to be stored.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 homogeneous transformation matrix that is to be uniformized.\n\n* `name`: A string representing the name of the uniform location where the matrix will be stored.\n* `mat`: A `Matrix4f` object representing a 4x4 floating-point matrix. This object contains the matrix data in its linear data, which is passed to the `glUniformMatrix4` function to store the matrix at the specified location.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import com.ch.*;\nimport com.ch.math.*;\n\npublic class MyClass{\n    public static void main(String[] args){\n        Matrix4f myMatrix = new Matrix4f();\n        Shader myShader = new Shader(0); //replace with your shader object\n        myShader.uniformMat4(\"myUniform\", myMatrix);\n    }\n}\n",
              "description": ""
            },
            "name": "unifromMat4",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a6b6b646-fb63-2ca2-6b4a-6ef8e289f9f5",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "retrieves the location of a uniform named `name` within a program's GPU using `GL20.glGetUniformLocation`.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of a uniform location within a program specified by the `program` argument, which is passed as a GL20 object to the `glGetUniformLocation()` function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in a GPU program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Shader shader = new Shader();\n        int location = shader.getLocation(\"name\");\n    }\n}\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "88f4b86d-d42f-a296-8044-951c4e99e705",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "loads a shader program from a file, creating and validating the program upon successful loading. It returns a new `Shader` object representing the loaded program.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of the shader file to be loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a new instance of the `Shader` class, representing a shader program created by combining a vertex shader and a fragment shader.\n\n* `program`: The program object created by `glCreateProgram()` is stored in the variable `program`. This object represents the linked shader program that can be used for rendering.\n* `Shader`: The `Shader` class instance is returned as the output of the function, which contains information about the shader program, including its program object and other relevant details.",
              "complex_type": true
            },
            "name": "loadShader",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "f668d473-992e-b3ad-294d-338d0bb3f510",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "creates a new shader object, loads shader source code from a string, compiles it, and attaches the resulting shader to a program object.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader to create, with values ranging from 0 (vertex shader) to 1 (fragment shader).",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "source code for the shader to be compiled.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program that the loaded shader will be attached to and used by.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 69,
              "insert": 69,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "d17bc8c4-5142-e4aa-c041-1470d9de4ef0",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "verifies the linking and validation of a GPU program. It checks for errors during linking and validation, printing an error message to the console if any occur, and exits the program with a failure status if necessary.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D program that needs to be validated and linked.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "e402bde0-60ad-c19f-8049-9af09c09c842",
            "ancestors": [
              "417916f8-284c-fa95-904b-95b20dfd644d"
            ],
            "type": "function",
            "description": "reads the contents of a specified file as a string, handling potential IOExceptions.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "file from which to read the text.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representation of the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 99,
              "insert": 99,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "src/com/ch/Texture.java",
    "content": {
      "structured": {
        "description": "A class called `Texture` that handles loading and binding textures in an OpenGL context. The class has several methods: `bind()` binds the texture to a specific texture slot, `bind(int samplerSlot)` binds the texture to a specific slot, `getID()` returns the ID of the texture, and `loadTexture(String fileName)` loads a texture from a file and binds it to the context.",
        "items": [
          {
            "id": "d5c25e73-3312-f5ba-9a41-b98229e9c400",
            "ancestors": [],
            "type": "function",
            "description": "is used to load and manage textures in a graphics program. It provides methods for binding the texture to a specific sampler slot and getting the ID of the loaded texture. The loadTexture method takes a file path as input and returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 75,
            "docLength": null
          },
          {
            "id": "ca00e44e-fc96-17a5-d44e-e94111206bf3",
            "ancestors": [
              "d5c25e73-3312-f5ba-9a41-b98229e9c400"
            ],
            "type": "function",
            "description": "0 in the code calls the `bind` method with the argument 0, which is used to bind a listener to an event.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\tbind(0);\n}\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e061fab7-bdff-1ea3-8944-92162594dce1",
            "ancestors": [
              "d5c25e73-3312-f5ba-9a41-b98229e9c400"
            ],
            "type": "function",
            "description": "sets the active texture slot to a specific index (0-31) and binds a texture ID to that slot using the `glBindTexture()` method.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot in which to bind a texture handle.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "int samplerSlot = 0;\nTexture texture = new Texture(\"texture.png\");\ntexture.bind(samplerSlot);\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "33f4d5fa-9b09-1cb6-5743-2d9937b047be",
            "ancestors": [
              "d5c25e73-3312-f5ba-9a41-b98229e9c400"
            ],
            "type": "function",
            "description": "returns the current ID value of an object.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing the ID of the object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Texture myTex = new Texture(\"textureName\");\nint id = myTex.getID();\n",
              "description": ""
            },
            "name": "getID",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e06e559c-7be4-a0b4-7f46-f80cd38d38c3",
            "ancestors": [
              "d5c25e73-3312-f5ba-9a41-b98229e9c400"
            ],
            "type": "function",
            "description": "loads a 2D texture from a file and returns the generated texture ID. It reads the image data, creates a ByteBuffer for the pixel data, and passes it to the GL_TEXTURE_2D texture object using the `glTexImage2D` method. The function also generates mipmaps using the `glGenerateMipmap` method.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "file path of the image to be loaded as a texture.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "a texture ID generated using GL_TEXTURE_2D.\n\n* The output is an integer, which represents the ID of the generated texture.\n* The ID is generated using the `GL11.glGenTextures()` function.\n* The texture is created as a 2D texture, with the `GL_TEXTURE_2D` target.\n* The texture has an RGBA8 internal format, which means it stores each pixel as a 32-bit value, representing the red, green, blue, and alpha channels.\n* The texture is repeatable in both the x and y directions, with the `GL_REPEAT` texture wrap mode.\n* The texture has a linear filter, with the `GL_LINEAR` minification and magnification filters.\n* A mipmap is generated using the `GL30.glGenerateMipmap()` function, which creates a pyramid of sub-textures at different levels of detail.\n* The mipmap has a linear filter, with the `GL_LINEAR_MIPMAP_LINEAR` texture wrap mode.\n* The texture also has a texture lod bias of -0.6, which controls the level of detail in the mipmap.",
              "complex_type": true
            },
            "name": "loadTexture",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 48,
            "docLength": null
          }
        ]
      }
    }
  }
]