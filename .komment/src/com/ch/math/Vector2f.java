{"name":"Vector2f.java","path":"src/com/ch/math/Vector2f.java","content":{"structured":{"description":"A `Vector2f` class that provides various methods for manipulating and transforming vector objects. These methods include length, maximum value, dot product, normalization, cross product, lerp, rotation, addition, subtraction, multiplication, division, absolute value, and string conversion. Additionally, the code includes a `set()` method for setting the values of the vector, as well as an `equals()` method for comparing vectors.","items":[{"id":"5662956f-04f2-89bd-4149-55c1863539f6","ancestors":[],"type":"function","description":"is a simple class for representing 2D vectors in Java. It has several methods for calculating vector operations such as length, max, dot product, normalization, and cross product. Additionally, it provides methods for adding, subtracting, multiplying, dividing, and rotating vectors. The class also includes high-level functions such as equality comparison and conversion to a 3D vector.","name":"Vector2f","code":"public class Vector2f {\n\t\n\tprivate float x;\n\tprivate float y;\n\n\tpublic Vector2f(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, y);\n\t}\n\n\tpublic float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}\n\n\tpublic Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}\n\n\tpublic float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}\n\n\tpublic Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}\n\n\tpublic Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}\n\n\tpublic Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}\n\n    public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }\n\n\tpublic Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}\n\n\tpublic Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}\n\n\tpublic Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}\n\n\tpublic Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}\n\n\tpublic Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}\n\n\tpublic Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}\n\n\tpublic Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}\n\n\tpublic Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\tpublic Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}\n\n    public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}\n\t\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":124},{"id":"073f2283-c270-c299-a349-cdd5fb4036e6","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"calculates the Euclidean distance of a point from its origin, represented by `x` and `y`, using the Pythagorean theorem.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the `x` and `y` coordinates.","complex_type":false},"usage":{"language":"java","code":"Vector2f v = new Vector2f(3, 4);\nfloat len = v.length();\nSystem.out.println(\"Length: \" + len); // Output: Length: 5.0\n","description":""},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}","location":{"start":13,"insert":13,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"21a795e7-630f-f29f-b848-25c186b74971","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"computes the maximum value of two input values `x` and `y`, and returns it as a float value.","params":[],"returns":{"type_name":"float","description":"the larger of `x` and `y`.","complex_type":false},"usage":{"language":"java","code":"Vector2f vec = new Vector2f(3, 5);\nfloat max = vec.max(); // max = 5\n","description":"\nIn this example, the value of the maximum component in the vector (y) is returned by the max() method."},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, y);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"3f9b3540-4582-3eb5-4949-9cd5157d94f4","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"calculates the dot product of a `Vector2f` object and another vector, returning the result as a floating-point number.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that the dot product is being calculated with.\n\n* `x`: The first component of the vector `r`, which is a floating-point number.\n* `y`: The second component of the vector `r`, which is also a floating-point number.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and the component values of the function parameter `r`.","complex_type":false},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(10, 10);\nVector2f vector2 = new Vector2f(5, 5);\nfloat dotProduct = vector.dot(vector2);\nSystem.out.println(\"The dot product of the two vectors is \" + dotProduct);\n","description":""},"name":"dot","code":"public float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}","location":{"start":21,"insert":21,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"44478eae-b8be-73a9-b44f-da1aa3d4a60d","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"normalizes a `Vector2f` instance by dividing its components by their corresponding lengths, returning a new `Vector2f` instance with normalized values.","params":[],"returns":{"type_name":"Vector2f","description":"a normalized vector with x and y components proportional to the original vector's length.\n\nThe output is a `Vector2f` object, where the x-component represents the normalized value of the x-coordinate of the original vector, and the y-component represents the normalized value of the y-coordinate.\n\nThe normalization is performed by dividing each component of the original vector by its length, which is calculated using the `length()` method.\n\nThe resulting vector has a length of 1, indicating that it is a unit vector in the original coordinate system.\n\nThe output can be used to represent a normalized version of the original vector, which can be useful in various applications such as image processing, computer vision, and machine learning.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vec = new Vector2f(3, 4);\n        Vector2f normalizedVec = vec.normalized();\n        System.out.println(normalizedVec); // Output: (0.6, 0.8)\n    }\n}\n","description":""},"name":"normalized","code":"public Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}","location":{"start":25,"insert":25,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"6e623de7-01a1-2da9-f14c-c17e4d435dd8","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"takes a `Vector2f` object `r` as input and returns the product of its `x` and `y` components, calculated using the dot product formula.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be multiplied with the `x` and `y` components of the current vector.\n\n* `r` is an instance of the `Vector2f` class, which represents a 2D vector in Java.\n* `r.getX()` and `r.getY()` return the x-coordinate and y-coordinate of the vector, respectively.\n* The function returns the dot product of the input vector with the x-axis of another vector.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point value representing the dot product of two vectors.","complex_type":false},"usage":{"language":"java","code":"Vector2f vectorOne = new Vector2f(1, 0);\nVector2f vectorTwo = new Vector2f(0, -1);\nfloat result = vectorOne.cross(vectorTwo); // returns -1\n","description":""},"name":"cross","code":"public float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"dbf14cdc-8005-5585-6044-c62c8457a209","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"computes a vector interpolation between two given vectors, using the provided `lerpFactor` to control the blending process.","params":[{"name":"dest","type_name":"Vector2f","description":"2D destination vector that the lerping operation will transform the original vector towards.\n\nThe input `dest` is a `Vector2f` instance representing the destination point. It has two components: x and y, which are floating-point values representing the coordinates of the point.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"amount of interpolation or blending between the current position and the destination position, with higher values resulting in more rapid transition towards the destination.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance that represents the intermediate position between the current position of the object and the destination position.\n\nThe `lerp` function takes in two parameters: `dest` and `lerpFactor`. The output is a `Vector2f` object that represents the interpolation between the starting vector `this` and the destination vector `dest`.\n\nThe function first computes the difference between `this` and `dest`, which results in a second `Vector2f` object. It then multiplies this difference by `lerpFactor` to obtain the interpolated value. Finally, it adds the interpolated value to `this` to produce the final output.\n\nThe returned vector has the same properties as the input vectors, including magnitude and direction. The interpolation is performed using a smooth, continuous function, ensuring that the output is well-behaved and does not exhibit any discontinuities or sharp corners.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(0, 0); // Initialize a vector with x-coordinate 0 and y-coordinate 0\nVector2f vector2 = new Vector2f(5, 0); // Initialize another vector with x-coordinate 5 and y-coordinate 0\nfloat lerpFactor = 0.3; // Set the interpolation factor to be 30% of the distance between the two vectors\nVector2f result = vector1.lerp(vector2, lerpFactor); // Interpolate between the two vectors using the given factor and return a new Vector2f object with interpolated coordinates\n","description":""},"name":"lerp","code":"public Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f2a1cbfe-a245-a581-5b4d-5ec568792d21","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"rotates a `Vector2f` object by an angle in radians, returning a new `Vector2f` object with its x and y components scaled by the cosine and sine of the angle, respectively.","params":[{"name":"angle","type_name":"float","description":"angle of rotation in radians, which is used to calculate the cosine and sine components of the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new vector with x and y components rotated by the specified angle.\n\n* The Vector2f object represents a 2D point with x and y components.\n* The angle parameter is passed to the Math.toRadians() method to convert it to radians.\n* The Cos and Sin methods of Math class are used to calculate the cosine and sine of the angle, respectively.\n* The output vector is created by multiplying the x and y components of the input vector by the cosine and sine values, respectively.","complex_type":true},"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(1, 0);\nmyVector.rotate(90);\nSystem.out.println(myVector); // prints (0, 1)\n","description":""},"name":"rotate","code":"public Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}","location":{"start":39,"insert":39,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"e248a386-4ded-e0a9-0049-edc1fcfc5130","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"takes a `Vector2f` parameter `r` and returns a new `Vector2f` instance with the sum of the current vector's components and those of the provided vector.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be added to the current vector.\n\n* `x`: The x-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new vector with the sum of the input vectors' x and y coordinates.\n\n* The output is a new `Vector2f` instance, containing the sum of the inputs' `x` and `y` components.","complex_type":true},"usage":{"language":"java","code":"public class Test {\n    public static void main(String[] args) {\n        Vector2f a = new Vector2f(3, 4);\n        Vector2f b = new Vector2f(5, 6);\n        Vector2f result = a.add(b);\n        System.out.println(\"Result: \" + result);\n    }\n}\n","description":""},"name":"add","code":"public Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}","location":{"start":47,"insert":47,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"84679a98-461c-40ab-4c45-af33743f984d","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"adds a float value to a `Vector2f` object, returning a new vector with the sum of the original and the added value.","params":[{"name":"r","type_name":"float","description":"2D vector component that is added to the current vector value of the `Vector2f` object being modified.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with an x-coordinate equal to the sum of the current vector's x-coordinate and the input `r`, and a y-coordinate equal to the sum of the current vector's y-coordinate and the input `r`.\n\nThe returned object is of type `Vector2f`, which represents a 2D point with x and y coordinates. The x and y coordinates of the output are calculated by adding the input value `r` to the existing values of x and y, respectively. Therefore, the output has an increased x and y coordinate compared to the original input.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector = new Vector2f(1, 2);\n        Vector2f result = vector.add(3);\n        System.out.println(\"The result of adding 3 to the vector is: \" + result);\n    }\n}\n","description":""},"name":"add","code":"public Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}","location":{"start":51,"insert":51,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"905d978f-669d-6d99-3d44-310c1eb67765","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"takes a `float` argument `x` and `y` and returns a new `Vector2f` instance with the sum of the current instance's `x` and `y` and the given `x` and `y` arguments.","params":[{"name":"x","type_name":"float","description":"2D coordinate of the point to be added to the existing vector.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the sum of the current vector and the provided `x` and `y` values.\n\nThe returned object is of type `Vector2f`, which represents a 2D point in homogeneous coordinates.\nThe `x` property of the returned object is equal to the sum of the `x` properties of the input arguments `x` and the current instance `this.x`.\nSimilarly, the `y` property of the returned object is equal to the sum of the `y` properties of the input arguments `y` and the current instance `this.y`.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(1, 2); // Create a vector with (x, y) = (1, 2).\nVector2f v2 = new Vector2f(-3, 4); // Create a vector with (x, y) = (-3, 4).\n\nv1.add(v2); // Add the two vectors together.\n\n// The resulting vector is now (1 + -3, 2 + 4) = (-2, 6).\n","description":""},"name":"add","code":"public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }","location":{"start":55,"insert":55,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"c0a93bac-31c3-de9c-014b-31c5a314f122","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"computes the difference between a `Vector2f` and another `Vector2f`. It returns a new `Vector2f` object representing the difference in terms of x-coordinates and y-coordinates.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that the function will subtract from the current vector.\n\nThe `Vector2f` object `r` contains two components: `x` and `y`, which represent the x-coordinate and y-coordinate of a 2D vector, respectively.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the difference between the input vector and the reference vector.\n\n* The output is of type `Vector2f`.\n* It has two components, `x` and `y`, which represent the difference between the input vector's `x` and `y` coordinates and the input argument `r.getX()` and `r.getY()`, respectively.","complex_type":true},"usage":{"language":"java","code":"Vector2f r = new Vector2f(1, 2); // create a vector with values (1, 2)\nVector2f result = new Vector2f(-3, -4).sub(r); // subtract the vector from (3, 4)\nSystem.out.println(result); // Output: (-4, -6)\n","description":"\nThis example creates a vector `r` with values (1, 2), then subtracts it from another vector (-3, -4). The result of this operation is a new vector that has the same values as the original vector minus the values in `r`."},"name":"sub","code":"public Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}","location":{"start":59,"insert":59,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"7b02f772-30d6-e897-3f43-992651177bbe","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"takes a single float argument `r` and returns a new `Vector2f` object representing the difference between the original vector's coordinates and `r`.","params":[{"name":"r","type_name":"float","description":"2D vector to subtract from the current vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance representing the difference between the original vector and the specified value.\n\nThe `Vector2f` object represents a two-dimensional vector in the homogeneous coordinate space, with the origin at (0, 0). The `x` and `y` fields represent the x and y coordinates of the vector, respectively. When the function is called with a real number `r`, it returns a new `Vector2f` object representing the vector that is `r` units away from the original vector in both the x and y directions.","complex_type":true},"usage":{"language":"java","code":"Vector2f v = new Vector2f(1, 2);\nv.sub(3); // returns (4, -1)\n","description":""},"name":"sub","code":"public Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}","location":{"start":63,"insert":63,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4f86bb96-cc0c-a9b8-4b41-1b43b153d0cd","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"multiplies its argument by the component-wise product of the current vector's components and the arguments' components.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be multiplied with the current vector.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with the product of the input vector's `x` and `y` components and the input argument `r`.\n\n* The output is a new instance of the `Vector2f` class.\n* The `x` and `y` fields of the output are computed by multiplying the corresponding fields of the input `r` object.\n* The resulting vector has the same magnitude as the input, but its direction may be different due to the multiplication by a scalar value.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(5, 3);\nVector2f vector2 = new Vector2f(4, 2);\nVector2f result = vector1.mul(vector2);\nSystem.out.println(result.toString()); // prints (20, 6)\n","description":""},"name":"mul","code":"public Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}","location":{"start":67,"insert":67,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0ae47ec9-8dbf-4fb6-b54a-86597739b3a7","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"multiplies its input by a scalar value, returning a new `Vector2f` instance with the product.","params":[{"name":"r","type_name":"float","description":"scalar value that multiplies the `x` and `y` components of the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object with x and y components multiplied by the input parameter `r`.\n\nThe return value is of type `Vector2f`, which represents a 2D vector with x and y components.\n\nThe x component of the returned vector is equal to the product of the `x` field of the input parameter `r` multiplied by the `x` component of the original vector.\n\nSimilarly, the y component of the returned vector is equal to the product of the `y` field of the input parameter `r` multiplied by the `y` component of the original vector.","complex_type":true},"usage":{"language":"java","code":"// Declare the vector variables\nVector2f v1 = new Vector2f(3, 4);\nfloat r = 2;\n\n// Use the mul method to calculate a new vector with the same values as v1 but multiplied by r.\nVector2f v2 = v1.mul(r);\n\n// Print the result of the multiplication\nSystem.out.println(v2); // Output: (6, 8)\n","description":""},"name":"mul","code":"public Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}","location":{"start":71,"insert":71,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b9bae942-bdf8-518d-2f40-0c3a1e12b1eb","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"takes a `Vector2f` argument `r` and returns a new `Vector2f` object with the x-coordinate scaled by the reciprocal of the x-coordinate of `r`, and the y-coordinate scaled by the reciprocal of the y-coordinate of `r`.","params":[{"name":"r","type_name":"Vector2f","description":"vector to which the current vector is divided.\n\n`x` and `y`: These are the coordinates of the vector in the input `r`.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with scaled x and y components proportional to the input `r`.\n\n* The output is a new Vector2f instance with x and y components calculated as the ratio of the input vector's x and y components to the input vector itself.\n* The resulting vector has the same magnitude as the original input vector, but its direction is scaled by the reciprocal of the input vector's magnitude.","complex_type":true},"usage":{"language":"java","code":"public class TestVector {\n    public static void main(String[] args) {\n        Vector2f vectorA = new Vector2f(1, 1);\n        Vector2f vectorB = new Vector2f(3, 4);\n\n        Vector2f result = vectorA.div(vectorB);\n\n        System.out.println(result);\n    }\n}\n","description":"\nIn this example, we create two vectors `vectorA` and `vectorB`, and then use the div method to divide `vectorA` by `vectorB`. The resulting vector `result` is printed to the console."},"name":"div","code":"public Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}","location":{"start":75,"insert":75,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"79adb7d3-36a3-3f94-6a4b-129a7a472c40","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"multiplies its input by the scalar value `r`, and returns a new `Vector2f` instance with the scaled values for `x` and `y`.","params":[{"name":"r","type_name":"float","description":"scalar value used to divide the vector's components by.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a vector with x and y components scaled by the input value `r`.\n\nThe returned Vector2f object has a magnitude (length) equal to the input value 'r' divided by the corresponding component of the original Vector2f object.\nThe direction (angle) of the returned Vector2f object is unchanged from that of the original Vector2f object.\nThe returned Vector2f object has the same reference as the original Vector2f object, meaning any modifications made to one affects the other.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(4, 5);\nfloat r = 2;\nVector2f v2 = v1.div(r);\nSystem.out.println(\"v1 is \" + v1);\nSystem.out.println(\"v2 is \" + v2);\n","description":"\nThis code would be run to produce the output:\nv1 is (4, 5)\nv2 is (2, 2.5)"},"name":"div","code":"public Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}","location":{"start":79,"insert":79,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"fbe5cc09-7334-778f-fd4b-28ca8d09774e","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"returns a new `Vector2f` instance with the absolute values of its input parameters, `x` and `y`.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance containing the absolute values of its input components.\n\nThe return type is `Vector2f`, which means it has two components representing the x and y coordinates of a 2D vector.\n\nThe expression `Math.abs(x)` returns the absolute value of the `x` component of the input vector, which is a non-negative number. Similarly, `Math.abs(y)` returns the absolute value of the `y` component, also a non-negative number.\n\nTherefore, the returned output is a new vector with non-negative coordinates that represent the absolute values of the original vector's x and y components.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(2, 3);\nvector.abs(); // returns a new Vector2f instance with absolute values (2, 3)\n","description":""},"name":"abs","code":"public Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}","location":{"start":83,"insert":83,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"610b0312-2e61-e4a1-1d4c-2bc06fb11e7c","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"returns a string representation of a point object, comprising its `x` and `y` coordinates separated by a space.","params":[],"returns":{"type_name":"String","description":"a string representation of a point in coordinates, consisting of an opening paren followed by the values of `x` and `y`.","complex_type":false},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(3, 4);\nSystem.out.println(vector.toString()); // prints (3.0 4.0)\n","description":""},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}","location":{"start":87,"insert":87,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"c0966f9e-2c28-8c88-c840-683d79e7e4f2","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"sets the `x` and `y` attributes of a `Vector2f` object to the input values, and returns a reference to the modified object.","params":[{"name":"x","type_name":"float","description":"2D coordinate of the point to which the `Vector2f` instance should be set.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the `Vector2f` object, which is being updated to match the provided value.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a reference to the modified vector instance.\n\n* The `Vector2f` object is mutated to have the new values of `x` and `y`.\n* The returned object is the same as the original one, indicating that the method does not change the state of the object.\n* No information about the author or licensing is provided in the response.","complex_type":true},"usage":{"language":"java","code":"Vector2f vec = new Vector2f(0, 0);\nvec.set(3, 4);\nSystem.out.println(vec);\n","description":"\nThis code creates a vector with coordinates (0, 0) and then updates its x-coordinate to 3 and its y-coordinate to 4 using the set method. Finally, it prints the updated vector's values using the println method of the System class."},"name":"set","code":"public Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}","location":{"start":91,"insert":91,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"4b980229-ffc6-f6af-6142-dbc7450235e4","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"sets the x and y components of the vector to the corresponding values of the provided `Vector2f` object.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be set as the new value of the `Vector2f` object.\n\n* `getX()` and `getY()` represent the X and Y coordinates of the vector, respectively.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a reference to the original `Vector2f` object with its x and y components updated to match the values of the provided `r` object.\n\n* The `Vector2f` object is assigned the values of `r.getX()` and `r.getY()`.\n* The function returns a reference to the original `Vector2f` object, indicating that the state of the object remains unchanged after the assignment.\n* No information about the author or licensing of the code is provided in the output.","complex_type":true},"usage":{"language":"java","code":"Vector2f vec = new Vector2f(0, 0);\nVector2f r = new Vector2f(1, 1);\nvec.set(r).toString(); // returns (1 1)\n","description":"\nIn this example, `set` is called on the object `vec`, and its parameters are initialized to the values of the `x` and `y` variables of another vector object, which was passed as a parameter, `r`. The method then sets the values of the x and y variables of the current object, `vec`, to be those of the newly set vector. Finally, it converts the `Vector2f` object to its string representation using the `toString()` method, which returns the formatted coordinates of the vector as a string."},"name":"set","code":"public Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}","location":{"start":97,"insert":97,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"efd9e4f5-8040-e88f-2f41-ca89fdb0b0c6","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"converts a `Vector2f` instance to a `Vector3f` instance by adding a third component representing the z-coordinate, which is set to zero.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the values `x`, `y`, and `0` for its components.\n\n* The Vector3f object returned has three components: x, y, and z, which represent the coordinates of the 3D vector in the respective dimensions.\n* Each component is a float value ranging from -1 to 1, representing the magnitude and direction of the vector in the corresponding dimension.\n* The vector is defined as having origin at (0, 0, 0), meaning that the x, y, and z components all have a value of 0 at this point.","complex_type":true},"usage":{"language":"java","code":"Vector2f vec = new Vector2f(5, 8);\nVector3f vec3d = vec.as3DVector();\nSystem.out.println(\"vec3d: \" + vec3d);\n// Output: vec3d: (5.0 8.0 0.0)\n","description":""},"name":"as3DVector","code":"public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }","location":{"start":102,"insert":102,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"8be13e48-bd58-f08c-544e-c774af840a40","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"returns the value of the `x` field, which is a `float` variable.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the `x` field.","complex_type":false},"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(5, 3);\nfloat xVal = myVector.getX();\nSystem.out.println(\"My x value is \" + xVal); // My x value is 5\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":106,"insert":106,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ee01cd54-087e-808e-6e4c-ab47594ee76c","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"sets the value of the field `x` to the argument passed as a float.","params":[{"name":"x","type_name":"float","description":"new value for the `x` field of the class, which is being assigned to by calling the `setX()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(0, 0);\nmyVector.setX(1); // Sets the x-coordinate of myVector to 1.\n","description":""},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"fdb98061-1a2e-42bd-c940-eb38052c3238","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"retrieves the value of `y` from a source and returns it as a floating-point number.","params":[],"returns":{"type_name":"float","description":"a `float` value representing the `y` coordinate of the object.","complex_type":false},"usage":{"language":"java","code":"Vector2f vec = new Vector2f(10, 20);\nfloat y = vec.getY();\nSystem.out.println(y); //prints out 20\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":114,"insert":114,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"3d69a426-2f63-dd99-a944-02f3beaf7078","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"sets the value of the object's `y` field to the argument passed as a float parameter.","params":[{"name":"y","type_name":"float","description":"new value for the field 'y' of the class, which is being assigned to by calling the `setY()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector2f v = new Vector2f();\nv.setY(10); // This will change the y-coordinate of the vector to 10.\n","description":""},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":118,"insert":118,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0ec02b59-5d8c-ac9f-9249-b1c1159760f7","ancestors":["5662956f-04f2-89bd-4149-55c1863539f6"],"type":"function","description":"compares two `Vector2f` objects based on their x and y coordinates, returning `true` if they are equal, and `false` otherwise.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that the function is comparing to the current vector.\n\n* `x`: The `x` property of `r` represents the x-coordinate of the vector. It is an `int` value.\n* `y`: The `y` property of `r` represents the y-coordinate of the vector. It is also an `int` value.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the object is equal to the given vector.","complex_type":false},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(5, 6);\nVector2f vector2 = new Vector2f(8, 9);\nSystem.out.println(\"vector1 and vector2 are equal? \" + vector1.equals(vector2));\n","description":"\nThis code would check if the x and y components of both vectors are equal. If they are, it will return true, otherwise false."},"name":"equals","code":"public boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}