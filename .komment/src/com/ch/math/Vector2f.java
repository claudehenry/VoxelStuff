{"name":"Vector2f.java","path":"src/com/ch/math/Vector2f.java","content":{"structured":{"description":"A `Vector2f` class that offers several operations and features such as length, max, dot product, normalization, cross product, lerping, rotation, addition and subtraction. These methods and operations can be used on floating-point vectors of two components.","items":[{"id":"05d7276b-64a8-5ca1-bc49-157d54347051","ancestors":[],"type":"function","description":"is a mathematical representation of a 2D vector in Java. It has two fields: x and y, which represent the components of the vector, and several methods for manipulating and computing with the vector. These include length(), max(), dot(), cross(), lerp(), rotate(), add(), sub(), mul(), div(), abs(), set() and as3DVector(). The class also provides methods for checking equality with another vector.","name":"Vector2f","code":"public class Vector2f {\n\t\n\tprivate float x;\n\tprivate float y;\n\n\tpublic Vector2f(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, y);\n\t}\n\n\tpublic float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}\n\n\tpublic Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}\n\n\tpublic float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}\n\n\tpublic Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}\n\n\tpublic Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}\n\n\tpublic Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}\n\n    public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }\n\n\tpublic Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}\n\n\tpublic Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}\n\n\tpublic Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}\n\n\tpublic Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}\n\n\tpublic Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}\n\n\tpublic Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}\n\n\tpublic Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}\n\n\tpublic Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\tpublic Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}\n\n    public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}\n\t\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":124},{"id":"a2a8b785-6d85-748e-4047-223c4486f941","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"calculates the Euclidean distance of a point in two-dimensional space by taking the square root of the sum of the squares of its x and y coordinates.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the `x` and `y` coordinates.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n        Vector2f vector = new Vector2f(3,4);\n        float distance = vector.length(); // distance = 5\n}\n","description":""},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y);\n\t}","location":{"start":13,"insert":13,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"1e004bb4-7766-a09d-bd46-72b67d518b6a","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"computes the maximum value of two floating-point numbers `x` and `y`.","params":[],"returns":{"type_name":"float","description":"the maximum value of either `x` or `y`.","complex_type":false},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(5, 3);\nfloat maximum = vector.max();\n","description":"\nThis will return the largest value between x and y which in this case is 5."},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, y);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ee3d243f-90b7-e587-9f41-334cb4873068","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"computes the dot product of a `Vector2f` object and a given `Vector2f` argument, returning the result as a floating-point value.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to which the `x` and `y` components of the returning value will be dot-producted.\n\n`r`: A `Vector2f` instance containing the coordinates (x, y) of a point in 2D space. The `x` and `y` attributes hold the individual coordinates, respectively.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and another vector represented by `r`.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector2f a = new Vector2f(3, 4);\n    Vector2f b = new Vector2f(5, 6);\n\n    float result = a.dot(b);\n\n    System.out.println(\"The dot product of \" + a + \" and \" + b + \" is \" + result);\n}\n","description":""},"name":"dot","code":"public float dot(Vector2f r) {\n\t\treturn x * r.getX() + y * r.getY();\n\t}","location":{"start":21,"insert":21,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"314bff4f-6387-16af-0c45-6a9de2f52e2f","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"normalizes a vector by dividing its components by the vector's length, resulting in a unitized vector with magnitude equal to one.","params":[],"returns":{"type_name":"Vector2f","description":"a normalized vector with x and y components scaled proportionally to the length of the original vector.\n\n* The output is a `Vector2f` object representing a normalized version of the original vector.\n* The x-component of the output is calculated as `x / length`, where `length` is the magnitude (or length) of the original vector.\n* The y-component of the output is calculated similarly, i.e., `y / length`.\n* The resulting vector has a magnitude equal to the magnitude of the original vector, but its direction is normalized to lie on the axis of the coordinate system.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(10, 5); // Create a vector with x and y components\nfloat length = vector.length(); // Calculate the length of the vector\nVector2f normalized = vector.normalized(); // Normalize the vector by dividing it's components by its length\nSystem.out.println(normalized); // Print the normalized vector (0.7, 0.3)\n","description":""},"name":"normalized","code":"public Vector2f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector2f(x / length, y / length);\n\t}","location":{"start":25,"insert":25,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"d9935d56-362f-76bc-6948-10cee8db5a74","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a `Vector2f` argument `r` and returns the product of its `x` and `y` components, without using any actual multiplication operation.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be multiplied with the current vector, resulting in a new 2D vector that is the cross product of the two vectors.\n\n* `r` is an instance of Vector2f, which represents a 2D point or vector in the Java programming language.\n* `r.getX()` and `r.getY()` return the x- and y-coordinates of the point or vector, respectively.\n* The returned value is the dot product of `x` and `r.y` minus the dot product of `y` and `r.x`.","complex_type":true}],"returns":{"type_name":"float","description":"a scalar value representing the cross product of two vectors.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tVector2f v1 = new Vector2f(3, 4);\n\t\tVector2f v2 = new Vector2f(-5, 6);\n\t\tfloat result = v1.cross(v2);\n\t\tSystem.out.println(\"Cross product: \" + result);\n\t}\n}\n","description":""},"name":"cross","code":"public float cross(Vector2f r) {\n\t\treturn x * r.getY() - y * r.getX();\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ec42ae00-3cb3-f099-b641-91d693e422c5","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"calculates the linear interpolation between two vector values, `dest` and `this`, based on a specified factor `lerpFactor`. It returns a new vector representing the interpolated value.","params":[{"name":"dest","type_name":"Vector2f","description":"2D destination vector that the current vector will be interpolated to.\n\n* `dest`: This is the destination point where the linear interpolation will be performed. It has two components - `x` and `y`, representing the position of the point in the x-axis and y-axis, respectively.\n* `lerpFactor`: This is a scalar value that represents the factor by which the current position will be interpolated towards the destination point.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"scalar value that determines the interpolation between the current position and the destination position of the vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object that represents the interpolated value between the current position and the destination position.\n\nThe `Vector2f` object returned by `lerp` represents the interpolated position between the original `this` object and the destination `dest` object. The `mul` method is applied to the difference between the two objects (`this - dest`) to produce a value representing the interpolation factor, which is then added to the original object using the `add` method. This produces the final interpolated position.","complex_type":true},"usage":{"language":"java","code":"Vector2f v = new Vector2f(10.0f, 20.0f);\nVector2f dest = new Vector2f(30.0f, 40.0f);\nfloat lerpFactor = 0.5f; // The amount of interpolation between this and the destination vector\nv.lerp(dest, lerpFactor);\n// v is now (18.0f, 32.0f)\n","description":""},"name":"lerp","code":"public Vector2f lerp(Vector2f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"cfa40a18-7fbe-85b2-7147-21303b16dfe4","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"rotates a vector by an angle in radians, returning the rotated vector in a new coordinate system.","params":[{"name":"angle","type_name":"float","description":"2D rotation angle in radians, which is multiplied by the cosine and sine of that angle to produce the new coordinates of the rotated vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with the x-axis and y-axis values rotated by the provided angle.\n\n* The output is a `Vector2f` object, representing a 2D point in the xy-plane.\n* The x-coordinate of the output is calculated as (x * cos - y * sin), where x and y are the input coordinates of the function.\n* The y-coordinate of the output is calculated as (x * sin + y * cos), again using the input coordinates x and y.\n\nIn summary, the `rotate` function takes a float angle as input and returns a new `Vector2f` object representing the rotated point based on the cosine and sine of the angle in radians.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(10, 20);\nfloat angle = 90;\nvector.rotate(angle);\n","description":""},"name":"rotate","code":"public Vector2f rotate(float angle) {\n\t\tdouble rad = Math.toRadians(angle);\n\t\tdouble cos = Math.cos(rad);\n\t\tdouble sin = Math.sin(rad);\n\n\t\treturn new Vector2f((float) (x * cos - y * sin), (float) (x * sin + y * cos));\n\t}","location":{"start":39,"insert":39,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"b8ce08fc-fff2-c2a3-2b4c-8385f9d1ea31","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a `Vector2f` argument `r` and returns a new `Vector2f` object representing the sum of the current object's components and the argument's components.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be added to the current vector.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new vector with the sum of the input vectors' x and y coordinates.\n\n* The returned object is a new instance of `Vector2f`, which represents a 2D vector with x and y components.\n* The x component of the returned vector is the sum of the x component of the input vector `r` and the x component of the current vector.\n* The y component of the returned vector is the sum of the y component of the input vector `r` and the y component of the current vector.","complex_type":true},"usage":{"language":"java","code":"//Example Input: x + r.getX() and y + r.getY()\nfloat x = 3f;\nfloat y = 4f;\nVector2f vector1 = new Vector2f(x,y);\n\n//Method to add a vector to another vector\nVector2f vector2 = new Vector2f(5f,6f);\nvector1.add(vector2); // Output: (8f, 10f)\n","description":""},"name":"add","code":"public Vector2f add(Vector2f r) {\n\t\treturn new Vector2f(x + r.getX(), y + r.getY());\n\t}","location":{"start":47,"insert":47,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f146e1d4-bef6-acaa-8344-d913439a51a7","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a single float argument `r` and returns a new `Vector2f` instance with the sum of the current vector's `x` and `y` components and the provided `r` value.","params":[{"name":"r","type_name":"float","description":"2D vector to add to the current vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with the sum of the original vector's coordinates and the given float value.\n\nThe returned Vector2f object represents a point in 2D space with x-coordinate equal to the original vector's x coordinate plus the input parameter r and y-coordinate equal to the original vector's y coordinate plus the input parameter r.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(3, 4);\nfloat r = 5;\nvector.add(r); // return a new Vector2f(8, 9)\nvector.setX(7).setY(8);\nvector.add(1);  //return a new Vector2f(8, 9)\n","description":""},"name":"add","code":"public Vector2f add(float r) {\n\t\treturn new Vector2f(x + r, y + r);\n\t}","location":{"start":51,"insert":51,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"91fbbf73-8727-278c-b549-022928e6d01d","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"adds two floating-point values to a `Vector2f` object, returning a new `Vector2f` instance with the sum of the original object's x and y components and the input x and y values.","params":[{"name":"x","type_name":"float","description":"2D coordinate to add to the current position of the vector.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the resulting vector.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the sum of the input `x` and `y` values.\n\nThe returned Vector2f object has an x-component that is equal to the sum of the x-component of this object and the argument x, and a y-component that is equal to the sum of the y-component of this object and the argument y.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(1, 0);\nfloat x = 3;\nfloat y = 4;\nVector2f sum = vector1.add(x, y);\nSystem.out.println(sum); // Outputs (4, 4)\n","description":""},"name":"add","code":"public Vector2f add(float x, float y) {\n        return new Vector2f(this.x + x, this.y + y);\n    }","location":{"start":55,"insert":55,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"41bf8d18-4f20-f8a4-c843-4d6c9546cebd","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a `Vector2f` argument `r` and returns a new `Vector2f` instance representing the difference between the current vector's components and those of the input vector.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be subtracted from the current vector, resulting in a new vector that represents the difference between the two vectors.\n\n* `x`: The real value of the first component of the input vector.\n* `y`: The real value of the second component of the input vector.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the difference between the input vector and the reference vector.\n\nThe returned Vector2f object has coordinates x and y that represent the difference between the original vector's coordinates and the given vector's coordinates.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(5, 6);\nv1.sub(r);\n// Output: (2, -2)\n","description":""},"name":"sub","code":"public Vector2f sub(Vector2f r) {\n\t\treturn new Vector2f(x - r.getX(), y - r.getY());\n\t}","location":{"start":59,"insert":59,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"bbc54651-23e1-e8a6-b645-6c369a9ee173","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a single floating-point value `r` and returns a new `Vector2f` object representing the difference between the current vector's coordinates and `r`.","params":[{"name":"r","type_name":"float","description":"2D point that the function subtracts from the current vector position to produce the new vector output.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object representing the difference between the original vector and the given value.\n\nThe `Vector2f` object returned by the function represents the difference between the original vector's components and the input parameter `r`. Specifically, the x-coordinate of the returned vector is equal to the original vector's x-coordinate minus the input `r`, while its y-coordinate is equal to the original vector's y-coordinate minus the input `r`.\n\nThe returned vector has the same components as the original vector, but with the values shifted by the amount of `r` provided as input. This function can be used to subtract a scalar value from a vector, effectively moving the vector in the opposite direction by that amount.","complex_type":true},"usage":{"language":"java","code":"Vector2f myVector = new Vector2f(3, 4);\nfloat x = 2;\nVector2f result = myVector.sub(x);\nSystem.out.println(result); // Output: (1, 2)\n","description":""},"name":"sub","code":"public Vector2f sub(float r) {\n\t\treturn new Vector2f(x - r, y - r);\n\t}","location":{"start":63,"insert":63,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"c4374447-cbae-ec87-304e-5a63b102f2af","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"multiplies the vector's x and y components by the corresponding components of another vector, returning a new vector with the result.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to be multiplied with the current vector, resulting in a new 2D vector with the product of the corresponding components.\n\n* `x`: The x-coordinate of `r`, which is a `float`.\n* `y`: The y-coordinate of `r`, which is also a `float`.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` instance with the product of the input vector's `x` and `y` components multiplied by the corresponding components of the given vector `r`.\n\nThe output is a new Vector2f object that represents the product of the input vectors.\n\nThe x-coordinate of the output is equal to the product of the x-coordinates of the input vectors.\n\nThe y-coordinate of the output is equal to the product of the y-coordinates of the input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(5, 3);\nVector2f vector2 = new Vector2f(2, 4);\nVector2f result = vector1.mul(vector2); // returns the dot product of vector1 and vector2\nSystem.out.println(result); // prints (10, 12)\n","description":""},"name":"mul","code":"public Vector2f mul(Vector2f r) {\n\t\treturn new Vector2f(x * r.getX(), y * r.getY());\n\t}","location":{"start":67,"insert":67,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"5991789e-30a2-73b4-3048-74e79b29d37a","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"multiplies the components of a `Vector2f` object by a given scalar value.","params":[{"name":"r","type_name":"float","description":"scalar value used to multiply the `x` and `y` components of the `Vector2f` instance.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a vector with x and y components scaled by the input value `r`.\n\nThe output is a `Vector2f` object that represents the product of the input `x` and `r`, and the input `y` and `r`. Therefore, the output has two components: `x * r` and `y * r`, which correspond to the x-component and y-component of the resulting vector, respectively.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(1, 2);\nVector2f result = v1.mul(2);\nSystem.out.println(result); // Output: (2 4)\n","description":""},"name":"mul","code":"public Vector2f mul(float r) {\n\t\treturn new Vector2f(x * r, y * r);\n\t}","location":{"start":71,"insert":71,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"37834ab6-7c71-8e8f-2742-92a55fc86d34","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a `Vector2f` argument `r` and returns a new `Vector2f` object with the components scaled by the reciprocals of the corresponding values in `r`.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to which the current vector is being divided.\n\n* The `x` property of `r` is used as the dividend in the calculation.\n* The `y` property of `r` is used as the divisor in the calculation.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a vector with the same x-coordinates as the original vector, scaled by the reciprocal of the input vector's x-coordinate.\n\n* The output is a new instance of the `Vector2f` class, which means it has two components (x and y) that represent the result of dividing the input vector's x and y components by the input r.getX() and r.getY(), respectively.\n* The output's x component represents the result of dividing the input vector's x component by the input r.getX(), which is a non-negative value representing the scaling factor applied to the x component of the output.\n* The output's y component represents the result of dividing the input vector's y component by the input r.getY(), which is also a non-negative value representing the scaling factor applied to the y component of the output.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector1 = new Vector2f(1, 2);\nVector2f vector2 = new Vector2f(3, 4);\nvector1.div(vector2);\nfloat x = vector1.getX(); // returns 0.33\nfloat y = vector1.getY(); // returns 0.5\n","description":""},"name":"div","code":"public Vector2f div(Vector2f r) {\n\t\treturn new Vector2f(x / r.getX(), y / r.getY());\n\t}","location":{"start":75,"insert":75,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"46528f6c-2e02-0498-694e-f81bc52844f6","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"takes a scalar parameter `r` and returns a new `Vector2f` instance with the x and y components scaled by the ratio of `r`.","params":[{"name":"r","type_name":"float","description":"factor by which the vector's components are divided.","complex_type":false}],"returns":{"type_name":"Vector2f","description":"a vector with x and y components scaled by the input parameter `r`.\n\nThe output is a `Vector2f` object representing a scaled version of the original vector.\nThe x and y components of the output are calculated by dividing the corresponding components of the original vector by the input parameter `r`.\nThe resulting vector has the same magnitude as the original vector, but its direction is scaled by a factor of `r`.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector1 = new Vector2f(5, 6);\n        float factor = 2;\n        Vector2f result = vector1.div(factor);\n        System.out.println(\"The x-component of the result is: \" + result.getX());\n        System.out.println(\"The y-component of the result is: \" + result.getY());\n    }\n}\n","description":"\nThis code creates a Vector2f object named vector1 and assigns it a value of (5,6). It then declares a float named factor and sets it equal to 2. The method div(factor) is then called on the vector1 object, which returns a new Vector2f object with x-component = 5/2 and y-component = 6/2. Finally, the result of this operation is printed in the console."},"name":"div","code":"public Vector2f div(float r) {\n\t\treturn new Vector2f(x / r, y / r);\n\t}","location":{"start":79,"insert":79,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"6b6376b4-64ae-9e9f-2c4e-44ba8bd6184f","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"computes and returns a new `Vector2f` instance with the absolute values of its `x` and `y` components.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object containing the absolute values of the original vector's `x` and `y` components.\n\n* The output is a new `Vector2f` object containing the absolute values of the input `x` and `y` coordinates.\n* The `x` and `y` components of the output are both non-negative integers, representing the absolute values of the original coordinates.\n* The output has the same dimension as the input, with the same type and scale.","complex_type":true},"usage":{"language":"java","code":"Vector2f v = new Vector2f(-1, -2);\nv.abs(); // returns a new vector with x=1 and y=2\n\nv = new Vector2f(3, 4);\nv.abs(); // returns a new vector with x=3 and y=4\n","description":"\nIn this example, we create two instances of the Vector2f class, one with negative coordinates (-1,-2) and another with positive coordinates (3,4). We then call the abs method on each instance to get the absolute value of each coordinate. The output is a new vector with the absolute values of x and y."},"name":"abs","code":"public Vector2f abs() {\n\t\treturn new Vector2f(Math.abs(x), Math.abs(y));\n\t}","location":{"start":83,"insert":83,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"9d765244-7e14-1b8a-074f-b9d734b8ebd8","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"returns a string representation of a point (x, y) by concatenating the values of x and y inside parentheses.","params":[],"returns":{"type_name":"integer","description":"a string representing the point (x, y) using parentheses and the values of x and y as separate components.\n\n* The parentheses `( )` are included as part of the output.\n* The variable `x` is included in the output followed by a space character `+`.\n* The variable `y` is also included in the output followed by another space character `+`.\n\nTherefore, the output returned by the `toString` function is simply a concatenation of the values of `x` and `y` separated by spaces.","complex_type":true},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(5, 10);\nSystem.out.println(vector);\n// Output: (5 10)\n","description":""},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \")\";\n\t}","location":{"start":87,"insert":87,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f5345a67-c988-cf94-c449-36317ba210a6","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"sets the `x` and `y` components of a `Vector2f` object to the input values, returning the modified object.","params":[{"name":"x","type_name":"float","description":"2D position of the `Vector2f` instance and assigns its value to the `x` field of the instance.","complex_type":false},{"name":"y","type_name":"float","description":"2nd component of the `Vector2f` object being modified, which is updated to match the provided value.","complex_type":false}],"returns":{"type_name":"instance","description":"a reference to the modified vector object.\n\n* This is a method that sets the x-coordinate and y-coordinate of the Vector2f instance.\n* The method returns a reference to the same Vector2f instance, indicating that the object itself is modified rather than creating a new version with the updated values.\n* The return type is `Vector2f`, indicating that the method returns an instance of the Vector2f class.","complex_type":true},"usage":{"language":"java","code":"Vector2f myVec = new Vector2f(1, 1);\nmyVec.set(-5, 2);\nSystem.out.println(\"x: \" + myVec.getX()); // prints -5.0\nSystem.out.println(\"y: \" + myVec.getY()); // prints 2.0","description":""},"name":"set","code":"public Vector2f set(float x, float y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}","location":{"start":91,"insert":91,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"fdfdd33c-3ad7-d5be-f847-33ba07c83291","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"sets the `x` and `y` components of the `Vector2f` object to the values passed as parameters.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector that contains the x and y coordinates to be set in the `set()` method of the `Vector2f` class.\n\n* `getX()` and `getY()`: These methods return the x-coordinate and y-coordinate values of the input vector, respectively.","complex_type":true}],"returns":{"type_name":"Vector2f","description":"a reference to the original vector with its components updated to match the input parameter values.\n\n* The output is a reference to the same instance of the `Vector2f` class as the input parameter. This means that any changes made to the input parameter within the function will affect the output as well.\n* The output contains the updated values of the `x` and `y` components of the vector, which are set to the corresponding values of the input parameter.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(3, 4);\nv1.set(new Vector2f(5, 6));\nSystem.out.println(v1); // Output: (5 6)\n","description":""},"name":"set","code":"public Vector2f set(Vector2f r) {\n\t\tset(r.getX(), r.getY());\n\t\treturn this;\n\t}","location":{"start":97,"insert":97,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"b37178fa-713c-8980-9f43-50b2d1ef6461","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"converts a `Vector2f` instance into an equivalent `Vector3f` instance by adding a third component representing the z-coordinate of the vector, which is set to zero by default.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the values `x`, `y`, and `0` for the x, y, and z components, respectively.\n\n* The `Vector3f` object represents a 3D vector with three components: `x`, `y`, and `z`.\n* The `x`, `y`, and `z` components represent the coordinates of the 3D vector.\n* The vector is returned as an instance of the `Vector3f` class, which provides methods for calculating the dot product, magnitude, and other operations on 3D vectors.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector = new Vector2f(1, 1);\n        Vector3f threeDVector = vector.as3DVector();\n        System.out.println(\"The x component of the 3D vector is \" + threeDVector.getX());\n        System.out.println(\"The y component of the 3D vector is \" + threeDVector.getY());\n        System.out.println(\"The z component of the 3D vector is \" + threeDVector.getZ());\n    }\n}\n","description":""},"name":"as3DVector","code":"public Vector3f as3DVector() {\n        return new Vector3f(x, y, 0);\n    }","location":{"start":102,"insert":102,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"9ee2a069-6610-efba-bb43-6775e2ac3779","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"retrieves the value of a variable `x`.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the variable `x`.","complex_type":false},"usage":{"language":"java","code":"Vector2f vector = new Vector2f(5, 7);\nSystem.out.println(vector.getX()); //Outputs 5\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":106,"insert":106,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"3c8e7b62-4c2f-4eb5-554a-d61f3c7d9ce6","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"sets the value of the `x` field of the object to which it belongs.","params":[{"name":"x","type_name":"float","description":"float value that is assigned to the `x` field of the class instance being modified by the `setX()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector2f vector = new Vector2f(1, 2);\nvector.setX(3);\nSystem.out.println(\"x: \" + vector.getX() + \", y: \" + vector.getY());\n// Output: x: 3, y: 2\n","description":""},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"264b35ef-4953-4aa8-8b41-1a6e6681622f","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"returns the value of the `y` field.","params":[],"returns":{"type_name":"float","description":"the value of the `y` field, which is a `float` variable.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector2f vector = new Vector2f(10, 5);\n        System.out.println(\"The y value of the Vector2f is \" + vector.getY()); // The output will be 5\n    }\n}\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":114,"insert":114,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"bd32af5c-5664-fabf-d64a-452c54397918","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"sets the value of the instance field `y`.","params":[{"name":"y","type_name":"float","description":"new value of the instance variable `y` that is being assigned to through the function call.","complex_type":false}],"usage":{"language":"java","code":"Vector2f vector2f = new Vector2f(5, 7);\nvector2f.setY(10);\nSystem.out.println(vector2f); // Output: (5, 10)\n","description":"\nIn this example, the method setY is used to set the y-coordinate of a Vector2f object. The parameter 'y' is passed as an argument, which will be assigned to the y-coordinate of the Vector2f object. After executing the method, the output of the System.out.println() statement shows that the y-coordinate has been successfully changed from 7 to 10."},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":118,"insert":118,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"9a10e9b2-f3d5-f6a9-2248-1f4c6d4b5608","ancestors":["05d7276b-64a8-5ca1-bc49-157d54347051"],"type":"function","description":"compares a `Vector2f` instance `r` to the current instance, returning `true` if both instances have the same `x` and `y` coordinates.","params":[{"name":"r","type_name":"Vector2f","description":"2D vector to which the current vector is being compared for equality.\n\n* `x`: The first component of the vector represents the x-coordinates of the two vectors being compared.\n* `y`: The second component of the vector represents the y-coordinates of the two vectors being compared.\n\nBy comparing the values of these components, the function determines if the two vectors are equal.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the vector's coordinates are equal to those of the provided vector.\n\n* The `x` and `y` fields of the returning object reference are compared with their corresponding counterparts in the argument vector using the `==` operator.\n* If these fields match, the function returns `true`.\n* Otherwise, it returns `false`.","complex_type":true},"usage":{"language":"java","code":"Vector2f v1 = new Vector2f(5, 6); // create a vector at (5, 6)\nVector2f v2 = new Vector2f(7, 8); // create another vector at (7, 8)\nSystem.out.println(v1.equals(v2)); // Output: false since the vectors are not identical\n","description":"\nThe equals method would return `false` because the two vectors have different values for their x and y components."},"name":"equals","code":"public boolean equals(Vector2f r) {\n\t\treturn x == r.getX() && y == r.getY();\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}