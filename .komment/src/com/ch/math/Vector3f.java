{"name":"Vector3f.java","path":"src/com/ch/math/Vector3f.java","content":{"structured":{"description":"A class `Vector3f` that represents 3D vectors in mathematical space. The class has various methods and fields for manipulating and working with these vectors, including methods for calculating vector operations such as length, dot product, cross product, rotation, lerp, addition, subtraction, multiplication, division, absolute value, and toString conversion. Additionally, the class provides getters and setters for accessing and setting the individual components of the vector.","items":[{"id":"626b0915-a39e-6c89-074a-57ac8df8fddc","ancestors":[],"type":"function","description":"in Java is a mathematical representation of a three-dimensional vector with x, y, and z components. It provides various methods for manipulating the vector, such as addition, subtraction, multiplication, and division, as well as methods for calculating the magnitude and direction of the vector. The class also offers methods for rotating the vector around an axis and lerping between two vectors. Additionally, it has getters and setters for each component of the vector.","name":"Vector3f","code":"public class Vector3f {\n\n\tprivate float x;\n\tprivate float y;\n\tprivate float z;\n\n\tpublic Vector3f() {\n\t\tthis(0, 0, 0);\n\t}\n\t\n\tpublic Vector3f(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}\n\t\n\tpublic float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}\n\n\tpublic float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}\n\n\tpublic Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}\n\n\tpublic Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}\n\n\tpublic Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}\n\n\tpublic Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}\n\n\tpublic Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}\n\t\n\tpublic void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}\n\n\tpublic Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}\n\t\n\tpublic Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}\n\t\n\tpublic void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}\n\n\tpublic Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}\n\n\tpublic Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}\n\n\tpublic Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}\n\n\tpublic Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}\n\n\tpublic Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}\n\n\tpublic Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}\n\n\tpublic Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}\n\n\tpublic Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}\n\n\tpublic Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}\n\n\tpublic Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}\n\n\tpublic Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}\n\n\tpublic Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}\n\n\tpublic Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}\n\n\tpublic Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\tpublic Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic float getZ() {\n\t\treturn z;\n\t}\n\n\tpublic void setZ(float z) {\n\t\tthis.z = z;\n\t}\n\n\tpublic boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}\n\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":184},{"id":"fb0cacd5-8da3-3cb0-f84c-c0cec57d48e2","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"calculates the Euclidean distance of a 3D point from origin, based on the coordinates' square magnitudes and square root operation.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the coordinates of a 3D point.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1.0, 2.0, 3.0);\nfloat distance = vector.length();\n// prints 3.741657386773941\nSystem.out.println(distance);\n","description":"\nThe method length would return the distance or length of a three-dimensional vector."},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}","location":{"start":19,"insert":19,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"bd04aac4-0c54-a5a2-774f-1b343bedc56e","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"calculates the length of a 3D point by squaring its coordinates and summing them.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the length of the square of the given coordinates.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n   public static void main(String[] args) {\n       Vector3f vec = new Vector3f(5, 2, -1);\n       float sqrLen = vec.squareLength();\n       System.out.println(\"The square length of the vector is: \" + sqrLen);\n   }\n}\n","description":""},"name":"squareLength","code":"public float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}","location":{"start":23,"insert":23,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"49c55017-8afe-8db7-074e-df1d15137d0f","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes three floating-point arguments `x`, `y`, and `z` and returns the largest of them using the `Math.max()` method.","params":[],"returns":{"type_name":"float","description":"the maximum value of `x`, `y`, and `z`.","complex_type":false},"usage":{"language":"java","code":"Vector3f v = new Vector3f(10, 20, 30);\nfloat maximumValue = v.max();\n// maximumValue will be 30\n","description":""},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}","location":{"start":27,"insert":27,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4a310c9d-4776-30a1-8143-5d01aa4fc80a","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"computes the dot product of a `Vector3f` object and another vector, returning the result as a floating-point value.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that the function will dot product with the `x`, `y`, and `z` components of the function's output.\n\n* `x`, `y`, and `z` represent the components of the input vector `r`.\n* `getX()`, `getY()`, and `getZ()` are methods that return the individual component values of the input vector.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and the component vectors.","complex_type":false},"usage":{"language":"java","code":"Vector3f vec1 = new Vector3f(2, 4, 6); // create vector (2, 4, 6)\nVector3f vec2 = new Vector3f(1, 3, 5); // create vector (1, 3, 5)\nfloat dotProduct = vec1.dot(vec2);   // calculate the dot product of vec1 and vec2\nSystem.out.println(\"The dot product is: \" + dotProduct);    // print out the value of dotProduct\n","description":"\nIn this example, we create two Vector3f instances, vec1 and vec2. We then use the dot method to compute the dot product between these two vectors. Finally, we print out the value of the dot product using System.out.println.\n\nNote that when calling the method, we pass in the vector arguments as separate parameters. For example, when calculating the dot product between vec1 and vec2, we call the dot method like this: `float dotProduct = vec1.dot(vec2)`."},"name":"dot","code":"public float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"e936ca31-d91a-f19d-9143-3ce499347f1b","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a vector `r` as input and returns a new vector `v` that is perpendicular to both `r` and the original vector `u`.","params":[{"name":"r","type_name":"Vector3f","description":"2D vector that the `cross()` method will produce when multiplied by it, resulting in a 3D vector.\n\n`r`: A `Vector3f` object with attributes `x`, `y`, and `z`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector with the cross product of the input vectors.\n\nThe output is a new `Vector3f` instance with the values x_, y_, and z_.\nThe values of x_, y_, and z_ are determined by multiplying the corresponding components of the input vectors r and the current vector by the appropriate scalars.\nThe resulting values are then stored in the components of the output vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(2, 2, 2);\nVector3f v2 = new Vector3f(5, 6, 7);\nv1.cross(v2); // returns a new Vector3f (2*7 - 2*6, 2*6 - 2*5, 2*5 - 2*7)\n","description":""},"name":"cross","code":"public Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"fd0d21ed-420b-0386-7448-4c989e39d1b5","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"normalizes a 3D vector by dividing its components by the vector's length, returning a new vector with the same direction but scaled to have a length of 1.","params":[],"returns":{"type_name":"Vector3f","description":"a normalized vector in the format `(x / length, y / length, z / length)`.\n\n* The output is a `Vector3f` object representing the normalized version of the original vector.\n* The values of the output are in the range [0, 1], indicating that the vector has been scaled to have a length of 1.\n* The output's x, y, and z components represent the normalized values of the original vector's corresponding components.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nSystem.out.println(vector.normalized()); // Outputs (0.26726, 0.53452, 0.8018)\n","description":""},"name":"normalized","code":"public Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}","location":{"start":43,"insert":43,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"4ebacebf-6598-a1a5-b34e-edbbca33d9c8","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a rotation axis and angle as input and returns a new vector that has been rotated by the given angle around the specified axis.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotational axis around which the object will be rotated.\n\n* `axis`: A 3D vector representing the axis of rotation. It has three components - `x`, `y`, and `z`.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle of the vector, which is used to calculate the resulting rotated vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a rotated vector representing the result of applying a rotation transformation to the original vector.\n\nThe output is a Vector3f object that represents the rotated version of the original vector.\n\nThe vector's x, y, and z components have been transformed by applying the rotation axis and angle.\n\nThe axis parameter represents the direction of rotation, and the angle parameter represents the angle of rotation in radians.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(1, 2, 3);\nVector3f axis = new Vector3f(1, 0, 0);\nfloat angle = (float) Math.PI;\nv1.rotate(axis, angle);\n","description":"\nIn this example, a vector v1 is rotated by an angle of PI (pi) around the X-axis. The method rotate takes in two arguments: 'axis' and 'angle'. The method then returns a new vector that represents the result of the rotation."},"name":"rotate","code":"public Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}","location":{"start":49,"insert":49,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"12963c1e-e9c0-d28e-d445-0b4937d4e9c6","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"rotates a `Vector3f` object by the angle represented by a given `Quaternion` rotation, resulting in a new `Vector3f` object containing the rotated coordinates.","params":[{"name":"rotation","type_name":"Quaternion","description":"3D rotation transformation to be applied to the existing vector values.\n\n1. Quaternion rotation multiplication: The function first multiplies the input `rotation` with itself and then with its conjugate (`conjugate`). This is done to generate a new quaternion that represents the rotated position of the vector.\n2. Mul operation: The function performs a mul (multiplication) operation between the deserialized input `rotation` and a newly created quaternion `w`. This quaternion represents the resultant rotation of the input vector.\n3. Output: The final output of the function is a new vector instance, which contains the rotated position of the original input vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector representing the rotated position of the object after applying the given rotation quaternion.\n\n* The output is a new instance of the `Vector3f` class, containing the result of multiplying the rotation matrix by the original vector.\n* The resulting vector has the same x, y, and z components as the input vector, but they have been transformed by the rotation matrix.\n* The magnitude (length) of the output vector is unaffected by the rotation, as the multiplication is done component-wise.","complex_type":true},"usage":{"language":"java","code":"import com.ch.math.*;\n\n//...\nQuaternion q = new Quaternion(1, 2, 3, 4);\nVector3f v = new Vector3f(5, 6, 7);\n\nv.rotate(q);\n\n//...\n","description":""},"name":"rotate","code":"public Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}","location":{"start":56,"insert":56,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"63332105-0810-daaf-8549-bd74255d6a40","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"calculates a linear interpolation between two vectors, `dest` and `this`, based on the provided `lerpFactor`. The resulting vector is the weighted sum of the original vectors.","params":[{"name":"dest","type_name":"Vector3f","description":"3D destination vector that the current vector will be interpolated towards.\n\n`dest`: The destination vector to which the interpolation will be applied. It has three components: x, y, and z, representing the position in 3D space.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"0-1 factor for interpolating between the current position of the vector and the destination position.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector that interpolates between the input `dest` and the current position of the object.\n\nThe `Vector3f` object returned by the function is a blend of the input parameters, where the parameter `dest` represents the destination vector and `lerpFactor` represents the interpolation factor. The function first calculates the difference between the current vector and the destination vector (`this.sub(dest)`), then multiplies the result by the interpolation factor (`lerpFactor`), and finally adds the original vector to the resulting vector (`add(this)`).\n\nThe resulting vector represents a smooth transition between the initial and final vectors, allowing for a continuous variation of the vector's components. The `lerp` function is commonly used in computer graphics and game development to perform interpolation or extrapolation of vector values.","complex_type":true},"usage":{"language":"java","code":"Vector3f origin = new Vector3f(0, 0, 0);\nVector3f dest = new Vector3f(10, 0, 0);\nfloat lerpFactor = 0.5;\n\n// This code will create a Vector3f that is halfway between the origin and the destination Vector3f, in both X and Z axes.\nVector3f result = origin.lerp(dest, lerpFactor);\n","description":""},"name":"lerp","code":"public Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":64,"insert":64,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"affcf9bd-e331-7b9d-ae45-458182e4b8d1","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a `Vector3f` argument `r` and returns a new `Vector3f` object with the sum of its own `x`, `y`, and `z` components and those of `r`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current vector.\n\n* `x`: An integer representing the x-coordinate value of the input vector.\n* `y`: An integer representing the y-coordinate value of the input vector.\n* `z`: An integer representing the z-coordinate value of the input vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the sum of the input vectors' x, y, and z components.\n\n* The returned object is a `Vector3f` instance representing the sum of the input arguments.\n* The `x`, `y`, and `z` components of the returned vector are calculated by adding the corresponding components of the input arguments.\n* The returned vector maintains the same orientation as the input vectors, i.e., it has the same direction and magnitude.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(0, 0, 0);\nVector3f v2 = new Vector3f(10, 10, 10);\n\nv1.add(r); // returns a Vector3f object with the coordinates (10, 10, 10)\n","description":""},"name":"add","code":"public Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","location":{"start":68,"insert":68,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"491e1a83-544e-70b3-384f-feaf1932fccc","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"adds the vector values of a reference `r` to the corresponding components of the current object, resulting in an updated position.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that adds to the component values of the `Vector3f` instance, resulting in an updated position for the object.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.\n* `z`: The z-coordinate of the input vector.","complex_type":true}],"usage":{"language":"java","code":"Vector3f r = new Vector3f(1, 2, 3);\nVector3f v = new Vector3f(0, 0, 0);\nv.addSelf(r);\nSystem.out.println(v); // Outputs (1, 2, 3)\n","description":""},"name":"addSelf","code":"public void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}","location":{"start":72,"insert":72,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"4a7d3cb6-4fb7-a19f-a848-4ace73d5ee63","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a float argument `r` and returns a new `Vector3f` instance with the sum of the existing vector components and the provided value added to it.","params":[{"name":"r","type_name":"float","description":"3D position to add to the current vector position.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the sum of the input `r` added to the corresponding components of the original vector.\n\nThe `Vector3f` object returned by the function represents a new vector that is the sum of the original vector and the input float value. The x, y, and z components of the new vector are calculated as the sum of the corresponding components of the original vector and the input value.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(0, 0, 0); // Vector3f object\nfloat r = 1; // float value to add\nv.add(r); // Adds r to the x, y and z components of the vector\n","description":"\nThis method returns a new Vector3f object that is created by adding the input float value (r) to each component (x, y, and z) of the original vector v. This code creates a new Vector3f object with an x-component equal to 1 + 0, a y-component equal to 1 + 0, and a z-component equal to 1 + 0."},"name":"add","code":"public Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}","location":{"start":78,"insert":78,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ec013c35-5bae-4c90-a246-02bf402cb032","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"adds a vector to the current vector by scaling it with a given factor, returning the resulting vector.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled and added to the current vector.\n\n* `v` is a `Vector3f` object representing a 3D vector.\n* It has three attributes: `x`, `y`, and `z`, which represent the component values of the vector in the corresponding dimensions.","complex_type":true},{"name":"scale","type_name":"float","description":"scalar value by which the input `Vector3f` is multiplied before being added to the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that is the result of adding the provided vector scaled by the given factor to the current vector.\n\nThe returned value is a new Vector3f object that represents the sum of this vector and the scaled version of the input vector.\nThe scaling factor applied to the input vector is represented by the `scale` parameter passed to the function.\nThe resulting vector has the same properties as the original vector, including its position, orientation, and magnitude.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3); // Initialize a vector with x=1, y=2 and z=3\nfloat scale = 0.5; // Initialize the scale to half (0.5)\nVector3f result = new Vector3f().addScaledVector(v, scale);\n// The result of this operation is (1.5, 3, 4.5).","description":""},"name":"addScaledVector","code":"public Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}","location":{"start":82,"insert":82,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0c6490fd-de44-a8a5-6943-8eb3cfd1eb97","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"multiplies a `Vector3f` object by a given scalar value and adds it to the current instance of the class.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled, and it is multiplied by the specified `scale` value before being added to the internal state of the `Vector3f` object.\n\n* `v`: A `Vector3f` object representing a 3D vector with three components - x, y, and z.\n* `scale`: A float value representing the scalar value to be multiplied with the vector's components.","complex_type":true},{"name":"scale","type_name":"float","description":"3D vector multiplication factor applied to the input `Vector3f` value before adding it to the current object's state.","complex_type":false}],"usage":{"language":"java","code":"Vector3f myVec = new Vector3f(1, 2, 3);\nVector3f otherVec = new Vector3f(4, 5, 6);\nfloat scale = 0.5f;\nmyVec.addSelfScaledVector(otherVec, scale);\n","description":""},"name":"addSelfScaledVector","code":"public void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"eaee1911-c903-0ea7-c343-f255e77a2964","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"subtracts the vector `r` from the input vector, returning a new vector with the resultant coordinates.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that the function will subtract from the original vector.\n\nThe input `r` is a `Vector3f` object with three components - `x`, `y`, and `z`. These components represent the coordinates of a 3D point in the function.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector representing the difference between the original vector and the given reference vector.\n\n* The `x`, `y`, and `z` components of the returned vector represent the difference between the input vector `r` and the current vector instance.\n* The resulting vector has the same dimensions as the input vector, with each component representing a different dimension of the original vector.\n* The returned vector is a new object that is created from the differences of the input vectors, and it does not affect the original vectors in any way.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector3f other = new Vector3f(4, 5, 6);\nVector3f difference = vector.sub(other);\nSystem.out.println(\"The difference between \" + vector + \" and \" + other + \" is: \" + difference);\n","description":""},"name":"sub","code":"public Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","location":{"start":90,"insert":90,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ffe626a3-e917-6ebc-dc46-a86a2c04204a","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a single floating-point value `r` as input and returns a new `Vector3f` object representing the difference between the original vector and the provided value.","params":[{"name":"r","type_name":"float","description":"3D vector to subtract from the original vector's components, resulting in a new vector with the difference between the two vectors.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector representing the difference between the original vector and a given value.\n\nThe Vector3f object represents a 3D vector with x, y, and z components. When called with a float argument `r`, the function returns a new Vector3f instance where each component is equal to the corresponding component of the original vector minus the input `r`. Therefore, the output represents the difference vector between the original vector and the reference point represented by `r`.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f vector1 = new Vector3f(); // Initialized to (0, 0, 0)\n    Vector3f vector2 = new Vector3f(1, 2, 3);\n    float result = vector1.sub(5).length(); // Returns 4 (the distance between (0, 0, 0) and (5, 5, 5))\n}\n","description":""},"name":"sub","code":"public Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}","location":{"start":94,"insert":94,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4c121c9b-f0a2-38ac-4e47-ec799305dec3","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a `Vector3f` argument `r` and multiplies its components by the corresponding components of the calling object, returning a new `Vector3f` instance with the resulting values.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that multiplies with the current vector, resulting in the new vector output.\n\n* `x`, `y`, and `z` are the component values of `r`.\n* `getX()`, `getY()`, and `getZ()` are methods that return the component values of `r` respectively.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the product of the input vectors' components.\n\n* The output is a new `Vector3f` instance, which represents the product of the input vectors `x`, `y`, and `z`.\n* The `x`, `y`, and `z` components of the output are calculated by multiplying the corresponding components of the input vectors `r` by the factor `x`, `y`, and `z`, respectively.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(2, 4, 6);\nVector3f v2 = new Vector3f(5, 8, 9);\n\nVector3f result = v1.mul(v2);\n\n// result will be (10, 32, 54)\n","description":""},"name":"mul","code":"public Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}","location":{"start":98,"insert":98,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"2e1b9e43-9207-8c90-494b-3f81de82083d","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"multiplies a vector by a scalar value, returning a new vector with the product.","params":[{"name":"r","type_name":"float","description":"scalar value that is multiplied with the vector components of the `Vector3f` object.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the product of the component values and the input parameter `r`.\n\nThe `Vector3f` object returned by the function has three components, x, y, and z, each representing the multiplication of the corresponding variable in the input parameters with a scalar value r. The resultant vector's components have the same magnitude as the input parameters but have their directions multiplied by the scalar value.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat r = 4;\nVector3f product = vector.mul(r);\nSystem.out.println(\"Product: \" + product);\n","description":""},"name":"mul","code":"public Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}","location":{"start":102,"insert":102,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0bf8d7da-8ccc-3686-c040-8b09925bf23f","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a `Vector3f` argument `r` and returns a new `Vector3f` object with the components scaled by the reciprocal of `r`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to divide by, and its value is used to compute the output vector's components.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.\n* `z`: The z-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with scaled components based on the divisor `r`.\n\nThe returned output is a new Vector3f instance with the values of x, y, and z scaled by the corresponding values of the input parameter r.\n\nThe scale factor for each component is obtained by dividing the value of that component in the current vector by the corresponding value in the input parameter r.\n\nThe output vector has the same direction as the original vector, but its magnitude is reduced by the factor specified by the scale factor.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(5, 10, 20);\nVector3f v2 = new Vector3f(2, 4, 6);\nv.div(v2); // Outputs (2.5, 2.5, 3.5)\n","description":""},"name":"div","code":"public Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}","location":{"start":106,"insert":106,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"40ca56c7-0ace-70a5-1e40-cc654a501881","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"takes a scalar parameter `r` and returns a new `Vector3f` instance with each component divided by the input value.","params":[{"name":"r","type_name":"float","description":"scalar value used to divide the vector's components by.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the same x, y, and z components divided by the input parameter `r`.\n\nThe `Vector3f` object returned has a magnitude (or length) that is equal to the divisor `r`.\n\nIts direction is unchanged, as it is simply scaled down by the divisor.\n\nIt maintains its original orientation in 3D space.","complex_type":true},"usage":{"language":"java","code":"// Create a vector3f object\nVector3f vector = new Vector3f(5, 10, 20);\n\n// Divide the vector by a float value (in this case 2) and store the result in another variable.\nfloat result = vector.div(2);\n","description":""},"name":"div","code":"public Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"516751c9-aa34-788a-f14d-0032bfcbbcfc","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"computes the absolute value of a `Vector3f` object, returning a new vector with the absolute values of its components.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` object containing the absolute values of the input vector's components.\n\nThe returned object is a Vector3f with magnitude equal to the absolute value of the original vector's components.\nThe vector's x, y, and z components are unchanged.\nThe returned vector has the same orientation as the original vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector3f = new Vector3f(1, -2, 3);\nVector3f result = vector3f.abs();\nSystem.out.println(result); // (1, 2, 3)\n","description":""},"name":"abs","code":"public Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}","location":{"start":114,"insert":114,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"04fdeb76-abb2-4db8-8942-bc7bd54dd496","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a string representation of an object by concatenating three values: `x`, `y`, and `z`.","params":[],"returns":{"type_name":"String","description":"a string representation of a point in space, consisting of three coordinates separated by spaces.","complex_type":false},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f();\nmyVector.set(1, 2, 3);\nSystem.out.println(myVector);\n","description":"\nThe result of this code would be \"(1.0, 2.0, 3.0)\"."},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}","location":{"start":118,"insert":118,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"7c70005a-29eb-4488-1f46-80de17093d76","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a `Vector2f` instance containing the x and y coordinates of the object it is called on.","params":[],"returns":{"type_name":"Vector2f","description":"a vector representation of two floating-point values, `x` and `y`, which are the coordinates of a point in 2D space.\n\n* `x`: The first component of the `Vector2f` object represents the x-coordinate of the point. It has a value of `x`.\n* `y`: The second component of the `Vector2f` object represents the y-coordinate of the point. It has a value of `y`.","complex_type":true},"usage":{"language":"java","code":"// declaring and initializing a Vector3f object \nVector3f myVector = new Vector3f(5.0f, 3.0f, 1.0f);\n\n// retrieving the x-y components of the vector\nVector2f xyComponents = myVector.getXY();\n","description":""},"name":"getXY","code":"public Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"43cd645a-eea9-9492-af47-e0787f6f93e9","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a `Vector2f` object representing the y and z components of a specified point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `y` and `z` coordinates.\n\n* The `Vector2f` object represents a two-dimensional point in homogeneous coordinates, with the `x` component representing the x-coordinate and the `y` component representing the y-coordinate.\n* The `y` and `z` components of the vector represent the y-coordinates and z-coordinates of the point, respectively.\n* The `Vector2f` class is immutable, which means that once an instance is created, its properties cannot be modified.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f yz = vector.getYZ();\nSystem.out.println(\"y component of the vector is \" + yz.x + \", z component of the vector is \" + yz.y); // output: y component of the vector is 2, z component of the vector is 3\n","description":""},"name":"getYZ","code":"public Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}","location":{"start":126,"insert":126,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"651c94fd-c0ed-7faf-8342-6eabc1815264","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a new `Vector2f` object representing the z-value and x-coordinate of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the point (x, z).\n\n* The output is of type `Vector2f`, which represents a 2D point in homogeneous coordinates.\n* The components of the vector represent the x-coordinate (x) and the z-coordinate (z) of the point, respectively.\n* The vector is returned as a new instance of `Vector2f`, allowing for efficient use and manipulation of the point's properties.","complex_type":true},"usage":{"language":"java","code":"Vector2f vec = new Vector3f(1, 2, 3).getZX(); // vec now contains the Vector2f (3, 1)\n","description":""},"name":"getZX","code":"public Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}","location":{"start":130,"insert":130,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4fa3e215-db88-3688-a44d-67aa771a4b4c","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a `Vector2f` object representing the coordinate (x, y) of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the values of `y` and `x`.\n\nThe return value is a `Vector2f` object containing the x-coordinate (x) and y-coordinate (y) of the point in question. Both coordinates are floating-point numbers represented as a pair of values with two components each. The order of the coordinates in the vector is (x, y).","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector3f vector = new Vector3f();\n\tvector.set(10, 20, 30);\n\tSystem.out.println(vector.getYX()); // prints (20, 10)\n}\n","description":""},"name":"getYX","code":"public Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"6b98dab2-2c80-fe8c-d34b-b19ff9cbfc78","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a `Vector2f` object representing the position (x, y) of an entity.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the point (z, y) in homogeneous coordinates.\n\n* The `Vector2f` object represents a 2D point in homogeneous coordinates, with the x-coordinate represented by `z` and y-coordinate represented by `y`.\n* The `Vector2f` class is part of the Java Math library and provides mathematical operations on 2D points.\n* The returned object is created as a new instance of the `Vector2f` class, with the `z` and `y` coordinates set to the values passed in the function.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f zy = vector.getZY();\n","description":""},"name":"getZY","code":"public Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}","location":{"start":138,"insert":138,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b8dc7ce0-58f3-be91-574b-a3a579019a9a","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns a `Vector2f` object representing the X and Z coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `x` and `z` coordinates of the point.\n\n* The output is a `Vector2f` object, representing a 2D point in the x-z plane.\n* The `x` and `z` components of the vector represent the coordinates of the point in the x-z plane.\n* The vector is newly created each time the function is called, so it does not retain any previous values.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f xz = vector.getXZ();\nSystem.out.println(\"x: \" + xz.x + \", z: \" + xz.y); // prints \"x: 1, z: 3\"\n","description":""},"name":"getXZ","code":"public Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}","location":{"start":142,"insert":142,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"15a573dc-9644-8aa2-ad4d-1fd9cfc3e01c","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"modifies the component values of the `Vector3f` object, returning a reference to the same object for chaining methods.","params":[{"name":"x","type_name":"float","description":"3D vector's x-coordinate that is being set to the provided value.","complex_type":false},{"name":"y","type_name":"float","description":"2D coordinate of the vector in the Y direction, which is updated to match the value provided by the user.","complex_type":false},{"name":"z","type_name":"float","description":"3rd component of the `Vector3f` object, which is updated to match the value passed as an argument.","complex_type":false}],"returns":{"type_name":"instance","description":"a reference to the modified `Vector3f` instance.\n\nThe `Vector3f` object is updated with the new values of `x`, `y`, and `z`.\n\nThe returned value is the same `Vector3f` object that was passed as an argument to the function.","complex_type":true},"usage":{"language":"java","code":"// Create a new Vector3f object\nVector3f myVector = new Vector3f();\n\n// Set its components to 1, 2, and 3 respectively\nmyVector.set(1, 2, 3);\n\n// Print out the values of x, y, and z\nSystem.out.println(\"x: \" + myVector.getX()); // Outputs 1\nSystem.out.println(\"y: \" + myVector.getY()); // Outputs 2\nSystem.out.println(\"z: \" + myVector.getZ()); // Outputs 3\n","description":""},"name":"set","code":"public Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}","location":{"start":146,"insert":146,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"5b2e33d2-2acb-a08c-b347-c5c293e25ed8","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"sets the components of the object to the corresponding values of a provided `Vector3f` argument.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that sets the corresponding components of the `Vector3f` object.\n\n* `getX()`, `getY()`, and `getZ()`: These methods return the individual components of the `Vector3f` object, which can be used to set the corresponding components of this `Vector3f` object.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a reference to the original `Vector3f` object, which has its components set to the input values.\n\nThe `Vector3f` class is mutated when the set method is applied to it.\n\nThe `x`, `y`, and `z` components of this object are replaced with the values provided in the r argument.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nVector3f r = new Vector3f(1, 2, 3);\nvector.set(r);\nSystem.out.println(vector); // Output (1.0 2.0 3.0)\n","description":""},"name":"set","code":"public Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}","location":{"start":153,"insert":153,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"bc0ef6fc-a5ec-44aa-d140-e56d30c93f7a","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"returns the value of the `x` field.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the variable `x`.","complex_type":false},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nfloat x = v.getX();\nSystem.out.println(\"x value is \" + x);\n// output should be \"x value is 1\"\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":158,"insert":158,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"8882faa6-6cb3-0e99-8442-e6f5b077a879","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"sets the value of the `x` field of the class it belongs to, by assigning the input `float` parameter to the field.","params":[{"name":"x","type_name":"float","description":"float value that sets the `x` field of the class instance, which is then reflected in the state of the object.","complex_type":false}],"usage":{"language":"java","code":"Vector3f myVector = new Vector3f();\nmyVector.setX(5);\n","description":"\nThe above code creates a vector with all coordinates initialized to zero, and then sets the x-coordinate to 5."},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":162,"insert":162,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"068f51a8-e7c4-c5b5-7841-5e0366a1ce74","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"retrieves the value of the `y` field, which is a `float` variable.","params":[],"returns":{"type_name":"float","description":"the value of the `y` field.","complex_type":false},"usage":{"language":"java","code":"float y = new Vector3f(1, 2, 3).getY();\n// y is now equal to 2\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":166,"insert":166,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"524ae0eb-955b-a89f-d648-cceca7fa7e39","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"sets the value of the `y` field of the object to which it belongs.","params":[{"name":"y","type_name":"float","description":"value of the object's `y` field, which is being assigned to the object's `y` field.","complex_type":false}],"usage":{"language":"java","code":"Vector3f v = new Vector3f(0, 0, 0);\nv.setY(10); // v now has coordinates (0, 10, 0)\n","description":""},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":170,"insert":170,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"9303eff0-a6ec-5798-8a46-42785f4b5f42","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"retrieves the value of the `z` field.","params":[],"returns":{"type_name":"float","description":"the value of the `z` field.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    Vector3f myVector = new Vector3f(1, 2, 3);\n    float zValue = myVector.getZ();\n    System.out.println(\"The value of z is: \" + zValue); // The value of z is: 3\n  }\n}\n","description":""},"name":"getZ","code":"public float getZ() {\n\t\treturn z;\n\t}","location":{"start":174,"insert":174,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"52751eef-73b2-4b86-cb4c-4e9159c22d99","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"sets the value of the member field `z` of its object reference to the provided float argument.","params":[{"name":"z","type_name":"float","description":"3D position of an object in the function `setZ()`.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(0, 0, 0);\nvector.setZ(-10);\n","description":""},"name":"setZ","code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","location":{"start":178,"insert":178,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"8fbd5a75-5a01-3aa2-c34a-b89e2c5022c9","ancestors":["626b0915-a39e-6c89-074a-57ac8df8fddc"],"type":"function","description":"compares two `Vector3f` objects based on their `x`, `y`, and `z` components, returning `true` if they are equal and `false` otherwise.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be compared with the current vector.\n\n* `x`: The first component of the vector, which is equal to the `getX()` method of `r`.\n* `y`: The second component of the vector, which is equal to the `getY()` method of `r`.\n* `z`: The third component of the vector, which is equal to the `getZ()` method of `r`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the vector's x, y, and z components are equal to those of the provided vector.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector3f1 = new Vector3f(1, 2, 3);\nVector3f vector3f2 = new Vector3f(1, 2, 3);\nboolean result = vector3f1.equals(vector3f2);\nif (result) {\n    System.out.println(\"Equal\");\n} else {\n    System.out.println(\"Not equal\");\n}\n","description":""},"name":"equals","code":"public boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}","location":{"start":182,"insert":182,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}