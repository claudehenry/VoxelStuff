{"name":"Vector3f.java","path":"src/com/ch/math/Vector3f.java","content":{"structured":{"description":"A class `Vector3f` that represents 3D vectors in mathematical space. The class has various methods for manipulating and querying the vector's components, such as `length()`, `squareLength()`, `dot()`, `cross()`, `normalized()`, `rotate()`, `lerp()`, `add()`, `sub()`, `mul()`, and `div()`. It also provides several high-level operations like `abs()`, `toString()`, and `getXY()`, `getYZ()`, `getZX()`, etc. for working with the vector.","items":[{"id":"89d114cc-4725-17a7-a046-0dab5c474462","ancestors":[],"type":"function","description":"represents a 3D vector in homogeneous coordinates and provides various methods for manipulating and querying its components. It includes methods such as addition, subtraction, multiplication, division, cross product, normalization, rotation, and more. Additionally, it provides getters and setters for each component of the vector.","name":"Vector3f","code":"public class Vector3f {\n\n\tprivate float x;\n\tprivate float y;\n\tprivate float z;\n\n\tpublic Vector3f() {\n\t\tthis(0, 0, 0);\n\t}\n\t\n\tpublic Vector3f(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}\n\t\n\tpublic float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}\n\n\tpublic float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}\n\n\tpublic Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}\n\n\tpublic Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}\n\n\tpublic Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}\n\n\tpublic Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}\n\n\tpublic Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}\n\t\n\tpublic void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}\n\n\tpublic Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}\n\t\n\tpublic Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}\n\t\n\tpublic void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}\n\n\tpublic Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}\n\n\tpublic Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}\n\n\tpublic Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}\n\n\tpublic Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}\n\n\tpublic Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}\n\n\tpublic Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}\n\n\tpublic Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}\n\n\tpublic Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}\n\n\tpublic Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}\n\n\tpublic Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}\n\n\tpublic Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}\n\n\tpublic Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}\n\n\tpublic Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}\n\n\tpublic Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\tpublic Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic float getZ() {\n\t\treturn z;\n\t}\n\n\tpublic void setZ(float z) {\n\t\tthis.z = z;\n\t}\n\n\tpublic boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}\n\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":184},{"id":"fe58a83d-7937-75ae-9b42-b566dc5e1700","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"calculates the Euclidean distance of a 3D point from origin, using the Pythagorean theorem to calculate the square root of the sum of the squared x, y, and z coordinates.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of the function's input variables.","complex_type":false},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nfloat len = v.length(); // len will be equal to 3.0\n","description":""},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}","location":{"start":19,"insert":19,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"08abf577-e43a-3fb4-c445-988b0a50457f","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"calculates the length of a point in 3D space by squaring its coordinates and summing them.","params":[],"returns":{"type_name":"float","description":"a floating-point number representing the square of the length of the 3D vector.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(2.5, 4.3, 6.7);\nfloat squaredLength = vector1.squareLength();\nSystem.out.println(\"The squared length of the vector is: \" + squaredLength);\n","description":""},"name":"squareLength","code":"public float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}","location":{"start":23,"insert":23,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"c51c5753-0bcd-3282-4a4b-ee965d7247f3","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"computes the maximum value from three input values `x`, `y`, and `z`, using the `Math.max()` method.","params":[],"returns":{"type_name":"float","description":"the maximum value of `x`, `y`, and `z`.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vector = new Vector3f(10, 20, 30);\n        System.out.println(vector.max()); // prints \"30\"\n    }\n}\n","description":""},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}","location":{"start":27,"insert":27,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"1dd495fb-45b0-3da7-8040-51b9cea7e9c8","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"computes the dot product of a `Vector3f` instance `r` and the component values of the function's parameter `x`, `y`, and `z`.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that the dot product is to be calculated with.\n\n* `x`, `y`, and `z` are variables that represent the coordinates of the vector.\n* `getX()`, `getY()`, and `getZ()` are methods that retrieve the values of these coordinates from the `r` object.","complex_type":true}],"returns":{"type_name":"float","description":"a float value representing the dot product of the input vector and the current vector.","complex_type":false},"usage":{"language":"java","code":"//example 1:\npublic static void main(String[] args) {\n\tVector3f vector = new Vector3f(0, 2, -4);\n\tVector3f otherVector = new Vector3f(8, -7, 5);\n\tfloat dotProduct = vector.dot(otherVector);\n\tSystem.out.println(\"The dot product of \" + vector + \" and \" + otherVector + \" is: \" + dotProduct);\n}\n","description":""},"name":"dot","code":"public float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"d4f41be9-a985-08a9-7440-3cad99f9bc70","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"computes the cross product of two vectors in 3D space, returning a new vector with magnitudes and directions determined by the dot product of the input vectors.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to cross with the current vector.\n\n* `getZ()` and `getY()` return the z- and y-coordinates of the input vector, respectively.\n* `getX()` returns the x-coordinate of the input vector.\n\nThe function then computes the cross product between the input vector and another unspecified vector, resulting in a new vector with coordinates `x`, `y`, and `z`. The returned vector is a new object of type `Vector3f`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector that represents the cross product of the input vectors.\n\n* The output is a new Vector3f object that represents the cross product of the input vectors.\n* The x, y, and z components of the output represent the projections of the input vectors onto the corresponding axes.\n* The order of the input vectors does not affect the result of the cross product operation.\n* The cross product is commutative, meaning that the order of the input vectors does not change the result.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(1, 2, 3);\nVector3f v2 = new Vector3f(4, 5, 6);\nVector3f result = v1.cross(v2);\nSystem.out.println(result);\n","description":""},"name":"cross","code":"public Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"8f226575-6651-a5b0-db44-ba4f771889ff","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"normalizes a vector by dividing its components by the vector's length, returning a new vector with the same direction but scaled to have a length of 1.","params":[],"returns":{"type_name":"Vector3f","description":"a normalized version of the input vector.\n\nThe output is a `Vector3f` object that represents the normalized version of the original vector.\n\nThe elements of the output vector are scaled by dividing them by the magnitude of the original vector, which is calculated using the `length()` method.\n\nThe resulting vector has the same direction as the original vector, but its magnitude is reduced to 1.0.\n\nThe output vector is a new object that is independent of the original vector and can be used for further calculations or operations.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nSystem.out.println(myVector.normalized()); // prints (0.26726124191242438, 0.53452248382484876, 0.80178372573727313)\n","description":""},"name":"normalized","code":"public Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}","location":{"start":43,"insert":43,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"8bb35be7-a048-d882-ca4e-dbfa264cc275","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"rotates a `Vector3f` object by an angle around a specified axis, returning the rotated vector.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotation axis around which the object is rotated.\n\n* `axis`: A `Vector3f` object representing the axis of rotation. It has three components: `x`, `y`, and `z`.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle of the vector in radians, which is used to calculate the rotation matrix for the vector's cross product and addition with other vectors.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that represents the rotated version of the original vector.\n\n* The output is a vector with three components, representing the new position of the original vector after rotation.\n* The first component represents the new x-position, the second component represents the new y-position, and the third component represents the new z-position.\n* The magnitude of the output vector remains unchanged, as the rotation is performed around a fixed axis.\n* The direction of the output vector is rotated relative to the original vector, based on the angle of rotation and the axis of rotation.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector3f vector = new Vector3f();\n\tQuaternion rotation = new Quaternion();\n\n\tvector.rotate(rotation, 90); // rotates the vector by 90 degrees around an arbitrary axis represented by quaternion\n}\n","description":"\nThis example shows how to rotate a `Vector3f` by a certain angle using the `rotate()` method of the `Vector3f` class, passing in a `Quaternion` object as the first argument and a floating-point number representing the rotation angle as the second argument. The `Quaternion` object is used to represent the axis of rotation around which the vector should be rotated. The resulting rotated vector is then returned by the method.\n\nIt's worth noting that this method uses a variant of the Rodrigues formula, which is a way to compute the rotation matrix from an axis and angle representation of a rotation. This method can be used to perform more complex rotations than those possible with a simple Euler angle representation, but it may require a bit more care in terms of choosing the right axis for the rotation."},"name":"rotate","code":"public Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}","location":{"start":49,"insert":49,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"40591eb3-63e8-fe89-f94f-127d3ec5c667","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a quaternion as input and rotates the vector by applying a series of multiplication operations on it, resulting in a new vector with the same x, y, and z components as the original vector but with a different orientation in 3D space.","params":[{"name":"rotation","type_name":"Quaternion","description":"4D rotation matrix that is applied to the current vector, resulting in a new vector output.\n\n* The `Quaternion` class is utilized to model a 3D rotation transformation.\n* The `conjugate()` method returns a conjugated quaternion that cancels out the original rotation when multiplied.\n* The multiplication of `rotation` with itself followed by multiplication with the conjugate (`w`) generates the final rotated vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector representing the rotated position of the original vector.\n\nThe output is a `Vector3f` object containing the rotated coordinates of the original vector.\nThe x-coordinate represents the new x-coordinate of the rotated vector.\nThe y-coordinate represents the new y-coordinate of the rotated vector.\nThe z-coordinate represents the new z-coordinate of the rotated vector.","complex_type":true},"usage":{"language":"java","code":"Quaternion rotation = new Quaternion(1, 2, 3, 4);\nVector3f vector = new Vector3f(1, 2, 3);\n\nvector.rotate(rotation); // returns a rotated Vector3f\n","description":"\nThe example shows how to create a Quaternion object and a Vector3f object, then uses the rotate method on the Vector3f object with the Quaternion object as an argument. The resulting rotated vector is returned from the rotate method."},"name":"rotate","code":"public Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}","location":{"start":56,"insert":56,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"8f3f90c9-e94c-d285-fd48-4dd92490cadc","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"calculates a smooth transition between two vectors, `dest` and `this`, based on the given `lerpFactor`. It returns the resulting vector by adding the product of the difference between `dest` and `this` scaled by `lerpFactor` to `this`.","params":[{"name":"dest","type_name":"Vector3f","description":"3D vector to which the current vector will be interpolated or mixed with the given `lerpFactor`.\n\n* `dest` is a `Vector3f` object that represents the destination point in 3D space.\n* `lerpFactor` is a floating-point value representing the interpolation factor between the current position and the destination point.\n\nThe function then returns a new `Vector3f` object that represents the interpolated position between the current position and the destination point, calculated by subtracting the current position from the destination point, multiplying the result by the interpolation factor, and adding the current position back to the resulting vector.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"0 to 1 value that determines how much the current vector should be linearly interpolated towards the destination vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector that interpolates between the input `dest` and the current position of the object.\n\nThe returned Vector3f object represents the interpolated value between the input `dest` and the current state of the entity.\nThe `mul` method is applied to the difference between the current state and `dest`, scaling the result by the provided `lerpFactor`.\nThe resulting vector is then added to the current state, resulting in the final interpolated value.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f vector1 = new Vector3f();\n    Vector3f vector2 = new Vector3f();\n    vector1.setX(5);\n    vector1.setY(6);\n    vector1.setZ(7);\n    vector2.setX(8);\n    vector2.setY(9);\n    vector2.setZ(10);\n    \n    // Outputs: (3 4 5)\n    System.out.println(\"Lerping vector1 to vector2 with a lerp factor of 0.5 yields \" + vector1.lerp(vector2, 0.5));\n}\n","description":""},"name":"lerp","code":"public Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":64,"insert":64,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b40bd56a-b3ff-1aaa-1343-39231e98c56a","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"adds two `Vector3f` objects together, returning a new `Vector3f` object with the sum of their components.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current vector.\n\n* `x`: The x-coordinate of `r`.\n* `y`: The y-coordinate of `r`.\n* `z`: The z-coordinate of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the sum of the input vectors' components.\n\n* The output is a new `Vector3f` instance, which represents the sum of the input vectors `x`, `y`, and `z`.\n* The `x`, `y`, and `z` components of the output are calculated by adding the corresponding components of the input vectors.\n* The output has the same type and dimension as the input vectors, which is a 3D vector in this case.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(2, 3, 4);\nVector3f v2 = new Vector3f(-5, -3, 0);\nv1.add(r);\n","description":""},"name":"add","code":"public Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","location":{"start":68,"insert":68,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"744cf3b9-70ed-4dba-8c42-5a63a71fbe33","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"adds the component-wise sum of the input vector to the current position of the object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to add to the object's position, and its x, y, and z components are added to the object's corresponding components, respectively.\n\n* `x`, `y`, and `z` represent the x, y, and z components of the vector, respectively.","complex_type":true}],"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(5, 6, 7);\nVector3f vector2 = new Vector3f(3, 4, 5);\nvector1.addSelf(vector2) // (x + 3, y + 4, z + 5)\n","description":""},"name":"addSelf","code":"public void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}","location":{"start":72,"insert":72,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"ba81d094-561e-2ab7-2d4c-7bd911246c74","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a single float argument `r` and returns a new `Vector3f` object with the sum of the current vector's components and the `r` value added to each component.","params":[{"name":"r","type_name":"float","description":"3D offset to add to the vector's components.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector instance with the sum of the original vector's components and the input parameter `r`.\n\n* The output is a new `Vector3f` object that represents the sum of the original vector and the input float value.\n* The x, y, and z components of the output are calculated by adding the corresponding components of the original vector and the input float value.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(); //create a new vector\nfloat r = 0; //input for the value to be added to all axis\nv.add(r); //adds 'r' to all axis of v\n","description":""},"name":"add","code":"public Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}","location":{"start":78,"insert":78,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"2be0b819-0a05-e188-814f-de0185550811","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"adds a vector to this object by scaling it with a given factor and then adding it to the current position.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled and added to the current vector.\n\n* `v` is an instance of `Vector3f`, representing a 3D vector in homogeneous coordinates.\n* The `scale` parameter represents a scalar value that multiplies the components of `v`.","complex_type":true},{"name":"scale","type_name":"float","description":"scalar value by which the given `Vector3f` is multiplied before being added to the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that is the sum of the original vector and the scaled version of the original vector.\n\nThe output is a new Vector3f object that represents the sum of the original vector `this` and the scaled version of the input vector `v`. The scaling factor is multiplied to the elements of the input vector before adding it to the original vector.\n\nThe resulting vector has the same dimensions as the original vector, with each element representing the sum of its corresponding elements in the original vector and the scaled input vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(2, 2, 2);\nVector3f vector2 = new Vector3f(4, 4, 4);\nfloat scale = 2.0;\nvector1.addScaledVector(vector2, scale);\n","description":"\nThis code will output a vector of (6, 6, 6)."},"name":"addScaledVector","code":"public Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}","location":{"start":82,"insert":82,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ff446146-6f63-eca4-634b-4797edeac844","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"multiplies a vector by a scalar value and adds it to the current vector, scaling the original vector.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled.\n\n* `v` is a `Vector3f` object representing a 3D vector with three components (x, y, and z).\n* The `mul()` method is used to multiply the vector by a scalar value `scale`, which is passed as an argument to the function. This operation scales the vector's components by the specified factor.","complex_type":true},{"name":"scale","type_name":"float","description":"3D vector that multiplies the input `Vector3f` object, resulting in the updated object being added to the calling scope.","complex_type":false}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(2, 4, 6);\n    v1.addSelfScaledVector(v1, 0.5f);\n    System.out.println(\"Adding a scaled vector to itself: \" + v1);\n}\n","description":"\nExplanation:\nThis example illustrates how addSelfScaledVector method is used to multiply the supplied Vector3f object (v1) by a specified floating-point value (0.5f) and then add this result to the original vector v1. This method updates the Vector3f object (v1) by mutating its internal state."},"name":"addSelfScaledVector","code":"public void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"2521b5db-ddc1-d5ba-e647-c7d654472211","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a `Vector3f` argument `r` and returns a new `Vector3f` object representing the difference between the original vector and the given vector.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be subtracted from the current vector.\n\nThe input `r` is a `Vector3f`, which represents a 3D vector in a homogeneous coordinate space. It has three components: `x`, `y`, and `z`, each representing the component of the vector in the corresponding dimension.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance representing the difference between the input vector and the given reference vector.\n\nThe `Vector3f` object `r` is subtracted from the original input vector, resulting in a new vector with the same components but with the values of the input vector shifted by the corresponding amount.\n\nThe return type of the function is a `Vector3f` object, indicating that it returns an object of this class with its properties representing the magnitude and direction of a 3D vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(2.0, 4.0, 5.0);\nVector3f v2 = new Vector3f(3.0, 6.0, 7.0);\nVector3f result = v1.sub(v2);\nSystem.out.println(\"The difference between \" + v1 + \" and \" + v2 + \" is: \" + result);\n","description":"\nOutput: The difference between (2.0, 4.0, 5.0) and (3.0, 6.0, 7.0) is: (−1.0, −2.0, −2.0)."},"name":"sub","code":"public Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","location":{"start":90,"insert":90,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0a72632a-ec3c-f5a8-1a47-a550259bb876","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a single floating-point argument `r` and returns a new `Vector3f` object representing the difference between the original vector and the provided value.","params":[{"name":"r","type_name":"float","description":"3D position from which the vector is subtrahed.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance representing the difference between the original vector and a given value.\n\n* The returned vector has its x-component set to the difference between the input `r` and the current `x` component of the original vector.\n* Similarly, the y-component is set to the difference between the input `r` and the current `y` component of the original vector.\n* Finally, the z-component is set to the difference between the input `r` and the current `z` component of the original vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nfloat r = 1;\nVector3f result = v.sub(r);\nSystem.out.println(\"Subtracting a scalar: \" + result); // prints \"(0, 1, 2)\"\n","description":""},"name":"sub","code":"public Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}","location":{"start":94,"insert":94,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"8afd82be-6d9b-e19b-b241-1cef88ae83b3","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"multiplies two vector objects and returns a new vector object with the product of the x, y, and z components of each vector.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to multiply with the current vector, resulting in a new 3D vector.\n\n* `x`, `y`, and `z` represent the component values of the `Vector3f` class.\n* `getX()`, `getY()`, and `getZ()` return the individual component values of the `r` object.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the product of the input vectors' components.\n\nThe `Vector3f` object created by the function has the same x, y, and z components as the product of the input vectors `x`, `y`, and `z`. In other words, the output vector is a scaled version of the input vectors. The scaling factor is equal to the product of the input vectors' corresponding components.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(2, 4, 6);\nVector3f vector2 = new Vector3f(7, 8, 9);\nvector1.mul(vector2); // returns a new vector with the values (14, 32, 54)\n","description":""},"name":"mul","code":"public Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}","location":{"start":98,"insert":98,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f732533c-19c8-0daa-8b45-2505412818d5","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"multiplies the components of a `Vector3f` object by a scalar value, returning a new `Vector3f` object with the modified components.","params":[{"name":"r","type_name":"float","description":"scalar value used to multiply each component of the `Vector3f` object.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the product of the component values and the input scalar `r`.\n\n* The output is of type `Vector3f`, which represents a 3D vector in homogeneous coordinates.\n* The value of each component (x, y, and z) of the output is equal to the corresponding component of the input multiplied by the scalar value `r`.\n* The output has the same origin as the input, meaning that the origin of the input is also the origin of the output.","complex_type":true},"usage":{"language":"java","code":"public class Test {\n    public static void main(String[] args) {\n        Vector3f vector1 = new Vector3f(1, 2, 3);\n        Vector3f result;\n        result = vector1.mul(2);\n        System.out.println(\"result: \" + result);\n    }\n}\n","description":"\nThe output should be (2,4,6)."},"name":"mul","code":"public Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}","location":{"start":102,"insert":102,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0d3689c9-e91e-f98c-b949-11b3e62e907c","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a reference to another vector and returns a new vector with the component values divided by the corresponding values of the reference vector.","params":[{"name":"r","type_name":"Vector3f","description":"vector to be divided by the return value of the function.\n\n* `x`: The x-coordinate of the input vector.\n* `y`: The y-coordinate of the input vector.\n* `z`: The z-coordinate of the input vector.\n\nThe function then returns a new `Vector3f` object with the result of dividing each component of the input vector by the corresponding component of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the same components as the input vector, scaled by the ratio of the input vector's magnitude to the magnitude of the reference vector.\n\nThe output is a new `Vector3f` object that represents the result of dividing the input vector by the specified reference vector.\n\nThe output has the same x, y, and z components as the input vector, but with the values scaled by the reciprocal of the corresponding component of the reference vector.\n\nThe resulting vector has the same orientation and magnitude as the input vector, but with the values normalized to represent a fractional quantity.","complex_type":true},"usage":{"language":"java","code":"// Assuming r is a Vector3f with non-zero values for all three components\nVector3f result = myVector3f.div(r);\n","description":""},"name":"div","code":"public Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}","location":{"start":106,"insert":106,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"3122c7d1-a160-5fa4-7e44-f55f12dc3fe9","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"takes a scalar value `r` and returns a new `Vector3f` instance with its components scaled by the reciprocal of `r`.","params":[{"name":"r","type_name":"float","description":"scalar value used to divide each component of the `Vector3f` instance being divided.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the same x, y, and z components scaled by the input value `r`.\n\nThe `Vector3f` object returned by the function has its x, y, and z components scaled by the input parameter `r`.\n\nThe resulting vector has a magnitude that is inversely proportional to the value of `r`.\n\nThe direction of the vector remains unchanged.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nfloat scalar = 2;\nVector3f dividedVector = myVector.div(scalar);\nSystem.out.println(\"Divided vector is \" + dividedVector);\n","description":""},"name":"div","code":"public Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"3d76592c-1bdd-b2a6-f54c-41d356625609","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"calculates and returns a new `Vector3f` object representing the absolute value of the input vector's components.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance containing the absolute values of the input vector's components.\n\n* The output is a new instance of the `Vector3f` class, indicating that it is an independent entity with its own set of properties and attributes.\n* The `x`, `y`, and `z` components of the output are the absolute values of the corresponding components of the input vector.\n* The output has the same dimension as the input vector, meaning it preserves the original shape and structure of the input.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, -2, 3);\nv.abs(); // returns the vector (1, 2, 3)\n","description":""},"name":"abs","code":"public Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}","location":{"start":114,"insert":114,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"33d22b1f-678c-579c-2844-772e8a888341","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"generates a string representation of a given object by concatenating its properties (x, y, and z) inside parentheses.","params":[],"returns":{"type_name":"String","description":"a string representation of the object's state, consisting of three values: `x`, `y`, and `z`.","complex_type":false},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(5, 10, 20); //create a vector\nSystem.out.println(vec.toString());    //prints (5, 10, 20)\n","description":""},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}","location":{"start":118,"insert":118,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"05e2445e-bac1-8b8d-dd44-f7a7c6580aa8","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object containing the x and y coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the x and y coordinates of the point.\n\n* `x`: The first component of the Vector2f represents the x-coordinate of the point. It has a value of `x` in this case.\n* `y`: The second component of the Vector2f represents the y-coordinate of the point. It has a value of `y` in this case.\n\nThe returned Vector2f object contains the coordinates of the point in a structured form, making it easy to use and manipulate in various contexts.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f xy = vector.getXY();\n// Returns a Vector2f object with the coordinates (1, 2)\n","description":"\nThis code creates a new Vector2f object using the getXY() method from the Vector3f class, and assigns it to the variable xy. The returned object has the first two components of the original vector's coordinates, and the third component is discarded."},"name":"getXY","code":"public Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4e802780-9c2c-2daf-334f-b3db8506621e","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object representing the Y and Z coordinates of an entity.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the Y and Z coordinates of a point.\n\nThe returned object is of type `Vector2f`, which represents a 2D point in homogeneous coordinates. The `y` and `z` fields of the object contain the x-coordinates and z-coordinates of the point, respectively.","complex_type":true},"usage":{"language":"java","code":"Vector2f yz = new Vector3f(1, 2, 3).getYZ();\nSystem.out.println(yz); // (2, 3)\n","description":""},"name":"getYZ","code":"public Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}","location":{"start":126,"insert":126,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"15268f8f-3513-30a9-6d45-4dfc383c7829","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object representing the component values of z and x.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object containing the `z` and `x` components.\n\n* The output is a `Vector2f` object, which represents a 2D point with two components: `z` and `x`.\n* The `z` component represents the z-coordinate of the point, which ranges from -1 to 1.\n* The `x` component represents the x-coordinate of the point, which ranges from -1 to 1.\n\nOverall, the `getZX` function returns a `Vector2f` object that contains the coordinates of a 2D point in a compact and efficient format.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nVector2f zx = v.getZX(); // creates a new Vector2f object with values (3, 1)\n","description":""},"name":"getZX","code":"public Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}","location":{"start":130,"insert":130,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"7201fa1e-d91e-78ae-3f4d-9c44f92d108a","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object representing the coordinates (x, y) of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object containing the `y` and `x` coordinates of the original vector.\n\n* `y`: The y-coordinate of the point, which is a floating-point number representing the distance from the origin along the y-axis.\n* `x`: The x-coordinate of the point, which is also a floating-point number representing the distance from the origin along the x-axis.\n\nOverall, the `getYX` function returns a `Vector2f` object that represents a point in 2D space with both coordinates specified.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(1, 2, 3);\nVector2f result = vector1.getYX();\nSystem.out.println(\"YX result: \" + result);\n// Output: YX result (2 1)\n","description":""},"name":"getYX","code":"public Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"56f39317-227f-0f91-e54e-66dc7484a03d","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object representing the position (x, y) of an entity in a 2D space.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the point (z, y) in the Cartesian coordinate system.\n\n* The output is a `Vector2f` object representing a 2D point with two components - `z` and `y`.\n* The values of `z` and `y` are assigned to the corresponding components of the vector.\n* The resulting vector represents the location in 3D space, with the `z` component indicating distance from the origin along the z-axis, and the `y` component indicating distance from the origin along the y-axis.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tVector3f a = new Vector3f(1, 2, 3);\n\tVector2f zy = a.getZY(); // zy = (3, 2)\n}\n","description":""},"name":"getZY","code":"public Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}","location":{"start":138,"insert":138,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"c45e413f-ebf0-eaba-cc42-85efc4fe9a1c","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns a `Vector2f` object containing the `x` and `z` coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a new `Vector2f` object containing the `x` and `z` components of the original vector.\n\n* The output is of type `Vector2f`, which represents a 2D vector in homogeneous coordinates.\n* The `x` and `z` components of the vector represent the x-coordinates and z-coordinates of the point in 3D space, respectively.\n* The vector is returned as a new instance of the `Vector2f` class, which allows for efficient manipulation and processing of the vector's properties.","complex_type":true},"usage":{"language":"java","code":"Vector3f test = new Vector3f(5, 2, 7);\nSystem.out.println(\"test: \" + test);\n\nVector2f xz = test.getXZ();\nSystem.out.println(\"xz: \" + xz);\n","description":"\nThis code would produce the following output:\n"},"name":"getXZ","code":"public Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}","location":{"start":142,"insert":142,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"713f660b-000b-13a1-a146-13c6a53079d6","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"sets the values of the `x`, `y`, and `z` fields of a `Vector3f` object to the input parameters.","params":[{"name":"x","type_name":"float","description":"3D position of the vector along the x-axis.","complex_type":false},{"name":"y","type_name":"float","description":"2D component of the vector, and by setting it to a new value, the vector's 2D component is updated.","complex_type":false},{"name":"z","type_name":"float","description":"3D position of the vector along the z-axis, which is updated by assigning the value to the `z` field of the `Vector3f` object.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a reference to the same `Vector3f` object, allowing chaining of method calls.\n\n* This function modifies the instance variables `x`, `y`, and `z` of the `Vector3f` object and returns the modified object itself.\n* The returned object will have its instance variables set to the input values `x`, `y`, and `z`.\n* The `set` function is a method that belongs to the `Vector3f` class and can be used to modify the properties of an existing `Vector3f` object.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector3 = new Vector3f();\nvector3.set(1, 2, 3);\n","description":""},"name":"set","code":"public Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}","location":{"start":146,"insert":146,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"6689741f-0512-5b91-6343-0fcee416e837","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"sets the values of the `Vector3f` object to those of the provided `r` object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that contains the new values for the object's position, and it is used to update the object's position by setting the `x`, `y`, and `z` components of the object to the corresponding values in the `r` vector.\n\n* `getX()`: The x-coordinate of the vector.\n* `getY()`: The y-coordinate of the vector.\n* `getZ()`: The z-coordinate of the vector.","complex_type":true}],"returns":{"type_name":"instance","description":"a reference to the original `Vector3f` object, unchanged.\n\nThe function sets the values of the Vector3f object to those of the provided reference.\nIt returns a reference to the same Vector3f object that was passed in as an argument, indicating that the method modified the original object and returned a reference to it.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(0, 0, 0);\nVector3f vector2 = new Vector3f(5, 6, 7);\nvector1.set(vector2);\nSystem.out.println(vector1.toString()); // Output: (5, 6, 7)\n","description":"\nIn this example, the set method takes in a vector object as input and copies its values into itself. The output of the toString() method on the modified vector is then printed to the console, resulting in the output \"(5, 6, 7)\"."},"name":"set","code":"public Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}","location":{"start":153,"insert":153,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"1af4b96b-5e8d-f0a4-6249-aa78dbaf5d5d","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns the value of the `x` field.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the variable `x`.","complex_type":false},"usage":{"language":"java","code":"// Create a vector3f object\nVector3f myVector = new Vector3f(1, 2, 3);\n\n// Access the x-coordinate of the vector\nfloat x = myVector.getX(); // This will return the value 1.0\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":158,"insert":158,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"88a2fec6-ed74-75a7-4945-a6db56072de9","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"sets the value of the field `x` to the argument passed as a float, assigning it to the field directly.","params":[{"name":"x","type_name":"float","description":"float value that will be assigned to the `x` field of the object upon calling the `setX()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nvector.setX(2);\n// vector now has x value of 2\n","description":"\nThe method setX takes a float and assigns it to the variable x. This means that if you were to create an instance of the Vector3f class, you could change its x value by using this method."},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":162,"insert":162,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"79d3de6f-bf11-2da8-264b-1277229dba5e","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"returns the value of the `y` field.","params":[],"returns":{"type_name":"float","description":"the value of the `y` field.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        Vector3f v = new Vector3f();\n        System.out.println(v.getY());  // Outputs: 0\n        v.setY(1);\n        System.out.println(v.getY());  // Outputs: 1\n    }\n}\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":166,"insert":166,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"24ff2264-5f4a-9685-3846-fc3faf128478","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"sets the value of a class instance field 'y' to the argument passed as a float parameter.","params":[{"name":"y","type_name":"float","description":"new value of the object's `y` field, which is being assigned to by the function call.","complex_type":false}],"usage":{"language":"java","code":"Vector3f v = new Vector3f();\nv.setY(10); // Sets the y-coordinate to 10.\n","description":""},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":170,"insert":170,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"401d1771-8a69-6e95-964d-74626f417f81","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"retrieves the value of the `z` field, which represents an object's height or depth in a 3D space.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the z component of an object's position.","complex_type":false},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nfloat zValue = v.getZ();\n","description":""},"name":"getZ","code":"public float getZ() {\n\t\treturn z;\n\t}","location":{"start":174,"insert":174,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"ba38b892-c6d2-3687-2342-ef227c4b834b","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"sets the value of a class instance field `z`.","params":[{"name":"z","type_name":"float","description":"3D coordinate of the object being manipulated, which is assigned to the `z` field of the function's caller.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nvector.setZ(5);\nSystem.out.println(vector.getZ()); // This will print \"5\"\n","description":""},"name":"setZ","code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","location":{"start":178,"insert":178,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b7db8ac4-befa-bdbb-bd4a-8d78ebfd1014","ancestors":["89d114cc-4725-17a7-a046-0dab5c474462"],"type":"function","description":"compares the `Vector3f` object `r` to the current instance, returning `true` if all component values are equal.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be compared with the current vector, and is used to determine equality between the two vectors.\n\n* `x`: The `x` property of `r` represents the x-coordinate of the vector.\n* `y`: The `y` property of `r` represents the y-coordinate of the vector.\n* `z`: The `z` property of `r` represents the z-coordinate of the vector.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the vector's components are equal to those of the provided vector.","complex_type":false},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(0, 0, 0);\nVector3f v2 = new Vector3f(0, 0, 0);\nif (v1.equals(v2)) {\n    System.out.println(\"The vectors are equal\");\n} else {\n    System.out.println(\"The vectors are not equal\");\n}\n","description":"\nIn this example, the method equals is used to compare two Vector3f objects v1 and v2. Since they have the same coordinates (0, 0, 0), the if statement evaluates to true and prints out \"The vectors are equal\"."},"name":"equals","code":"public boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}","location":{"start":182,"insert":182,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}