{"name":"Vector3f.java","path":"src/com/ch/math/Vector3f.java","content":{"structured":{"description":"A `Vector3f` class with various methods for manipulating 3D vectors. These include initializing and copying vectors, normalizing and rotating them, and performing basic arithmetic operations on them. The code also includes several utility methods for working with these vectors, such as calculating their length, square length, maximum value, dot product, cross product, and lerp (linear interpolation) between two vectors.","items":[{"id":"f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f","ancestors":[],"type":"function","description":"TODO","name":"Vector3f","code":"public class Vector3f {\n\n\tprivate float x;\n\tprivate float y;\n\tprivate float z;\n\n\tpublic Vector3f() {\n\t\tthis(0, 0, 0);\n\t}\n\t\n\tpublic Vector3f(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tpublic float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}\n\t\n\tpublic float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}\n\n\tpublic float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}\n\n\tpublic float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}\n\n\tpublic Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}\n\n\tpublic Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}\n\n\tpublic Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}\n\n\tpublic Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}\n\n\tpublic Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}\n\n\tpublic Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}\n\t\n\tpublic void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}\n\n\tpublic Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}\n\t\n\tpublic Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}\n\t\n\tpublic void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}\n\n\tpublic Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}\n\n\tpublic Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}\n\n\tpublic Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}\n\n\tpublic Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}\n\n\tpublic Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}\n\n\tpublic Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}\n\n\tpublic Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}\n\n\tpublic String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}\n\n\tpublic Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}\n\n\tpublic Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}\n\n\tpublic Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}\n\n\tpublic Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}\n\n\tpublic Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}\n\n\tpublic Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}\n\n\tpublic Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}\n\n\tpublic Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}\n\n\tpublic float getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(float x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic float getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(float y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic float getZ() {\n\t\treturn z;\n\t}\n\n\tpublic void setZ(float z) {\n\t\tthis.z = z;\n\t}\n\n\tpublic boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}\n\n}","location":{"start":3,"insert":3,"offset":" ","indent":0},"item_type":"class","length":184},{"id":"bd19c3f9-070d-2ba0-2549-4d433de97ddd","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"calculates the magnitude of a vector using the Pythagorean theorem, with inputs for `x`, `y`, and `z`.","params":[],"returns":{"type_name":"float","description":"the square root of the sum of the squares of its input arguments.","complex_type":false},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat len = vector.length();\nSystem.out.println(\"Length of vector: \" + len);\n","description":""},"name":"length","code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z);\n\t}","location":{"start":19,"insert":19,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"52d0cd4b-5668-7898-eb4c-485186812817","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"calculates the length of a point in 3D space by squaring its coordinates and summing them.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the square of the length of the geometric object.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tVector3f vector = new Vector3f(2, 3, 4);\n\t\tSystem.out.println(vector.squareLength()); // Outputs 29 (x^2 + y^2 + z^2)\n\t}\n}\n","description":""},"name":"squareLength","code":"public float squareLength() {\n\t\treturn (float) x*x + y*y + z*z;\n\t}","location":{"start":23,"insert":23,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"ad29f3e1-c8ab-f895-384c-ea9c8712ad5b","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns the maximum value of three arguments: `x`, `y`, and `z`. It applies the `Math.max` method to each argument, then returns the maximum value.","params":[],"returns":{"type_name":"float","description":"the maximum of three values: `x`, `y`, and `z`.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    Vector3f vector = new Vector3f(1, 2, 3);\n    System.out.println(vector.max()); //prints 3\n}\n","description":"\nThis code creates a new instance of a Vector3f and then calls the max method to get the maximum value in that array. It then prints out the result."},"name":"max","code":"public float max() {\n\t\treturn Math.max(x, Math.max(y, z));\n\t}","location":{"start":27,"insert":27,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"5555a88f-e759-18bb-224a-8a4cbb1ee087","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"computes the dot product of a `Vector3f` object and another vector, returning the result as a floating-point value.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to which the current vector is being dot-producted, and its value is used to compute the dot product of the two vectors.\n\n* `x`, `y`, and `z` are the components of `r`, which are floating-point numbers representing the coordinates of a 3D point.","complex_type":true}],"returns":{"type_name":"float","description":"a floating-point number representing the dot product of the input vector and the current vector.","complex_type":false},"usage":{"language":"java","code":"Vector3f vec = new Vector3f(5, 6, 7);\nfloat scalar = vec.dot(new Vector3f(-2, -1, 4));\nSystem.out.println(\"The dot product is \" + scalar);\n// The dot product is -98\n","description":""},"name":"dot","code":"public float dot(Vector3f r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ();\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"61efdbdc-070c-11a0-6e46-cafdf7149112","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"computes the vector that results from crossing two given vectors. It returns a new vector with the components computed based on the product of the two input vectors.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to which the `Vector3f` instance is being crossed, providing the value that is used to calculate the output vector's components.\n\n* `r` is a `Vector3f` object with three components representing x, y, and z coordinates, respectively.\n* `getZ()` and `getY()` methods retrieve the values of the z and y components, respectively, of the `r` object.\n* `getX()` method retrieves the value of the x component of the `r` object.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector with the cross product of two given vectors.\n\n* The output is a new `Vector3f` object that represents the cross product of the two input vectors.\n* The components of the output vector are calculated using the dot product formula for the two input vectors and the resulting values are stored in the corresponding components of the output vector.\n* The order of the input vectors does not matter when calculating the cross product, so the function is commutative.\n* The cross product operation is distributive over addition, meaning that the result of multiplying a vector by a scalar and then crossing it with another vector is the same as multiplying the two vectors separately and then crossing them.\n\nIn summary, the `cross` function takes two vectors as input and returns their cross product as output, adhering to the properties mentioned above.","complex_type":true},"usage":{"language":"java","code":"import com.ch.math.*;\npublic class main {\n\tpublic static void main(String[] args){\n\t\tVector3f vec1 = new Vector3f(5, 2, -7);\n\t\tVector3f vec2 = new Vector3f(-9, 6, 1);\n\t\tVector3f crossproduct = vec1.cross(vec2);\n\t}\n}\n","description":""},"name":"cross","code":"public Vector3f cross(Vector3f r) {\n\t\tfloat x_ = y * r.getZ() - z * r.getY();\n\t\tfloat y_ = z * r.getX() - x * r.getZ();\n\t\tfloat z_ = x * r.getY() - y * r.getX();\n\n\t\treturn new Vector3f(x_, y_, z_);\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"3f9d1746-5ec7-7691-2243-6917ac267e49","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"normalizes a vector by dividing each component by the magnitude of the vector, resulting in a unitized vector representation.","params":[],"returns":{"type_name":"Vector3f","description":"a vector with the given position values normalized to have a length of 1.\n\n* The output is a `Vector3f` instance representing the normalized version of the original vector.\n* The elements of the output are the coordinates of the normalized vector, where each element is scaled by dividing it by the magnitude (or length) of the original vector.\n* The magnitude of the output vector is always non-negative and less than or equal to 1, regardless of the input value.\n* The direction of the output vector is unchanged from the input vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nVector3f normalized = myVector.normalized();\n","description":""},"name":"normalized","code":"public Vector3f normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Vector3f(x / length, y / length, z / length);\n\t}","location":{"start":43,"insert":43,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"e0094b2c-730b-e5a3-9747-4ec3146490b7","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"rotates a vector by an angle around a given axis, returning the new vector. It computes the sin and cos of the angle, and then performs a series of vector operations to produce the result.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotation axis around which the object is rotated.\n\n* `axis` is a 3D vector representing the rotation axis.\n* It has three components: `x`, `y`, and `z`.\n* The length of `axis` is non-zero, indicating that the rotation is not around the origin.\n* The direction of `axis` is along the Z-axis (the axis perpendicular to the plane of the rotation).","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle of the object around the specified axis.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that represents the rotation of the original vector about the specified axis, with the angle of rotation specified.\n\nThe output is a vector in 3D space, represented by the `Vector3f` class in Java.\n\nThe vector is rotated around the specified axis, which is represented by the `axis` parameter. The rotation angle is given by the `angle` parameter.\n\nThe rotation is performed using the sine and cosine of the rotation angle, as calculated using `Math.sin()` and `Math.cos()`. These values are then used to calculate the new vector using matrix multiplication and addition.\n\nThe resulting vector has a magnitude that is equal to the dot product of the original vector and the axis multiplied by the sine of the rotation angle, minus the dot product of the original vector and the axis multiplied by the cosine of the rotation angle.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nVector3f axis = new Vector3f(1, 0, 0); //X axis\nfloat angle = 90;\nvector.rotate(axis, angle);\n","description":""},"name":"rotate","code":"public Vector3f rotate(Vector3f axis, float angle) {\n\t\tfloat sinAngle = (float) Math.sin(-angle);\n\t\tfloat cosAngle = (float) Math.cos(-angle);\n\n\t\treturn this.cross(axis.mul(sinAngle)).add((this.mul(cosAngle)).add(axis.mul(this.dot(axis.mul(1 - cosAngle)))));\n\t}","location":{"start":49,"insert":49,"offset":" ","indent":1},"item_type":"method","length":6},{"id":"100bba08-4c02-8696-b244-44ea69763585","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"rotates a `Vector3f` instance by the angle represented by a `Quaternion` rotation, resulting in a new `Vector3f` instance representing the rotated position and orientation in 3D space.","params":[{"name":"rotation","type_name":"Quaternion","description":"3D rotation to be applied to the `Vector3f` object.\n\nThe `Quaternion` type is a mathematical representation of 3D rotations. It consists of four components: x, y, z, and w. The last component (w) is used to determine the orientation of the quaternion in 3D space.\n\nThe `conjugate` property returns a new `Quaternion` object that is the conjugate of the original `rotation`. This is done by multiplying the `rotation` with its own conjugate, resulting in a new quaternion that represents the inverse of the original rotation.\n\nThe `mul()` method is used to perform the multiplication between the `rotation` and its conjugate, producing a new `Quaternion` object that represents the result of the rotation.\n\nFinally, the `getX()`, `getY()`, and `getZ()` methods are used to extract the X, Y, and Z components of the resulting `Quaternion`, which are then returned as a `Vector3f` object representing the rotated position.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a vector representing the rotated position of the original vector.\n\n* The output is a `Vector3f` object representing the rotated position in 3D space.\n* The x, y, and z components of the vector represent the rotated position along the respective axes.\n* The value of each component is obtained by multiplying the original position by the quaternion rotation matrix, followed by the conjugate of the rotation matrix. This ensures that the rotation is performed in a consistent and correct manner.","complex_type":true},"usage":{"language":"java","code":"Quaternion rotation = new Quaternion(0, 1, 2, 3);\nVector3f vector = new Vector3f(4, 5, 6);\nVector3f rotatedVector = vector.rotate(rotation);\n// rotatedVector is now (1, 3, 5)\n","description":""},"name":"rotate","code":"public Vector3f rotate(Quaternion rotation) {\n\t\tQuaternion conjugate = rotation.conjugate();\n\n\t\tQuaternion w = rotation.mul(this).mul(conjugate);\n\n\t\treturn new Vector3f(w.getX(), w.getY(), w.getZ());\n\t}","location":{"start":56,"insert":56,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"d6cb5614-a170-cf87-ac40-f2716e12fa08","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"computes a linear interpolation between two vectors, `dest` and `this`, based on the provided factor `lerpFactor`. It returns the interpolated vector.","params":[{"name":"dest","type_name":"Vector3f","description":"3D vector that the method will smoothly transition from the current vector to, with the specified lerp factor.\n\n* `dest` is a Vector3f object that represents a 3D point in space with x, y, and z components.\n* `lerpFactor` is a floating-point value representing the interpolation factor between the current position of the object and the desired destination.\n\nThe function returns a new Vector3f object that represents the interpolated position of the object between its current position and the desired destination. The function first subtracts the current position from the desired destination, then multiplies the result by the `lerpFactor`, and finally adds the original position back to get the interpolated position.","complex_type":true},{"name":"lerpFactor","type_name":"float","description":"factor by which the current vector is to be interpolated towards the destination vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector that interpolates between two given vectors based on a provided factor.\n\nThe output is a `Vector3f` object that represents the interpolation between the `dest` vector and the current vector.\n\nThe `lerpFactor` parameter determines how much the output vector is scaled from the `dest` vector, with a value of 0 resulting in the `dest` vector being returned unchanged.\n\nThe output vector has the same direction as the `dest` vector, but its magnitude is interpolated between the magnitudes of the `dest` and current vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1,2,3);\nfloat lerpFactor = 0.5;\nvector.lerp(new Vector3f(4,6,8), lerpFactor);\n","description":""},"name":"lerp","code":"public Vector3f lerp(Vector3f dest, float lerpFactor) {\n\t\treturn dest.sub(this).mul(lerpFactor).add(this);\n\t}","location":{"start":64,"insert":64,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"0cb4e158-d535-f2ae-d94e-ac8f05a59ecf","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"takes a `Vector3f` object as input and returns a new `Vector3f` object with the sum of the input and the current object's values.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be added to the current vector.\n\n* `x`: an integer value representing the x-coordinate of the input vector.\n* `y`: an integer value representing the y-coordinate of the input vector.\n* `z`: an integer value representing the z-coordinate of the input vector.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the sum of the input vectors' components.\n\nThe returned value is a new instance of the `Vector3f` class, representing the sum of the input arguments. The x, y, and z components of the return value are calculated by adding the corresponding components of the two input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector1 = new Vector3f(5, 2, 4);\nVector3f vector2 = new Vector3f(-10, -2, 6);\nvector1.add(vector2);\nSystem.out.println(vector1); // Output: (4, 0, 10)\n","description":""},"name":"add","code":"public Vector3f add(Vector3f r) {\n\t\treturn new Vector3f(x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","location":{"start":68,"insert":68,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"7fec4658-9736-4686-4946-ac639439d4cc","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"updates the component values of a `Vector3f` object by adding the corresponding components of another `Vector3f` object to the current object's values.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to add to the object's position, and its x, y, and z components are added to the object's x, y, and z components, respectively.\n\n* `x`, `y`, and `z` represent the individual coordinates of the vector.","complex_type":true}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(); // Create a Vector3f object to use its methods \nvector.addSelf(new Vector3f(1,2,3)); // Add the values of the passed Vector3f argument to the current Vector3f object and store the result in the same object.\n","description":""},"name":"addSelf","code":"public void addSelf(Vector3f r) {\n\t\tthis.x += r.x;\n\t\tthis.y += r.y;\n\t\tthis.z += r.z;\n\t}","location":{"start":72,"insert":72,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"b095a392-f3cd-e0ad-3442-507b7692b979","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"takes a scalar value `r` and adds it to the components of its input vector, returning a new vector with the sum.","params":[{"name":"r","type_name":"float","description":"3D vector to be added to the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance with the sum of the original vector's components and the given scalar value.\n\nThe `Vector3f` object returned by the function represents a 3D vector with x, y, and z components that have been added to their corresponding input values by a float value 'r'. The resulting vector has an x component equal to the sum of the input x component and the input r value, a y component equal to the sum of the input y component and the input r value, and a z component equal to the sum of the input z component and the input r value.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat number = 5;\nvector = vector.add(number)\nSystem.out.println(vector); //Output (6, 7, 8)\n","description":"\nIn this example, the method add() is called on a vector object with an argument of 'number' which is also a float. The result is returned and assigned to the original vector object which then prints out as (6, 7, 8)."},"name":"add","code":"public Vector3f add(float r) {\n\t\treturn new Vector3f(x + r, y + r, z + r);\n\t}","location":{"start":78,"insert":78,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"e34b2e82-1e87-e4b0-524d-d6f3ff0fa2d2","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"adds a vector to the current vector, scaling the result by a specified factor.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector that is to be scaled and added to the current vector instance.\n\nThe `v` parameter is of type `Vector3f`, which represents a 3D vector with three components: x, y, and z. These components have decimal values between -1 and 1.\n\nThe `scale` parameter is a float value that represents the scaling factor applied to the `v` vector. This value can be any real number between 0 and infinity.","complex_type":true},{"name":"scale","type_name":"float","description":"3D vector that is to be multiplied with the input `v` before adding it to the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new vector that represents the sum of the original vector and the scaled version of it.\n\nThe output is a `Vector3f` object that represents the sum of the original vector `this` and the scaled version of the input vector `v`. The scaling factor `scale` is applied to the components of the input vector before adding it to `this`. Therefore, the resulting vector has the same magnitude as the input vector, but its direction may be different depending on the sign and magnitude of the scaling factor.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n        Vector3f vec1 = new Vector3f(1, 2, 3);\n        Vector3f vec2 = new Vector3f(4, 5, 6);\n        \n        // Scaling vec2 by a factor of 0.5\n        Vector3f scaledVec2 = vec2.addScaledVector(vec1, 0.5f);\n        \n        // Prints (8, 12, 18)\n        System.out.println(scaledVec2);\n    }\n","description":"\nThis will give an output of (8, 12, 18)."},"name":"addScaledVector","code":"public Vector3f addScaledVector(Vector3f v, float scale) {\n\t\treturn this.add(v.mul(scale));\n\t}","location":{"start":82,"insert":82,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"e073207f-c281-7a85-4a4d-b3b1aa884b77","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"multiplies a vector by a scalar value and adds it to the current vector, scaling the current vector accordingly.","params":[{"name":"v","type_name":"Vector3f","description":"3D vector to be scaled, which is then multiplied by the specified scalar value before being added to the current vector representation of the object.\n\n* `v` is a `Vector3f` instance, representing a 3D vector with floating-point values.\n* `scale` is a float value passed as an argument to the function, indicating the scaling factor applied to the vector.","complex_type":true},{"name":"scale","type_name":"float","description":"3D vector that is multiplied by the corresponding component of the `v` argument, resulting in the new value added to the current state of the object.","complex_type":false}],"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3); // input vector v\nfloat scale = 0.5f; // scaling factor\nv.addSelfScaledVector(v, scale);\nSystem.out.println(v);\n","description":""},"name":"addSelfScaledVector","code":"public void addSelfScaledVector(Vector3f v, float scale) {\n\t\tthis.addSelf(v.mul(scale));\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"a6911686-443a-94b4-0f4c-77efc4c3e35e","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"calculates the difference between two vectors and returns a new vector with the component-wise subtraction.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector to be subtracted from the current vector, resulting in a new vector that represents the difference between the two vectors.\n\n* `x`: The real value of `r`.\n* `y`: The imaginary value of `r`.\n* `z`: The scalar value of `r`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the difference between the input vector and the current vector's components.\n\n* The output is a new Vector3f object with the difference between the input vectors calculated.\n* The vector components are represented by the variables `x`, `y`, and `z`.\n* These components can take on any real value within the range of -1.0 to 1.0.\n\nNote: The output is not modified in any way, it is a new object that represents the difference between the input vectors.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec1 = new Vector3f(5, 7, 9);\nVector3f vec2 = new Vector3f(8, 6, 4);\nVector3f result = vec1.sub(vec2);\nSystem.out.println(result); // prints (-3, -1, -5)\n","description":""},"name":"sub","code":"public Vector3f sub(Vector3f r) {\n\t\treturn new Vector3f(x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","location":{"start":90,"insert":90,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"42c498b4-7b9f-1b81-044c-4af479a825c9","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"takes a single float parameter and subtracts it from the corresponding components of a `Vector3f` object, returning a new `Vector3f` instance with the updated values.","params":[{"name":"r","type_name":"float","description":"3D vector to subtract from the current vector.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` instance representing the difference between the original vector and the given scalar value.\n\nThe function returns a new `Vector3f` object representing the difference between the input vector and the reference vector. The returned vector has the same components as the input vector, but with the values shifted by the amount of the reference vector.\n\nThe returned vector's x-component is equal to the input vector's x-component minus the reference vector's x-component.\n\nThe returned vector's y-component is equal to the input vector's y-component minus the reference vector's y-component.\n\nThe returned vector's z-component is equal to the input vector's z-component minus the reference vector's z-component.","complex_type":true},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(5, 4, 6);\nSystem.out.println(v1.sub(2)); // Output: (3, 2, 4)\n","description":""},"name":"sub","code":"public Vector3f sub(float r) {\n\t\treturn new Vector3f(x - r, y - r, z - r);\n\t}","location":{"start":94,"insert":94,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"a1816a05-1fb0-fa96-d04e-902fecce52ea","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"multiplies two vector structures and returns a new vector with the result.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that multiplies with the current vector, resulting in a new 3D vector output.\n\n`x`, `y`, and `z` are the components of the input vector in 3D space.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the product of the input vectors' components.\n\n* The output is a new instance of the `Vector3f` class.\n* The output's `x`, `y`, and `z` components are calculated by multiplying the corresponding components of the input vector `r` by the corresponding components of the function's argument `x`, `y`, and `z`.\n* The resulting components of the output are stored in a new instance of the `Vector3f` class.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f(1, 2, 3);\nVector3f r = new Vector3f(4, 5, 6);\nVector3f result = v.mul(r);\n","description":"\nIn this example, we create two vectors: v and r. We then use the method mul on vector v with argument r to get a result vector which is multiplied by v and r."},"name":"mul","code":"public Vector3f mul(Vector3f r) {\n\t\treturn new Vector3f(x * r.getX(), y * r.getY(), z * r.getZ());\n\t}","location":{"start":98,"insert":98,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"e06e7e3e-37de-0ea5-984d-8c416c104bfb","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"multiplies the vector's components by a scalar value `r`, resulting in a new vector with the same direction as the original but scaled by the magnitude of `r`.","params":[{"name":"r","type_name":"float","description":"scalar value that is multiplied with the components of the `Vector3f` instance being manipulated.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the product of the x, y, and z components and the input parameter `r`.\n\nThe `Vector3f` object returned is an instance of a class that represents a 3D vector in Java.\nThe `x`, `y`, and `z` fields of the object represent the coordinates of the vector.\nEach field is assigned a value based on the product of the `x`, `y`, and `z` components of the original input vector and the scalar `r`.\nTherefore, the output vector has a magnitude that is equal to the product of the magnitudes of the input vector's components and the scalar `r`, and its direction is parallel to the line connecting the origin of the coordinate system to the point on which the dot product of the input vector with a unit vector in the direction of `r` results.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nfloat scale = 2;\nvector = vector.mul(scale); // returns the scaled vector (2, 4, 6)\n","description":"\nIn this example, a new instance of the Vector3f class is created with x=1, y=2, and z=3. The mul method is then called on this object with the argument scale = 2. This will return a new vector that has been scaled by a factor of 2 in each dimension, resulting in (2, 4, 6)."},"name":"mul","code":"public Vector3f mul(float r) {\n\t\treturn new Vector3f(x * r, y * r, z * r);\n\t}","location":{"start":102,"insert":102,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"5ec13fea-22f6-cc86-e94f-1163f370dd8d","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"takes a reference to another vector and returns a new vector with the components scaled by the reciprocal of the corresponding components of the input vector.","params":[{"name":"r","type_name":"Vector3f","description":"vector to divide the current vector by, resulting in a new vector with the same components but with the values scaled by the corresponding ratio.\n\n* `x`: The componentwise multiplication of `r.x` with the divisor is performed to produce the result.\n* `y`: Similarly, the componentwise multiplication of `r.y` with the divisor is carried out to produce the result.\n* `z`: The same applies to `r.z`.","complex_type":true}],"returns":{"type_name":"Vector3f","description":"a new vector with the same x, y, and z components, but with the values scaled by the reciprocal of the input vector's x, y, and z components.\n\n* The output is a new instance of the `Vector3f` class with the values x, y, and z scaled by the corresponding values in the argument `r`.\n* The resulting vector has the same magnitude as the original input vector, but its direction is reversed. This means that if the original vector was pointing in a particular direction, the divided vector will point in the opposite direction.\n* The division is performed element-wise, meaning that each component of the output is equal to the corresponding component of the input scaled by the factor from the argument `r`.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        //Create a new vector3f object\n        Vector3f r = new Vector3f(1, 2, 4);\n\n        //Create another vector3f object to divide by\n        Vector3f a = new Vector3f(2, 4, 8);\n\n        //Divide the values in the first vector by the second and assign to the result\n        Vector3f result = r.div(a);\n\n        System.out.println(\"r/a: \" + result); //prints out r/a: (0.5, 0.5, 2)\n    }\n}\n","description":""},"name":"div","code":"public Vector3f div(Vector3f r) {\n\t\treturn new Vector3f(x / r.getX(), y / r.getY(), z / r.getZ());\n\t}","location":{"start":106,"insert":106,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"ef97d2f0-d2c2-15b0-b446-ae1692a773ef","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"takes a scalar `r` and returns a `Vector3f` with components scaled by the inverse of `r`.","params":[{"name":"r","type_name":"float","description":"scalar value used to divide each component of the input vector by.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a vector with the same x, y, and z components divided by the input parameter `r`.\n\nThe `Vector3f` object returned is a scaled version of the original vector, where each component has been divided by the input parameter `r`. Therefore, the magnitude of the returned vector is equal to the magnitude of the original vector divided by `r`. The direction of the returned vector remains unchanged from the original vector.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec1 = new Vector3f(5, 7, 8);\nfloat divisor = 2;\nvec1.div(divisor) // returns a vector with coordinates (2.5, 3.5, 4.0).\n","description":""},"name":"div","code":"public Vector3f div(float r) {\n\t\treturn new Vector3f(x / r, y / r, z / r);\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"0c865b4e-f250-1eb1-244d-284cad9ecfff","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"computes the absolute value of a `Vector3f` object, returning a new `Vector3f` instance with the absolute values of its components.","params":[],"returns":{"type_name":"Vector3f","description":"a new `Vector3f` object containing the absolute values of the input vectors' components.\n\n* The return type is `Vector3f`, which represents a 3D vector with floating-point values.\n* The function takes no arguments, meaning that it returns a newly created `Vector3f` object with the absolute value of the input vector's components.\n* The returned vector has the same x, y, and z components as the input vector, but with their absolute values.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    public static void main(String[] args) {\n        Vector3f vec = new Vector3f(-10, 5, -2);\n        System.out.println(vec.abs());\n    }\n}\n","description":""},"name":"abs","code":"public Vector3f abs() {\n\t\treturn new Vector3f(Math.abs(x), Math.abs(y), Math.abs(z));\n\t}","location":{"start":114,"insert":114,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"e9e390b3-3ed3-2792-5146-1b74639ba168","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a string representation of a mathematical expression involving `x`, `y`, and `z` variables, using parentheses and spaces to organize the terms.","params":[],"returns":{"type_name":"String","description":"a string representing the point (x, y, z) as a single value.\n\nThe output is a string that consists of three components separated by spaces. The first component is the value of the `x` field, the second component is the value of the `y` field, and the third component is the value of the `z` field.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    public static void main(String[] args) {\n        Vector3f v1 = new Vector3f();\n        System.out.println(\"v1: \" + v1); // Outputs (0.0 0.0 0.0)\n\n        Vector3f v2 = new Vector3f(1, 2, 3);\n        System.out.println(\"v2: \" + v2); // Outputs (1.0 2.0 3.0)\n    }\n}\n","description":""},"name":"toString","code":"public String toString() {\n\t\treturn \"(\" + x + \" \" + y + \" \" + z + \")\";\n\t}","location":{"start":118,"insert":118,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"388cd673-6b5a-c085-744f-d83905667b69","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a `Vector2f` object containing the values of `x` and `y`.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the position of an entity in a 2D space.\n\n* The Vector2f object represents an ordered pair of values in 2D space, with x representing the horizontal position and y representing the vertical position.\n* Both x and y have a type of float, indicating that they can hold decimal values for precise positioning.\n* The Vector2f object is a mutable type, meaning it can be modified after creation.\n* No information is provided about the author or licensing of the code.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\nVector2f xy = myVector.getXY();\nSystem.out.println(xy); // Outputs (1, 2)\n","description":""},"name":"getXY","code":"public Vector2f getXY() {\n\t\treturn new Vector2f(x, y);\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"59d6a732-d90b-1384-344d-646f804d566c","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a new `Vector2f` object containing the `y` and `z` components of an unspecified original vector.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the `y` and `z` coordinates of the point.\n\n* The output is a `Vector2f` object, representing a 2D point in homogeneous coordinates with x and y components.\n* The `y` component represents the vertical distance from the origin, while the `z` component represents the depth or height from the origin along the z-axis.\n* The ` Vector2f` class is a part of the Java library for mathematical operations on 2D points.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f yz = vector.getYZ();\n","description":""},"name":"getYZ","code":"public Vector2f getYZ() {\n\t\treturn new Vector2f(y, z);\n\t}","location":{"start":126,"insert":126,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"8f0f9b01-5519-75b1-6e4d-6d8c2d59dffb","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a `Vector2f` object representing the z-axis and x-axis coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the coordinate pair (z, x).\n\n* `z`: The z-coordinate of the vector, which represents the vertical position in the 2D space.\n* `x`: The x-coordinate of the vector, which represents the horizontal position in the 2D space.\n\nThe resulting vector object has two components: `z` and `x`, which can be used to represent a point in 2D space with both vertical and horizontal coordinates.","complex_type":true},"usage":{"language":"java","code":"Vector3f myVector = new Vector3f(1, 2, 3);\n\nVector2f zxVector = myVector.getZX();\n\nSystem.out.println(zxVector); // Output: (3, 1)\n","description":""},"name":"getZX","code":"public Vector2f getZX() {\n\t\treturn new Vector2f(z, x);\n\t}","location":{"start":130,"insert":130,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"419f86fd-8518-5cb9-7e41-77cd0ba76414","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a `Vector2f` object containing the `y` and `x` coordinates of a point.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the position of an entity in the Cartesian coordinate system, with `y` and `x` components.\n\n* The output is a `Vector2f` object that represents a point in 2D space with x and y coordinates.\n* The x coordinate has a value of `x`, which is an int representing the x-position of the point.\n* The y coordinate has a value of `y`, which is also an int representing the y-position of the point.\n\nOverall, the `getYX` function returns a point object that represents a 2D location in the plane.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f yx = vector.getYX();\nSystem.out.println(\"y = \" + yx.getY() + \", x = \" + yx.getX()); // Output: y = 2, x = 1\n","description":""},"name":"getYX","code":"public Vector2f getYX() {\n\t\treturn new Vector2f(y, x);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"357f37ec-5e40-a988-4f48-fe5423d58181","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a `Vector2f` object representing the point (z, y)","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object representing the point (z, y) in the coordinate system.\n\n* The output is a `Vector2f` object representing the z-y coordinate pair in homogeneous coordinates.\n* The z component of the vector represents the distance from the origin along the z-axis, while the y component represents the distance from the origin along the y-axis.\n* Both components have real numbers as their values, which can range from negative infinity to positive infinity.","complex_type":true},"usage":{"language":"java","code":"Vector2f zy = new Vector3f(1, 2, 3).getZY();\nSystem.out.println(\"zy.x = \" + zy.getX()); // Output: zy.x = 3\nSystem.out.println(\"zy.y = \" + zy.getY()); // Output: zy.y = 2\n","description":""},"name":"getZY","code":"public Vector2f getZY() {\n\t\treturn new Vector2f(z, y);\n\t}","location":{"start":138,"insert":138,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"28c7b379-6c72-4694-e540-e723b76748e5","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns a `Vector2f` object containing the `x` and `z` coordinates of an unknown entity.","params":[],"returns":{"type_name":"Vector2f","description":"a `Vector2f` object containing the values of `x` and `z`.\n\n* The `Vector2f` object returned represents a 2D point in the coordinate system, with x-component representing the horizontal position and z-component representing the vertical position.\n* The values of the x and z components are set to the parameters passed to the function, which can be any valid values for a 2D point.\n* The `Vector2f` class defines several methods for manipulating points in 2D space, such as addition, subtraction, multiplication by a scalar, and more.","complex_type":true},"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nVector2f xz = vector.getXZ();\n","description":"\nIn this case, the value of xz is (1, 3) because the z component of the input vector is returned as the y component of the output vector."},"name":"getXZ","code":"public Vector2f getXZ() {\n\t\treturn new Vector2f(x, z);\n\t}","location":{"start":142,"insert":142,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"8c7c4c91-7f85-3aac-8d43-8307990a9a0d","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"sets the components of a `Vector3f` object to the input values of `x`, `y`, and `z`.","params":[{"name":"x","type_name":"float","description":"3D position of the vector along the x-axis.","complex_type":false},{"name":"y","type_name":"float","description":"2D position of the vector in the Y-axis, which is updated to match the value provided by the user.","complex_type":false},{"name":"z","type_name":"float","description":"3rd component of the `Vector3f` object, which is updated to match the new value passed in the function call.","complex_type":false}],"returns":{"type_name":"Vector3f","description":"a reference to the modified vector instance.\n\nThe returned output is an instance of the `Vector3f` class, which represents a 3D vector in homogeneous coordinates.\nThe `x`, `y`, and `z` fields of the output represent the components of the vector, respectively.\nThese components can take on any valid floating-point value within their respective ranges, which are specified by the Java documentation for the `Vector3f` class.\nThe returned output is a modified copy of the original input vector, with the given components updated to match the new values provided in the function call.","complex_type":true},"usage":{"language":"java","code":"Vector3f v = new Vector3f();\nv.set(1, 2, 3);\n","description":"\nIn this example, the input values of x, y and z are being assigned to the instance variables of the vector object 'v' by calling the set method with those arguments."},"name":"set","code":"public Vector3f set(float x, float y, float z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\treturn this;\n\t}","location":{"start":146,"insert":146,"offset":" ","indent":1},"item_type":"method","length":6},{"id":"e413e256-0b93-e498-2540-58ce972d626f","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"sets the components of a `Vector3f` object to the corresponding values of another `Vector3f` object.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that contains the new values for the object's x, y, and z components, which are then set as the object's own properties through the `set()` method.\n\n* `getX()`: Retrieves the x-coordinates of the input vector.\n* `getY()`: Retrieves the y-coordinates of the input vector.\n* `getZ()`: Retrieves the z-coordinates of the input vector.","complex_type":true}],"returns":{"type_name":"instance","description":"a reference to the same `Vector3f` object, with its components set to the values passed as arguments.\n\n* The output is a reference to the same `Vector3f` instance as the input parameter `r`.\n* The output contains the same values for the x, y, and z components as the input parameter `r`.\n* The output maintains the same state as the input parameter `r`, including any modifications made to its components.","complex_type":true},"usage":{"language":"java","code":"Vector3f vec = new Vector3f();\nvec.set(new Vector3f(1, 2, 3));\n// vec now contains the values (1, 2, 3)\n","description":""},"name":"set","code":"public Vector3f set(Vector3f r) {\n\t\tset(r.getX(), r.getY(), r.getZ());\n\t\treturn this;\n\t}","location":{"start":153,"insert":153,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"efeb0366-aea7-0582-9e4a-a6431fb863ad","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns the value of the `x` field.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the variable `x`.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Vector3f vector = new Vector3f(1, 2, 3);\n        float xValue = vector.getX();\n        System.out.println(\"The value of the X coordinate is: \" + xValue);\n    }\n}\n","description":""},"name":"getX","code":"public float getX() {\n\t\treturn x;\n\t}","location":{"start":158,"insert":158,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"1c69b189-fe16-6382-8c4d-2ed63b40542b","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"sets the value of the `x` field of the object to which it belongs.","params":[{"name":"x","type_name":"float","description":"float value that is being assigned to the `x` field of the object being modified by the `setX()` method.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nvector.setX(5);\n","description":"\nThis sets the X component of the vector to 5, while keeping the Y and Z components unchanged."},"name":"setX","code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","location":{"start":162,"insert":162,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"be480064-3b16-228a-5643-b2f27e59db87","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"returns the value of the `y` field.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the current value of the `y` field.","complex_type":false},"usage":{"language":"java","code":"public class Example{\n  public static void main(String[] args){\n    Vector3f myVector = new Vector3f(1,2,3);\n    float yValue = myVector.getY();\n    System.out.println(yValue); // Outputs 2\n  }\n}\n","description":""},"name":"getY","code":"public float getY() {\n\t\treturn y;\n\t}","location":{"start":166,"insert":166,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"bf76e521-1c18-1b88-8942-922cb43ea2a0","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"sets the value of the object's `y` field to the input parameter.","params":[{"name":"y","type_name":"float","description":"2D coordinate of a point in the graphical user interface (GUI) of the application.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f(1, 2, 3);\nvector.setY(5);\nSystem.out.println(vector.getY()); // prints 5\n","description":""},"name":"setY","code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","location":{"start":170,"insert":170,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"2aa4137b-4e28-89ba-0941-40b7cb59388b","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"retrieves the value of the `z` field.","params":[],"returns":{"type_name":"float","description":"the value of the `z` field.","complex_type":false},"usage":{"language":"java","code":"Vector3f v1 = new Vector3f(2, 4, 6);\nfloat zValue = v1.getZ(); // Returns the value of Z\n","description":""},"name":"getZ","code":"public float getZ() {\n\t\treturn z;\n\t}","location":{"start":174,"insert":174,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"3b0dfec1-1c7c-ceaf-7e49-701343d5817c","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"sets the value of the field `z` of its object reference to the input parameter `z`.","params":[{"name":"z","type_name":"float","description":"3D coordinate of an object in the x, y, and z dimensions, and assigns its value to the `z` field of the class instance upon call execution.","complex_type":false}],"usage":{"language":"java","code":"Vector3f vector = new Vector3f();\nvector.setZ(0.5);\n","description":""},"name":"setZ","code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","location":{"start":178,"insert":178,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"fe0cd006-5e81-549c-f246-505b8864bc36","ancestors":["f090c9bf-f1e9-aa9e-ac4f-df68c481fd1f"],"type":"function","description":"compares two `Vector3f` objects based on their `x`, `y`, and `z` components, returning `true` if they are identical, and `false` otherwise.","params":[{"name":"r","type_name":"Vector3f","description":"3D vector that is being compared to the current vector for equality.\n\n`x`: The first component of the vector, which corresponds to the x-coordinate of the point in 3D space.\n\n`y`: The second component of the vector, which corresponds to the y-coordinate of the point in 3D space.\n\n`z`: The third component of the vector, which corresponds to the z-coordinate of the point in 3D space.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the vector's coordinates are equal to those of the provided vector.","complex_type":false},"usage":{"language":"java","code":"// Create two Vector3f objects with different values for x, y, and z\nVector3f v1 = new Vector3f(2, 3, 4);\nVector3f v2 = new Vector3f(5, 6, 7);\n\n// Check if the two vectors are equal\nif (v1.equals(v2)) {\n    System.out.println(\"The two vectors are equal\");\n} else {\n    System.out.println(\"The two vectors are not equal\");\n}\n","description":"\nThe output of this program would be \"The two vectors are not equal.\""},"name":"equals","code":"public boolean equals(Vector3f r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ();\n\t}","location":{"start":182,"insert":182,"offset":" ","indent":1},"item_type":"method","length":3}]}}}