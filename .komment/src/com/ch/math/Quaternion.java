{"name":"Quaternion.java","path":"src/com/ch/math/Quaternion.java","content":{"structured":{"description":"","items":[{"id":"562f64fb-2ba5-463e-8a4c-d520644ad290","ancestors":[],"type":"function","name":"length","location":{"offset":"\t","indent":1,"insert":35,"start":35},"returns":"float","params":[],"code":"public float length() {\n\t\treturn (float) Math.sqrt(x * x + y * y + z * z + w * w);\n\t}","skip":false,"length":3,"comment":{"description":"calculates the Euclidean length of a 4D vector by squaring its components and taking the square root of the result.","params":[],"returns":{"type":"float","description":"the square root of the sum of the squares of the function's arguments."}}},{"id":"c91b8a68-8ef0-4564-9936-15183af51973","ancestors":[],"type":"function","name":"normalized","location":{"offset":"\t","indent":1,"insert":39,"start":39},"returns":"Quaternion","params":[],"code":"public Quaternion normalized() {\n\t\tfloat length = length();\n\n\t\treturn new Quaternion(w / length, x / length, y / length, z / length);\n\t}","skip":false,"length":5,"comment":{"description":"normalizes a given quaternion by dividing its components by their length, resulting in a unit quaternion.","params":[],"returns":{"type":"Quaternion","description":"a normalized quaternion representation of the original input quaternion."}}},{"id":"4cbc84be-6226-4acb-bd64-7c6e843f18f2","ancestors":[],"type":"function","name":"conjugate","location":{"offset":"\t","indent":1,"insert":45,"start":45},"returns":"Quaternion","params":[],"code":"public Quaternion conjugate() {\n\t\treturn new Quaternion(w, -x, -y, -z);\n\t}","skip":false,"length":3,"comment":{"description":"generates a quaternion with the same magnitude and direction as the given quaternion, but with its polar components inverted.","params":[],"returns":{"type":"Quaternion","description":"a new quaternion with the same scalar part as the input quaternion, but with the axis components reversed."}}},{"id":"c277e377-79dd-42f2-a5ee-cd86d0cca885","ancestors":[],"type":"function","name":"mul","location":{"offset":"\t","indent":1,"insert":49,"start":49},"returns":"Quaternion","params":[{"name":"r","type":"float"}],"code":"public Quaternion mul(float r) {\n\t\treturn new Quaternion(w * r, x * r, y * r, z * r);\n\t}","skip":false,"length":3,"comment":{"description":"multiplies a quaternion by a scalar value and returns the result as a new quaternion object.","params":[{"name":"r","type":"float","description":"4D vector to be multiplied with the quaternion."}],"returns":{"type":"Quaternion","description":"a Quaternion representation of the product of the input value `r` and the quaternion's coefficients."}}},{"id":"fcc0da71-2de5-4379-af38-43308c916954","ancestors":[],"type":"function","name":"mul","location":{"offset":"\t","indent":1,"insert":53,"start":53},"returns":"Quaternion","params":[{"name":"r","type":"Quaternion"}],"code":"public Quaternion mul(Quaternion r) {\n\t\tfloat w_ = w * r.getW() - x * r.getX() - y * r.getY() - z * r.getZ();\n\t\tfloat x_ = x * r.getW() + w * r.getX() + y * r.getZ() - z * r.getY();\n\t\tfloat y_ = y * r.getW() + w * r.getY() + z * r.getX() - x * r.getZ();\n\t\tfloat z_ = z * r.getW() + w * r.getZ() + x * r.getY() - y * r.getX();\n\n\t\treturn new Quaternion(w_, x_, y_, z_);\n\t}","skip":false,"length":8,"comment":{"description":"computes the result of multiplying two quaternions by scalar multiplication and component-wise multiplication, and returns the resulting quaternion.","params":[{"name":"r","type":"Quaternion","description":"quaternion to be multiplied with the current quaternion, and its values are used to compute the new quaternion's components."}],"returns":{"type":"Quaternion","description":"a quaternion representing the product of two quaternions."}}},{"id":"a50e8780-b54f-4103-97d5-01f8ace49fd0","ancestors":[],"type":"function","name":"mul","location":{"offset":"\t","indent":1,"insert":62,"start":62},"returns":"Quaternion","params":[{"name":"r","type":"Vector3f"}],"code":"public Quaternion mul(Vector3f r) {\n\t\tfloat w_ = -x * r.getX() - y * r.getY() - z * r.getZ();\n\t\tfloat x_ = w * r.getX() + y * r.getZ() - z * r.getY();\n\t\tfloat y_ = w * r.getY() + z * r.getX() - x * r.getZ();\n\t\tfloat z_ = w * r.getZ() + x * r.getY() - y * r.getX();\n\n\t\treturn new Quaternion(w_, x_, y_, z_);\n\t}","skip":false,"length":8,"comment":{"description":"computes the product of a quaternion and a vector, returning the resulting quaternion.","params":[{"name":"r","type":"Vector3f","description":"3D vector that multiplies with the quaternion."}],"returns":{"type":"Quaternion","description":"a new Quaternion instance representing the result of multiplying the given Vector3f by the quaternion."}}},{"id":"d66c99fe-6423-47f2-9ed7-f91597f07896","ancestors":[],"type":"function","name":"sub","location":{"offset":"\t","indent":1,"insert":71,"start":71},"returns":"Quaternion","params":[{"name":"r","type":"Quaternion"}],"code":"public Quaternion sub(Quaternion r) {\n\t\treturn new Quaternion(w - r.getW(), x - r.getX(), y - r.getY(), z - r.getZ());\n\t}","skip":false,"length":3,"comment":{"description":"takes a quaternion `r` as input and returns a new quaternion with the difference between the input quaternion's values and the current quaternion's values.","params":[{"name":"r","type":"Quaternion","description":"4-dimensional vector to be subtracted from the current quaternion."}],"returns":{"type":"Quaternion","description":"a new quaternion with the difference between the input quaternions' values."}}},{"id":"2b6d1d45-c818-427e-bf50-16226a9d337c","ancestors":[],"type":"function","name":"add","location":{"offset":"\t","indent":1,"insert":75,"start":75},"returns":"Quaternion","params":[{"name":"r","type":"Quaternion"}],"code":"public Quaternion add(Quaternion r) {\n\t\treturn new Quaternion(w + r.getW(), x + r.getX(), y + r.getY(), z + r.getZ());\n\t}","skip":false,"length":3,"comment":{"description":"takes a `Quaternion` object `r` as input and returns a new `Quaternion` object representing the sum of the two quaternions.","params":[{"name":"r","type":"Quaternion","description":"4D quaternion to be added to the current quaternion."}],"returns":{"type":"Quaternion","description":"a new Quaternion object with the sum of the input quaternions' components."}}},{"id":"8844b510-f39e-43ae-a5a2-14d163bc0791","ancestors":[],"type":"function","name":"toRotationMatrix","location":{"offset":"\t","indent":1,"insert":79,"start":79},"returns":"Matrix4f","params":[],"code":"public Matrix4f toRotationMatrix() {\n\t\tVector3f forward = new Vector3f(2.0f * (x * z - w * y), 2.0f * (y * z + w * x), 1.0f - 2.0f * (x * x + y * y));\n\t\tVector3f up = new Vector3f(2.0f * (x * y + w * z), 1.0f - 2.0f * (x * x + z * z), 2.0f * (y * z - w * x));\n\t\tVector3f right = new Vector3f(1.0f - 2.0f * (y * y + z * z), 2.0f * (x * y - w * z), 2.0f * (x * z + w * y));\n\n\t\treturn new Matrix4f().initRotation(forward, up, right);\n\t}","skip":false,"length":7,"comment":{"description":"converts a quaternion representing a rotation into a 4x4 matrix representation of that rotation.","params":[],"returns":{"type":"Matrix4f","description":"a 4x4 rotation matrix."}}},{"id":"2c6b982f-a989-4e23-908d-47e674fd728e","ancestors":[],"type":"function","name":"dot","location":{"offset":"\t","indent":1,"insert":87,"start":87},"returns":"float","params":[{"name":"r","type":"Quaternion"}],"code":"public float dot(Quaternion r) {\n\t\treturn x * r.getX() + y * r.getY() + z * r.getZ() + w * r.getW();\n\t}","skip":false,"length":3,"comment":{"description":"computes the dot product of a quaternion and another vector.","params":[{"name":"r","type":"Quaternion","description":"4D rotational vector that, when multiplied by the function's arguments, produces the dot product of the two vectors."}],"returns":{"type":"float","description":"a floating-point number representing the dot product of the Quaternion object and the input argument."}}},{"id":"0c7732a6-bd77-434f-97e4-a47ba29f7496","ancestors":[],"type":"function","name":"NLerp","location":{"offset":"\t","indent":1,"insert":91,"start":91},"returns":"Quaternion","params":[{"name":"dest","type":"Quaternion"},{"name":"lerpFactor","type":"float"},{"name":"shortest","type":"boolean"}],"code":"public Quaternion NLerp(Quaternion dest, float lerpFactor, boolean shortest) {\n\t\tQuaternion correctedDest = dest;\n\n\t\tif (shortest && this.dot(dest) < 0)\n\t\t\tcorrectedDest = new Quaternion(-dest.getW(), -dest.getX(), -dest.getY(), -dest.getZ());\n\n\t\treturn correctedDest.sub(this).mul(lerpFactor).add(this).normalized();\n\t}","skip":false,"length":8,"comment":{"description":"computes a quaternion interpolation between two given quaternions based on the Lerp formula, optionally using shortest path to avoid going beyond the boundary of the rotation axis.","params":[{"name":"dest","type":"Quaternion","description":"4D vector that will be interpolated towards the output value using the provided lerp factor."},{"name":"lerpFactor","type":"float","description":"0 to 1 value that determines how much of the destination quaternion should be interpolated towards the source quaternion during the lerping process."},{"name":"shortest","type":"boolean","description":"3D vector that results from normalizing the output quaternion when it has a negative dot product with the destination quaternion, which is used to avoid producing large jumps in orientation when interpolating between two quaternions."}],"returns":{"type":"Quaternion","description":"a quaternion that represents the linear interpolation of two given quaternions."}}},{"id":"27027e78-9854-4c1f-8414-056546eaf9a9","ancestors":[],"type":"function","name":"SLerp","location":{"offset":"\t","indent":1,"insert":100,"start":100},"returns":"Quaternion","params":[{"name":"dest","type":"Quaternion"},{"name":"lerpFactor","type":"float"},{"name":"shortest","type":"boolean"}],"code":"public Quaternion SLerp(Quaternion dest, float lerpFactor, boolean shortest) {\n\t\tfinal float EPSILON = 1e3f;\n\n\t\tfloat cos = this.dot(dest);\n\t\tQuaternion correctedDest = dest;\n\n\t\tif (shortest && cos < 0) {\n\t\t\tcos = -cos;\n\t\t\tcorrectedDest = new Quaternion(-dest.getW(), -dest.getX(), -dest.getY(), -dest.getZ());\n\t\t}\n\n\t\tif (Math.abs(cos) >= 1 - EPSILON)\n\t\t\treturn NLerp(correctedDest, lerpFactor, false);\n\n\t\tfloat sin = (float) Math.sqrt(1.0f - cos * cos);\n\t\tfloat angle = (float) Math.atan2(sin, cos);\n\t\tfloat invSin = 1.0f / sin;\n\n\t\tfloat srcFactor = (float) Math.sin((1.0f - lerpFactor) * angle) * invSin;\n\t\tfloat destFactor = (float) Math.sin((lerpFactor) * angle) * invSin;\n\n\t\treturn this.mul(srcFactor).add(correctedDest.mul(destFactor));\n\t}","skip":false,"length":23,"comment":{"description":"computes a quaternion interpolation between two given quaternions, based on the Lerp method, and returns the result. It takes into account the shortest path option and handles the sign of the cosine angle to ensure proper orientation.","params":[{"name":"dest","type":"Quaternion","description":"4-dimensional vector that the resulting quaternion will be closest to, with the quaternion being computed based on the angle between the original and dest vectors."},{"name":"lerpFactor","type":"float","description":"0-1 value that determines how quickly the Quaternion will be interpolated between the starting and ending points."},{"name":"shortest","type":"boolean","description":"shortest path between the two quaternions, which is computed by flipping the sign of the destination quaternion when the cosine of the dot product between the two quaternions is negative."}],"returns":{"type":"Quaternion","description":"a Quaternion representing the interpolated rotation between two given Quaternions, with a maximum interpolation angle of 180 degrees."}}},{"id":"226b4b78-0c22-4228-a599-bacb1b7810ab","ancestors":[],"type":"function","name":"getForward","location":{"offset":"\t","indent":1,"insert":163,"start":163},"returns":"Vector3f","params":[],"code":"public Vector3f getForward() {\n\t\treturn new Vector3f(0, 0, 1).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates the vector `this` by 90 degrees around the x-axis, resulting in a new vector pointing towards the forward direction.","params":[],"returns":{"type":"Vector3f","description":"a rotated version of the original vector, pointing in the forward direction."}}},{"id":"0e806efe-04af-4c81-8567-95308f4f9a94","ancestors":[],"type":"function","name":"getBack","location":{"offset":"\t","indent":1,"insert":167,"start":167},"returns":"Vector3f","params":[],"code":"public Vector3f getBack() {\n\t\treturn new Vector3f(0, 0, -1).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates a vector by 90 degrees around the z-axis, resulting in a vector that points backward from the original position.","params":[],"returns":{"type":"Vector3f","description":"a rotated vector with a magnitude of -1 in the opposite direction of the original vector."}}},{"id":"17b2f29c-19ba-48e2-83fd-263cb2d27924","ancestors":[],"type":"function","name":"getUp","location":{"offset":"\t","indent":1,"insert":171,"start":171},"returns":"Vector3f","params":[],"code":"public Vector3f getUp() {\n\t\treturn new Vector3f(0, 1, 0).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates a `Vector3f` instance by 90 degrees around the z-axis, resulting in a vector pointing upwards from the original position.","params":[],"returns":{"type":"Vector3f","description":"a rotated vector pointing upwards."}}},{"id":"9e265e84-80e2-4cae-8f84-11c2ea0bc53b","ancestors":[],"type":"function","name":"getDown","location":{"offset":"\t","indent":1,"insert":175,"start":175},"returns":"Vector3f","params":[],"code":"public Vector3f getDown() {\n\t\treturn new Vector3f(0, -1, 0).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates a `Vector3f` instance by 90 degrees around the x-axis, resulting in a new vector pointing downward from the original position.","params":[],"returns":{"type":"Vector3f","description":"a rotated version of the original vector, pointing downward."}}},{"id":"97489ddb-905a-40ed-9344-206378016497","ancestors":[],"type":"function","name":"getRight","location":{"offset":"\t","indent":1,"insert":179,"start":179},"returns":"Vector3f","params":[],"code":"public Vector3f getRight() {\n\t\treturn new Vector3f(1, 0, 0).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates a `Vector3f` instance by 90 degrees to the right, resulting in a new vector that points in the right direction.","params":[],"returns":{"type":"Vector3f","description":"a rotated vector representing the right component of the object."}}},{"id":"4bbbe2bf-bbfc-41fb-91ed-9c2907327d01","ancestors":[],"type":"function","name":"getLeft","location":{"offset":"\t","indent":1,"insert":183,"start":183},"returns":"Vector3f","params":[],"code":"public Vector3f getLeft() {\n\t\treturn new Vector3f(-1, 0, 0).rotate(this);\n\t}","skip":false,"length":3,"comment":{"description":"rotates a `Vector3f` instance by 90 degrees to the left, resulting in a new vector that points in the opposite direction from the original vector's start position.","params":[],"returns":{"type":"Vector3f","description":"a rotated vector with a magnitude of -1 and an angle of 90 degrees relative to the original vector."}}},{"id":"034ffa4f-18c2-4ac9-a5e0-821f9e990657","ancestors":[],"type":"function","name":"set","location":{"offset":"\t","indent":1,"insert":187,"start":187},"returns":"Quaternion","params":[{"name":"x","type":"float"},{"name":"y","type":"float"},{"name":"z","type":"float"},{"name":"w","type":"float"}],"code":"public Quaternion set(float x, float y, float z, float w) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\t\treturn this;\n\t}","skip":false,"length":7,"comment":{"description":"updates the instance variables `x`, `y`, `z`, and `w` of a `Quaternion` object with the provided values, and returns the modified object.","params":[{"name":"x","type":"float","description":"3D position of the quaternion in the x-axis direction."},{"name":"y","type":"float","description":"2D projection of the quaternion along the x-axis, which is used to modulate the overall orientation of the quaternion."},{"name":"z","type":"float","description":"3D position of the quaternion in the x, y, and z axes."},{"name":"w","type":"float","description":"4th component of the quaternion, which is used to specify the orientation of the quaternion in 3D space."}],"returns":{"type":"Quaternion","description":"a reference to the modified quaternion object."}}},{"id":"2546a8c3-68e0-431a-a23f-a7dd9369f09e","ancestors":[],"type":"function","name":"set","location":{"offset":"\t","indent":1,"insert":224,"start":224},"returns":"Quaternion","params":[{"name":"r","type":"Quaternion"}],"code":"public Quaternion set(Quaternion r) {\n\t\tset(r.getX(), r.getY(), r.getZ(), r.getW());\n\t\treturn this;\n\t}","skip":false,"length":4,"comment":{"description":"sets the values of a quaternion's components to those of another quaternion object.","params":[{"name":"r","type":"Quaternion","description":"4-dimensional vector that contains the new values for the quaternion's coordinates, which are then assigned to the corresponding fields of the quaternion object."}],"returns":{"type":"Quaternion","description":"a reference to the same `Quaternion` object."}}},{"id":"8ba4f25c-103e-4c9c-96db-0c66a8e9ee47","ancestors":[],"type":"function","name":"getX","location":{"offset":"\t","indent":1,"insert":229,"start":229},"returns":"float","params":[],"code":"public float getX() {\n\t\treturn x;\n\t}","skip":false,"length":3,"comment":{"description":"returns the value of the `x` field.","params":[],"returns":{"type":"float","description":"the value of `x`, a floating-point number representing the horizontal position of an object."}}},{"id":"20a5b153-6dce-482d-8df1-0506d7355e4b","ancestors":[],"type":"function","name":"setX","location":{"offset":"\t","indent":1,"insert":233,"start":233},"returns":false,"params":[{"name":"x","type":"float"}],"code":"public void setX(float x) {\n\t\tthis.x = x;\n\t}","skip":false,"length":3,"comment":{"description":"sets the value of the `x` field of the object to which it belongs.","params":[{"name":"x","type":"float","description":"float value that is assigned to the `x` field of the object instance being passed to the function, effectively setting the value of the `x` field to the provided value."}],"returns":null}},{"id":"559d1bff-53a3-430f-9cd1-7ceae3c453b7","ancestors":[],"type":"function","name":"getY","location":{"offset":"\t","indent":1,"insert":237,"start":237},"returns":"float","params":[],"code":"public float getY() {\n\t\treturn y;\n\t}","skip":false,"length":3,"comment":{"description":"retrieves the value of the `y` field.","params":[],"returns":{"type":"float","description":"the value of the `y` field, which is a floating-point number."}}},{"id":"967cc205-01ee-4bf7-81f9-08493efa696f","ancestors":[],"type":"function","name":"setY","location":{"offset":"\t","indent":1,"insert":241,"start":241},"returns":false,"params":[{"name":"y","type":"float"}],"code":"public void setY(float y) {\n\t\tthis.y = y;\n\t}","skip":false,"length":3,"comment":{"description":"sets the value of the object's `y` field to the input parameter.","params":[{"name":"y","type":"float","description":"2D coordinate of the point that the function is modifying, specifically its Y-coordinate."}],"returns":null}},{"id":"6bacb90a-22f0-4c06-8cc6-473497cc1f88","ancestors":[],"type":"function","name":"getZ","location":{"offset":"\t","indent":1,"insert":245,"start":245},"returns":"float","params":[],"code":"public float getZ() {\n\t\treturn z;\n\t}","skip":false,"length":3,"comment":{"description":"retrieves and returns the value of the `z` field.","params":[],"returns":{"type":"float","description":"a `float` value representing the z-coordinate of a point."}}},{"id":"9135fb85-c173-4474-abf3-e8df6dcd6dcf","ancestors":[],"type":"function","name":"setZ","location":{"offset":"\t","indent":1,"insert":249,"start":249},"returns":false,"params":[{"name":"z","type":"float"}],"code":"public void setZ(float z) {\n\t\tthis.z = z;\n\t}","skip":false,"length":3,"comment":{"description":"sets the value of a class instance field named 'z' to the provided float value.","params":[{"name":"z","type":"float","description":"3D position of an object in space, which is assigned directly to the `z` field of the `this` instance."}],"returns":null}},{"id":"a927a236-7151-498e-bd79-c48e0eb9391b","ancestors":[],"type":"function","name":"getW","location":{"offset":"\t","indent":1,"insert":253,"start":253},"returns":"float","params":[],"code":"public float getW() {\n\t\treturn w;\n\t}","skip":false,"length":3,"comment":{"description":"retrieves the value of `w`, a float variable, and returns it.","params":[],"returns":{"type":"float","description":"the value of `w`, which is a float representing the width of the code."}}},{"id":"2234a17c-9720-4257-8440-2f9b2223db47","ancestors":[],"type":"function","name":"setW","location":{"offset":"\t","indent":1,"insert":257,"start":257},"returns":false,"params":[{"name":"w","type":"float"}],"code":"public void setW(float w) {\n\t\tthis.w = w;\n\t}","skip":false,"length":3,"comment":{"description":"sets the instance field `w` to the provided float value.","params":[{"name":"w","type":"float","description":"4th coordinate of the point being modified within the class, and its value is assigned to the `w` field of the class."}],"returns":null}},{"id":"0f4b3497-798a-4dd0-a7bc-c1675176a42e","ancestors":[],"type":"function","name":"equals","location":{"offset":"\t","indent":1,"insert":261,"start":261},"returns":"boolean","params":[{"name":"r","type":"Quaternion"}],"code":"public boolean equals(Quaternion r) {\n\t\treturn x == r.getX() && y == r.getY() && z == r.getZ() && w == r.getW();\n\t}","skip":false,"length":3,"comment":{"description":"compares a Quaternion object with another Quaternion object by checking the values of its x, y, z, and w components.","params":[{"name":"r","type":"Quaternion","description":"4D quaternion to be compared with the current quaternion for equality checking."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the provided quaternion is equal to the current quaternion."}}}]}}}