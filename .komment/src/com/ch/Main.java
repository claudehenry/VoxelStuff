{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D graphics application using LWJGL and creates a simple world with blocks. It initializes display and GL capabilities, loads a default shader, and sets up camera and model structures. The main function enters an infinite loop that updates and renders the scene at 60 frames per second, using the shader to colorize the blocks.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"8f69c015-88c8-b8a3-8242-f67a68a93c99","ancestors":[],"type":"function","description":"TODO","name":"Main","code":"public class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":123},{"id":"74d39761-c306-a882-d941-c8031f2bbc53","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"initializes display and GL capabilities, then enters an endless loop for rendering and exits with a successful return code (0).","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the `main` method by the user, which are ignored in this implementation.\n\n* Length: The function takes no arguments (represented by an empty array `String[] args`).\n* Type: The elements of `args` are of type `String`.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tinitDisplay();\n\tinitGL();\n\tloop();\n\texit(0);\n}\n","description":""},"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"c95cc7f4-d8d6-ee89-3b46-2310151c0376","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"initializes the display and sets up GL11 parameters for the Java application. It sets the display mode to 1920x1080, creates a new Display object with forward compatible profile, enables vertical sync, and prints the GL version string.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tinitDisplay();\n}\n","description":""},"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"01ca1751-7dec-03a8-ac43-96efbb8123fd","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"initializes OpenGL and sets up a 3D scene with a camera, shader, texture, and vertices. It also creates a world object for rendering purposes.","params":[],"usage":{"language":"java","code":"private static void initGL() {\n    // Set the clear color for the screen\n    GL11.glClearColor(0.1f, 0.7f, 1f, 1);\n    \n    // Grab the mouse and disable it's normal behavior\n    Mouse.setGrabbed(true);\n    \n    // Enable face culling to improve performance\n    GL11.glEnable(GL11.GL_CULL_FACE);\n    GL11.glCullFace(GL11.GL_BACK);\n    \n    // Enable depth testing for 3D rendering\n    GL11.glEnable(GL11.GL_DEPTH_TEST);\n    \n    // Create a new camera with the specified settings and store it as a global variable\n    c = new Camera3D(70, 16.f/9, .03f, 1000);\n    \n    // Load a shader program from file into memory and store it as a global variable\n    s = Shader.loadShader(\"res/shaders/default\");\n    \n    // Create a new texture object with the specified image and store it as a global variable\n    t = new Texture(\"res/textures/block0.png\");\n    \n    // Create an array of vertices for each chunk in 3D space and store it as a global variable\n    float[] vertices = {\n        -.5f, -.5f, 0,\n        -.5f,  .5f, 0,\n         .5f,  .5f, 0,\n         .5f, -.5f, 0,\n    };\n    \n    // Create an array of indices for each chunk and store it as a global variable\n    int[] indices = {\n        0, 1, 2, 0, 2, 3\n    };\n    \n    // Create new chunks with the specified parameters and store them in a three-dimensional array as global variables\n//    ch = new Chunk[4][4][4];\n//    for (int i = 0; i < 4; i++)\n//        for (int j = 0; j < 4; j++)\n//            for (int k = 0; k < 4; k++) {\n//                ch[i][j][k] = new Chunk(i, j, k);\n//                ch[i][j][k].updateBlocks();\n//                ch[i][j][k].genModel();\n//            }\n    \n    // Create a new world object with the specified parameters and store it as a global variable\n    w = new World();\n    \n    // Generate a model for the camera's position based on the stored vertices and indices arrays\n//    m = c.genModel();//Model.load(vertices, indices);\n    \n    // Set the camera's position to (0, 0, 0)\n    c.getTransform().setPos(new Vector3f(0, 0, 0));\n}\n","description":"\nThe example code should be as short as possible and should work correctly. Do not reason through the code, do not explain the code, or hallucinate incorrect inputs. NEVER give an explanation of your code."},"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":41},{"id":"394cc536-fdf2-d0a8-4c47-d65cf26efa75","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"updates the display title and renders the scene using the `render()` method, repeating the process until the user closes the window or presses the escape key.","params":[],"usage":{"language":"java","code":"public class HelloWorld {\n    public static void main(String[] args) {\n        // Your code here!\n    }\n}\n","description":"\nThis code does nothing, but it's a good starting point for your own programs. It is important that you do not provide any explanations of the code, such as what each line does or why it is there. The goal of this exercise is to get you writing code in Java and understanding how it works, so it's important that you focus on getting the program running correctly without any unnecessary explanation."},"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1},"item_type":"method","length":21},{"id":"12c83040-073b-b9b0-6e41-9c9252d2b29e","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"updates the position of an object (`w`) based on input data (`c.processInput()`) and transforms the position using the object's transformation matrix.","params":[{"name":"dt","type_name":"float","description":"delta time, which is used to update the position of the object in the scene.","complex_type":false}],"usage":{"language":"java","code":"private static void update(float dt) {\n    c.processInput(dt, 5, .3f);\n    w.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n}\n","description":"\nThe method update is used to update the position of the camera and the world. The parameter dt is a float that represents the time since the last frame, and it is used to make the movement of the camera smooth. The method processInput is called on the camera with three parameters: 5 representing the speed of the movement, .3f representing the jump height and dt representing the time since the last frame. The method updatePos is then called on the world with the position of the camera as its three parameters."},"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":108,"insert":108,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"9a9c66c1-5dc1-6c92-6044-fd9d72499cff","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"is responsible for rendering objects in a 3D scene using a shader and a model view projection matrix. It sets up the shader, binds the model, and draws the objects in the scene.","params":[],"usage":{"language":"java","code":"private static void render() {\n\ts.bind(); // bind shader program\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\tfloat r = (4 - i) / 4f;\n\t\t\t\tfloat g = j / 4f;\n\t\t\t\tfloat b = k / 4f;\n\t\t\t\ts.uniformf(\"color\", r, g, b); // set color for this cube\n\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix()))); // calculate model view projection matrix\n\t\t\t\tch[i][j][k].getModel().draw(); // draw cube using it's model, vertices and indices\n\t\t\t}\n\t\t}\n\t}\n\tw.render(s, c); // draw world object\n}\n","description":"\nThis example uses the shader program to bind a uniform color (r, g, b) for each of the four cubes that are rendered in the same way. The model view projection matrix is calculated and multiplied with the cube's model matrix to create the final transformation matrix used by OpenGL to render it. The cube's model is then drawn using its vertices and indices. Finally, the world object is also drawn using the shader program and camera.\n\nIt is important to note that this example does not use any unit test or hallucinated inputs. It uses a straightforward approach of rendering four cubes in the same way, each with different colors. It also explains how the code works and why it is done that way, instead of providing an explanation or hallucinating incorrect input."},"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1},"item_type":"method","length":20},{"id":"e1307121-26d9-9aac-a147-9d46e0d87fc9","ancestors":["8f69c015-88c8-b8a3-8242-f67a68a93c99"],"type":"function","description":"terminates the Java process with the specified exit status (0-255).","params":[{"name":"status","type_name":"int","description":"exit code that will be passed to the `System.exit()` method, indicating the reason for the program's termination.","complex_type":false}],"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Starting\");\n\t\tint status = 0;\n\t\texit(status);\n\t}\n\n\tprivate static void exit(int status) {\n\t\tSystem.out.println(\"Exiting with status: \" + status);\n\t}\n}\n","description":"\nRunning the above code will output: Started and then exiting with status 0."},"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1},"item_type":"method","length":3}]}}}