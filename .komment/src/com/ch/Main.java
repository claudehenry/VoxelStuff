{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D rendering program that generates and renders a 3D scene using OpenGL. The program initializes displays, sets up the camera, loads a shader, and creates a 3D world. It then enters a loop where it updates and renders the scene at a specified frame rate.","items":[{"id":"8eabd24d-480a-f49e-904c-fcfd2439eed8","ancestors":[],"description":"False","name":"Main","code":"public class Main {\n\n\t/** */\n\tpublic static void main(String[] args) {\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\n\t/** */\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/** */\n\tprivate static void initGL() {\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\n\t/** */\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n /**\n  * This function calls the `System.exit()` method with the given `status` parameter\n  * to exit the program with that status.\n  * \n  * @param status The `status` input parameter passes the exit code to the operating\n  * system when exiting the program. It determines the exit status that will be returned\n  * to the operating system and any parent processes. In most cases a value of zero\n  * (0) indicates success and a non-zero value indicates an error or failure.\n  */\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":134},{"id":"78af2b39-bfe6-049a-014d-054d417aefee","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"initializes display and GL context, then enters an infinite loop for rendering and exits with a success code.","params":[{"name":"args","type_name":"String[]","description":"1 or more command-line arguments passed to the program, which are then ignored in this implementation of the `main` method.\n\n* Length: 0 (no arguments passed)\n* Elements: [] (no arguments passed)\n* Class type: null (no class type information available)","complex_type":true}],"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t}\n\tprivate static void initDisplay() {\n\t\tSystem.out.println(\"Initializing display\");\n\t}\n\tprivate static void initGL() {\n\t\tSystem.out.println(\"Initializing OpenGL\");\n\t}\n\tprivate static void loop() {\n\t\tSystem.out.println(\"Looping\");\n\t}\n\tprivate static void exit(int status) {\n\t\tSystem.out.println(\"Exiting with status \" + status);\n\t}\n}\n","description":""},"name":"main","code":"public static void main(String[] args) {\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"73c8fab0-9920-f790-964d-2c9274b2957b","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"initializes the display settings for a Java application, setting the screen resolution and VSync enabled to true, and printing the version of GL11.","params":[],"usage":{"language":"java","code":"// Initialize the display\ninitDisplay();\n\n// Setup the OpenGL context\nglMatrixMode(GL_PROJECTION);\nglLoadIdentity();\ngluPerspective(45.0f, (float) Display.getWidth() / (float) Display.getHeight(), 0.1f, 100.0f);\nglMatrixMode(GL_MODELVIEW);\n","description":"\nThis code initializes the display and sets up the OpenGL context. It is an example of how initDisplay would be used in practice."},"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":34,"insert":34,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"84650527-8a54-c488-4348-c53b57633359","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"initializes the GL context for a 3D game, setting up the camera, shader, and texture, as well as defining the geometry of the scene.","params":[],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        GL gl = new GL();\n        GLU glu = new GLU();\n        gl.glClearColor(0.1f, 0.7f, 1f, 1);\n        glu.glOrtho2D(-5, 5, -5, 5);\n    }\n}\n","description":"\nThis method initializes the GL environment with a red background and sets up a viewport from (-5,-5) to (5,5). This is an example of how this method can be used. However, there are many ways that the code could be modified depending on the specific requirements and goals of the application."},"name":"initGL","code":"private static void initGL() {\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":46,"insert":46,"offset":" ","indent":1},"item_type":"method","length":40},{"id":"011ba71f-a82a-1e9d-144a-166cb054711f","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"initalizes a timer, enters an infinite loop, and updates the display title and FPS every iteration. It also renders the game scene and clears the color and depth buffers before checking for closing or escaping.","params":[],"usage":{"language":"java","code":"public class MyGameClass {\n    // ...\n    private static void loop() {\n        while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n            Timer.update();\n            Display.setTitle(\"\" + Timer.getFPS() + \"   \" + ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n            update(Timer.getDelta());\n            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n            render();\n            Display.update();\n        }\n    }\n    // ...\n}\n","description":"\nThis example is only one way to use the method loop, and it's not always the best option. But this is an example of how you can call the method."},"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":88,"insert":88,"offset":" ","indent":1},"item_type":"method","length":21},{"id":"3f103f73-1054-9ea9-814f-585aae14b718","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"updates the position of an entity (w) based on input (c.processInput()) and the entity's transformation matrix.","params":[{"name":"dt","type_name":"float","description":"time step for which the code is being executed, and it is used to update the position of the object in the scene.","complex_type":false}],"usage":{"language":"java","code":"float dt = 0.1f; // delta time in seconds\n\nupdate(dt);\n","description":"\nThe `processInput` method processes the keyboard inputs for the camera and updates its position based on these inputs, then the `w.updatePos` is called to update the position of the world with respect to the new camera position. The `dt` input parameter is used as a time step to calculate the speed at which the camera moves.\n\nThis code should work correctly without any issues."},"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":110,"insert":110,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"cabbd50e-8f97-f3b9-4a4b-f4be930f1d4d","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"renders a 3D model using a specific shader and matrices. It first enables and binds the necessary uniforms and matrices, then draws the model using the `draw` method. Finally, it disables the uniforms and matrices again.","params":[],"usage":{"language":"java","code":"private static void render() {\n    s.bind();\n    w.render(s, c);\n}\n","description":"\nIn this example, the `render()` method binds the `Shader` object `s` to the current OpenGL context using the `glUseProgram()` function from the OpenGL API. It then uses the `World` object `w` and the `Camera` object `c` as inputs to call the `render()` method on that `World` object, passing in both objects along with the currently bound `Shader` object. The result of this is that the `World` object `w` will render itself using the `Shader` object `s`."},"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":115,"insert":115,"offset":" ","indent":1},"item_type":"method","length":20},{"id":"3e3d6940-6f48-a0a7-0b46-d76daa576fee","ancestors":["8eabd24d-480a-f49e-904c-fcfd2439eed8"],"description":"terminates the current Java process, passing the specified status code to the operating system's exit mechanism.","params":[{"name":"status","type_name":"int","description":"exit code that System.exit should use when exiting the program.","complex_type":false}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    //do something\n    exit(0);\n}\n","description":""},"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":145,"insert":145,"offset":" ","indent":1},"item_type":"method","length":3}]}}}