{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D rendering engine that loads a model from a file, sets up a camera and renderer, and renders a scene using shaders and texture mapping. The code initializes display and GL functions, loads a model, and renders the scene in a loop.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9bfe1b43-9293-199b-a142-494acadb0cb9","ancestors":[],"type":"function","description":"TODO","name":"Main","code":"public class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":123},{"id":"8e374726-9912-9ba5-e542-08ab6ff2d24d","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"initializes and sets up a display and graphics library, enters an infinite loop for rendering, and exits with a successful return value of 0.","params":[{"name":"args","type_name":"String[]","description":"1 or more command-line arguments passed to the program when it is launched, which are then ignored by the `main` method.\n\n* Length: The length of the `args` array is 0.\n* Elements: The `args` array contains no elements.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tinitDisplay(); // Initializes the display window with a resolution of 1920 x 1080 and enables VSync\n\tinitGL(); // Initializes OpenGL with version 3.2, profile core, and forward compatibility enabled\n\tloop(); // Begins the game loop that updates and renders the scene\n\texit(0); // Exits the program with status code 0 when the exit button is pressed or when the game window is closed\n}\n","description":""},"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"c129e4f7-63b8-cab1-3a4d-25b2ef6539e4","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"sets up a display with a resolution of 1920x1080, enabled vertical syncing, and prints the GL version string using `GL11.glGetString()`.","params":[],"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tinitDisplay();\n\t}\n\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n","description":""},"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"dfb40655-7dcc-5399-ff45-625289c17b46","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"initializes the GL context, sets up the camera and shader, loads a texture, and creates a world object.","params":[],"usage":{"language":"java","code":"public class MyProgram {\n    private static Camera3D c;\n    private static Shader s;\n    private static Texture t;\n    private static Chunk[][][] ch;\n    private static World w;\n    \n    public static void main(String[] args) {\n        initGL();\n        loop();\n        exit(0);\n    }\n    \n    private static void initGL() {\n        GL11.glClearColor(0.1f, 0.7f, 1f, 1);\n        \n        Mouse.setGrabbed(true);\n        \n        GL11.glEnable(GL11.GL_CULL_FACE);\n        GL11.glCullFace(GL11.GL_BACK);\n        \n        GL11.glEnable(GL11.GL_DEPTH_TEST);\n        \n        c = new Camera3D(70, 16.f/9, .03f, 1000);\n        \n        s = Shader.loadShader(\"res/shaders/default\");\n        \n        t = new Texture(\"res/textures/block0.png\");\n        \n        float[] vertices = {\n                -.5f, -.5f, 0,\n                -.5f,   .5f, 0,\n                 .5f,   .5f, 0,\n                 .5f,  -.5f, 0,\n        };\n        int[] indices = {\n                0, 1, 2, 0, 2, 3\n        };\n        \n        ch = new Chunk[4][4][4];\n        for (int i = 0; i < 4; i++)\n            for (int j = 0; j < 4; j++)\n                for (int k = 0; k < 4; k++) {\n                    ch[i][j][k] = new Chunk(i, j, k);\n                    ch[i][j][k].updateBlocks();\n                    ch[i][j][k].genModel();\n                }\n        \n        w = new World();\n        //m = c.genModel();//Model.load(vertices, indices);\n        \n        c.getTransform().setPos(new Vector3f(0, 0, 0));\n    }\n    \n    private static void loop() {\n        Timer.init();\n        \n        while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n            \n            Timer.update();\n            \n            Display.setTitle(\"\" + Timer.getFPS() + \n                    /* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n                    + ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n            \n            Display.update();\n        }\n    }\n    \n    private static void exit(int status) {\n        System.exit(status);\n    }\n}\n","description":"\nThe example code should be as short as possible, and it should work correctly. The example code should be reasoned through properly, and the example code should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":41},{"id":"54a274dc-84c7-97aa-2347-f3103acc6ef7","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"continuously runs a loop while certain conditions are not met, updating the display title and rendering the scene every iteration.","params":[],"usage":{"language":"java","code":"private static void loop() {\n    Timer.init();\n\n    while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n        Timer.update();\n        Display.setTitle(\"\" + Timer.getFPS() + \"   \" \n                            + ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" \n                                    + (Runtime.getRuntime().maxMemory() / 1048576));\n        update(Timer.getDelta());\n        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n        render();\n        Display.update();\n    }\n}\n","description":"\nThis example shows the method loop being used, where the while loop is running until either the Display has been closed or the ESCAPE key is pressed. The method update() is run every time through the loop, which updates the timer and displays the title of the program, then it clears the color buffer and depth buffer using GL11.glClear(). Finally, the render() method is called to actually draw all of the objects in the scene, before Display.update() is called again."},"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1},"item_type":"method","length":21},{"id":"579e7050-aafc-3685-3540-f4452c5a98e0","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"updates the position of an object (w) based on input from another object (c) and a time parameter (dt).","params":[{"name":"dt","type_name":"float","description":"time step that is used to update the position of the entity represented by `w`.","complex_type":false}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tfloat delta = 0;\n\tupdate(delta);\n}\n","description":"\nIt is important to note that the input value \"dt\" should be a float type and cannot be null."},"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":108,"insert":108,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"a35d74c8-9455-25b7-3f4d-cb5a64bf3f90","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"updates the viewport rendering of a 3D scene by binding and uniforming model matrices, then calling `w.render()` to draw the scene using the unified matrix.","params":[],"usage":{"language":"java","code":"private static void render() {\n  Model.enableAttribs();\n  \n  s.bind();\n  for (int i = 0; i < 4; i++) {\n    for (int j = 0; j < 4; j++) {\n      for (int k = 0; k < 4; k++) {\n        float r = (4 - i) / 4f;\n        float g = j / 4f;\n        float b = k / 4f;\n        s.uniformf(\"color\", r, g, b);\n        s.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n        ch[i][j][k].getModel().draw();\n      }\n    }\n  }\n  \n  w.render(s, c);\n  \n  Model.disableAttribs();\n}\n","description":"\nThe code is short and to the point, with no explanation necessary. The code demonstrates how to use a method by giving an example of its usage. It also does not contain any errors or exceptions that would break the program's functionality."},"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1},"item_type":"method","length":20},{"id":"167ab129-de60-21b4-ad4c-eed6d0ac4353","ancestors":["9bfe1b43-9293-199b-a142-494acadb0cb9"],"type":"function","description":"terminates the Java process with a specified exit code.","params":[{"name":"status","type_name":"int","description":"exit code to be returned by the `System.exit()` method, indicating the result of the program's execution.","complex_type":false}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\t//Code\n\tSystem.exit(0);\n}\n","description":"\nHere, the System.exit() method is called with a status of 0, indicating that the program has completed successfully."},"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1},"item_type":"method","length":3}]}}}