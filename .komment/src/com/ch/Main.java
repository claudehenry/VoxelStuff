{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D graphics program that renders a blocky world from a camera's perspective. It uses LWJGL for input and OpenGL for rendering. The program initializes display and GL settings, loads a default shader, and creates a camera and a world object. It then enters an infinite loop where it updates the camera position based on user input and renders the world from the updated position.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9","ancestors":[],"type":"function","description":"in this code example is responsible for setting up and rendering a 3D scene using the OpenGL API and the Java programming language. It initializes the OpenGL context, sets up the camera and lighting, and loads a texture and a shader. It also defines a World object and a Chunk class to represent the 3D environment. The main loop renders the scene and updates the position of the camera using input from the user.","name":"Main","code":"public class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0,"comment":null},"item_type":"class","length":123},{"id":"6447e45e-8977-f185-1d4b-950299a23882","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"initializes display and GL contexts, enters an infinite loop to render graphics, and then exits with a return value of 0.","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the program by the user, which are ignored in this case and treated as an empty array.\n\n* Length: 0 (a single null argument)\n* Elements: null (no arguments provided directly to the function)","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"c3f1d101-2bb7-31b2-364a-4a47b900b975","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"sets up a display mode with a resolution of 1920x1080, creates a GL context with forward compatibility and VSync enabled, and prints the current GL version.","params":[],"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1,"comment":null},"item_type":"method","length":10},{"id":"468f79d6-2ce0-bb9a-2f48-8eccb7de7078","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"initializes and sets up various GL elements, including clear color, grabbing mouse, enabling cull face and depth test, loading a shader, creating a texture, and defining a world object.","params":[],"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1,"comment":null},"item_type":"method","length":41},{"id":"0c28a95a-6e95-3ca7-2540-a31dd5bfccde","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"updates and displays various system metrics, including FPS, memory usage, and GPU rendering progress, using `Timer`, `Display`, `Keyboard`, and `GL11` classes.","params":[],"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1,"comment":null},"item_type":"method","length":21},{"id":"81790899-176d-55b0-3e42-2c67a8c2666d","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"updates the position of an object (`w`) based on input and transformation.","params":[{"name":"dt","type_name":"float","description":"time step for which the update operation is being performed, and it is used to compute the position of the entity represented by the `w` variable.","complex_type":false}],"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":108,"insert":108,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"1a752b64-3c1f-4d94-f443-acf3a57980ac","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"renders a 3D scene using a rendering engine. It sets up the rendering context, binds a model, and applies a transformation matrix to the model before drawing it.","params":[],"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1,"comment":null},"item_type":"method","length":20},{"id":"3efaee0e-f08b-55a5-444e-f832e2c7646d","ancestors":["0c27f9a2-7fa4-e8ac-0b45-cdcd659621e9"],"type":"function","description":"terminates the Java process with the specified exit code, which is passed as an argument.","params":[{"name":"status","type_name":"int","description":"value to be passed as an argument to the `System.exit()` method, which terminates the Java program.","complex_type":false}],"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}