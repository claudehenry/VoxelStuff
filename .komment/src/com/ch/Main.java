{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D rendering program using LWJGL library. It sets up an initial display, loads a shader, and initializes various data structures for rendering 3D objects. The main loop iterates over time updates and rendering frames, updating input state and rendering the scene using the shader.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"c04d3c82-aeac-d99c-524e-0080c3ea8bd6","ancestors":[],"type":"function","description":"TODO","name":"Main","code":"public class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":123},{"id":"e5d65bc2-e7f2-4eaa-3f41-a745446d6401","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"initializes display and GL components, enters an infinite loop to handle user input and eventually exits with a return value of 0.","params":[{"name":"args","type_name":"String[]","description":"1 or more command-line arguments passed to the program when it is launched, which are then ignored by the `main` function.\n\n* Length: The length of the array is 0, indicating that no command-line arguments were provided when the program was executed.\n* Elements: The array contains no elements, as there are no command-line arguments to process.\n* Class: The element type of the array is `String`, indicating that each element in the array is a string value.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    initDisplay();\n    initGL();\n    loop();\n    exit(0);\n}\n","description":"\nThis program calls the methods defined in the Main class, starting with the initDisplay() method. This method sets up a display for LWJGL and then calls the initGL() method to initialize OpenGL. The loop() method is called repeatedly until the Display is closed or an escape key is pressed, at which point the exit(0) method terminates the program."},"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"87474905-c672-189c-3043-8905bf8b52a7","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"sets up a display mode and creates a Display object with the specified dimensions, VSync enabled, and prints the OpenGL version string to the console.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n  initDisplay();\n}\n","description":"\nThis code will create a display mode with the dimensions of 1920 x 1080 and enable VSync."},"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"7160c9bd-295f-6bbd-ba4b-267fab2ad9ec","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"initializes and sets up various GL settings and objects for a 3D graphics application. It loads a shader, creates a camera and texture, and initializes a world object.","params":[],"usage":{"language":"java","code":"public class Main {\n\tprivate static Camera3D c;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static World w;\n//\tprivate static Chunk[][][] ch;\n\t\n\tpublic static void main(String[] args) {\n\t\tDisplay.setTitle(\"ChunkRenderer\");\n\t\tinitGL();\n\t\tloop();\n\t}\n\t\n\tprivate static void initGL() {\n\t\t//Set up the GL canvas\n\t\tDisplay.create(new PixelFormat().withDepthBits(24));\n\t\tDisplay.setDisplayMode(new DisplayMode(1600, 800));\n\t\tDisplay.setVSyncEnabled(true);\n\t\t\n\t\t//Set up the camera for our scene\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\t//Load our shader from disk and set it to be the active shader\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\t//Load our texture from disk and set it as a texture on our shader\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\ts.setTexture(\"tex\", t);\n\t\t\n\t\t//Make sure our GL context is current\n\t\tDisplay.makeCurrent();\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\tMouse.setGrabbed(true);\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\tDisplay.update();\n\t\t\n\t}\n\t}\n}\n","description":""},"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":41},{"id":"3cb8130b-0db1-188f-234f-da7d36bf03d0","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"continuously runs a loop while certain conditions are not met, updating the display title and graphics buffer every iteration.","params":[],"usage":{"language":"java","code":"private static void loop() {\n    Timer.init();\n\n    while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n        Timer.update();\n        Display.setTitle(\"\" + Timer.getFPS() + \"   \" + ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n        update(Timer.getDelta());\n        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n        render();\n\n        Display.update();\n    }\n}\n","description":"\nThis code initializes the timer, then enters an infinite loop while the window is open and escape key is not pressed. The title of the window is updated to include the frame per second, and the maximum memory used in megabytes, then the update method is called with a delta time of the current frame. Then the render method is called after glClearing both color and depth buffer bits. Finally, the Display.update() function is called to update the window's graphics state."},"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1},"item_type":"method","length":21},{"id":"751b9aff-4803-52b6-c14a-92ea0840954d","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"updates an object's position based on input and transform values, using `processInput` to process input data and `updatePos` to update the object's position.","params":[{"name":"dt","type_name":"float","description":"time step or elapsed time since the last update, and it is used to calculate the position of the object in the scene.","complex_type":false}],"usage":{"language":"java","code":"private static void update(float dt) {\n\tc.processInput(dt, 5, .3f);\n}\n","description":"\nThis is a very simple example of the use of the method \"update\" and can be considered as an illustration of how it should be used. However, this code will not execute successfully as it only contains a single line with no arguments passed to the method. In order for this code to work correctly, additional arguments must be passed in at runtime to provide values for dt."},"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":108,"insert":108,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"df0d2606-ded1-1985-0b4e-7baa559ddc09","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"renders a 3D model using a shader and a camera view projection matrix. It sets up the shader's uniforms with the appropriate colors, then draws the model using the view projection matrix.","params":[],"usage":{"language":"java","code":"private static void render() {\n  s.bind();\n  w.render(s, c);\n}\n","description":"\nThis code assumes that a `World` class and a `Camera` class are both present in the code base. It also assumes that `Model` is an interface for handling OpenGL model objects. The `render()` method would be called periodically to draw the scene on the screen. This method binds the shader program (`s`) and calls the `render()` method of the world object with the camera object as a parameter. This will cause the scene to be drawn with the specified shader.\n\nThe code does not provide any explanation for what it is doing, or how it works. It simply assumes that the `World` class and `Camera` class are present in the code base, and that `Model` is an interface for OpenGL model objects. Therefore, this example would not be sufficient to demonstrate the method being used correctly.\n\nMoreover, this example does not show any of the important steps involved in using the render() method such as enabling vertex attributes, setting uniform values, or disabling vertex attributes. This makes it difficult for someone looking at this code to understand how to use the `render()` method correctly."},"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1},"item_type":"method","length":20},{"id":"2fc0c7c5-4f27-1a98-ab4c-83b81193d7c6","ancestors":["c04d3c82-aeac-d99c-524e-0080c3ea8bd6"],"type":"function","description":"terminates the Java application with the specified exit status, which can be any integer value between 0 and 2147483647.","params":[{"name":"status","type_name":"int","description":"0-based exit code to be returned by the `System.exit()` method, which terminates the current Java process.","complex_type":false}],"usage":{"language":"java","code":"public class Main {\n\tpublic static void main(String[] args) {\n\t\tint status = 0; // set the status variable to a value of 0 (zero) by default\n\t\t// do some code here, perhaps with error handling or other logic\n\t\tif (status != 0) {\n\t\t\t// if the status variable is not equal to zero (i.e., the program has encountered an error), exit with a non-zero status code\n\t\t\texit(1); // exit the program with a status code of one\n\t\t} else {\n\t\t\t// otherwise, exit normally\n\t\t\texit(0); // exit the program with a status code of zero (i.e., successful execution)\n\t\t}\n\t}\n}\n","description":""},"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1},"item_type":"method","length":3}]}}}