{"name":"Main.java","path":"src/com/ch/Main.java","content":{"structured":{"description":"A 3D graphics application using LWJGL library. It initializes display and OpenGL context, loads a shader, creates a camera and world objects, and renders a 3D scene using the shader. The code also handles input events and updates the camera position based on user input. Finally, it exits the program when the user presses the escape key.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D Pages: 1 -->\n<svg width=\"115pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 115.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"107,-19 0,-19 0,0 107,0 107,-19\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"100,-74 7,-74 7,-55 100,-55 100,-74\"/>\n<text text-anchor=\"middle\" x=\"53.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M53.5,-44.66C53.5,-35.93 53.5,-25.99 53.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"50,-44.75 53.5,-54.75 57,-44.75 50,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"f577e5e0-b3ea-7da6-6042-67f485231431","ancestors":[],"type":"function","description":"TODO","name":"Main","code":"public class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}\n\t\n\tprivate static Model m;\n\tprivate static Shader s;\n\tprivate static Texture t;\n\tprivate static Camera3D c;\n//\tprivate static Chunk[][][] ch;\n\tprivate static World w;\n\t\n\tprivate static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}\n\t\n\tprivate static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}\n\n\tprivate static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}\n\t\n\tprivate static void exit(int status) {\n\t\tSystem.exit(status);\n\t}\n}","location":{"start":15,"insert":15,"offset":" ","indent":0},"item_type":"class","length":123},{"id":"1ddafb1d-90d5-588b-2e4a-8549dd48e9a9","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"initializes display and GL resources, enters an event loop, and exits with a return value of 0.","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the program, which are ignored in this case.\n\n* `args`: An array of strings containing command-line arguments passed to the program.\n* Length: The number of elements in the `args` array, which is equal to the number of command-line arguments passed to the program.\n* Elements: Each element in the `args` array represents a command-line argument passed to the program.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tinitDisplay();\n\tinitGL();\n\tloop();\n\texit(0);\n}\n","description":"\nThis method would call the methods `initDisplay()`, `initGL()`, and `loop()` to display a 3D scene in a window. The method then exits with an exit code of 0."},"name":"main","code":"public static void main(String[] args) {\n\t\t\n\t\tinitDisplay();\n\t\tinitGL();\n\t\tloop();\n\t\texit(0);\n\t\t\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"de6d26d8-a375-a6aa-9144-941d152d3504","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"sets up a display mode with a resolution of 1920x1080, creates a GL context with forward compatibility and VSync enabled, and prints the current GL version using `GL11.glGetString()`.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n    initDisplay();\n}\n","description":"\nThis code snippet calls the method `initDisplay()` which initializes LWJGL display mode and creates a Display object with the specified pixel format and attributes. Additionally, it enables vertical synchronization (VSync) to ensure that rendering is synchronized with the monitor's refresh rate, and it prints the version of OpenGL supported by the context to the console."},"name":"initDisplay","code":"private static void initDisplay() {\n\t\ttry {\n\t\t\tDisplay.setDisplayMode(new DisplayMode(1920, 1080));\n\t\t\tDisplay.create(new PixelFormat(), new ContextAttribs(3, 2).withForwardCompatible(true).withProfileCore(true));\n\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\tSystem.out.println(GL11.glGetString(GL11.GL_VERSION));\n\t\t} catch (LWJGLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"115bd617-c896-ce8f-f542-2a5612dda4b9","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"sets up the basic layout for a 3D graphics application, including enabling culling and depth testing, loading a shader, creating a texture, and defining a camera position.","params":[],"usage":{"language":"java","code":"private static void initGL() {\n    GL11.glClearColor(0.1f, 0.7f, 1f, 1);\n    \n    Mouse.setGrabbed(true);\n    \n    GL11.glEnable(GL11.GL_CULL_FACE);\n    GL11.glCullFace(GL11.GL_BACK);\n    \n    GL11.glEnable(GL11.GL_DEPTH_TEST);\n    \n    c = new Camera3D(70, 16.f/9, .03f, 1000);\n    \n    s = Shader.loadShader(\"res/shaders/default\");\n    \n    t = new Texture(\"res/textures/block0.png\");\n    \n    float[] vertices = {\n        -.5f, -.5f, 0,\n        -.5f,   .5f, 0,\n         .5f,   .5f, 0,\n         .5f, -.5f, 0,\n        \n    };\n    int[] indices = {\n            0, 1, 2, 0, 2, 3\n    };\n//    ch = new Chunk[4][4][4];\n//    for (int i = 0; i < 4; i++)\n//        for (int j = 0; j < 4; j++)\n//            for (int k = 0; k < 4; k++) {\n//                ch[i][j][k] = new Chunk(i, j, k);\n//                ch[i][j][k].updateBlocks();\n//                ch[i][j][k].genModel();\n//            }\n    w = new World();\n    //m = c.genModel();//Model.load(vertices, indices);\n    \n    c.getTransform().setPos(new Vector3f(0, 0, 0));\n    \n}\n","description":"\nThis example is very short and simple, but it has all the necessary elements to initialize a basic game engine.   The code sets the clear color to light blue, grabs the mouse, enables face culling and depth testing, and creates a camera and a shader object.  It then creates a texture object for texturing blocks with the texture \"res/textures/block0.png\".   \n\nThe next section of code creates a world object that will keep track of all the chunks in the game world.   It also generates a model object to be used later, but it is not used yet because it is commented out.  Lastly, it sets the initial position of the camera to the origin."},"name":"initGL","code":"private static void initGL() {\n\t\t\n\t\tGL11.glClearColor(0.1f, 0.7f, 1f, 1);\n\t\t\n\t\tMouse.setGrabbed(true);\n\t\t\n\t\tGL11.glEnable(GL11.GL_CULL_FACE);\n\t\tGL11.glCullFace(GL11.GL_BACK);\n\t\t\n\t\tGL11.glEnable(GL11.GL_DEPTH_TEST);\n\t\t\n\t\tc = new Camera3D(70, 16.f/9, .03f, 1000);\n\t\t\n\t\ts = Shader.loadShader(\"res/shaders/default\");\n\t\t\n\t\tt = new Texture(\"res/textures/block0.png\");\n\t\t\n\t\tfloat[] vertices = {\n\t\t\t-.5f, -.5f, 0,\n\t\t\t-.5f,  .5f, 0,\n\t\t\t .5f,  .5f, 0,\n\t\t\t .5f, -.5f, 0,\n\t\t\t\n\t\t};\n\t\tint[] indices = {\n\t\t\t\t0, 1, 2, 0, 2, 3\n\t\t};\n//\t\tch = new Chunk[4][4][4];\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tch[i][j][k] = new Chunk(i, j, k);\n//\t\t\t\t\tch[i][j][k].updateBlocks();\n//\t\t\t\t\tch[i][j][k].genModel();\n//\t\t\t\t}\n\t\tw = new World();\n\t\t//m = c.genModel();//Model.load(vertices, indices);\n\t\t\n\t\tc.getTransform().setPos(new Vector3f(0, 0, 0));\n\t\t\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":41},{"id":"b0da7f5b-ecd0-7186-2e4e-1b632673f612","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"executes a loop that updates and renders graphics, displays FPS information, and checks for closing or escape key presses.","params":[],"usage":{"language":"java","code":"private static void loop() {\n    Timer.init();\n    while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n        Timer.update();\n        Display.setTitle(\"\" + Timer.getFPS() + \"   \" \n            + ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n        update(Timer.getDelta());\n        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n        render();\n        Display.update();\n    }\n}\n","description":"\nThis loop method is a main method that runs the game and updates it. The method includes some basic input checking to exit if the escape key is pressed or the game window is closed. Additionally, the FPS (Frames Per Second) are updated every frame and the title of the display window is also updated. Finally, the render() and update() methods are called at each iteration of the loop.\nIn this example, the Timer class is initialized and then a while loop runs as long as neither the game window is closed nor the escape key is pressed. After updating the FPS, the display title, and clearing the screen and depth buffers, the render() and update() methods are called. This method runs indefinitely until either one of these events occurs."},"name":"loop","code":"private static void loop() {\n\t\t\n\t\tTimer.init();\n\t\t\n\t\twhile (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {\n\t\t\t\n\t\t\tTimer.update();\n\t\t\t\n\t\t\tDisplay.setTitle(\"\" + Timer.getFPS() + \n\t\t\t\t\t/* \"   \" + c.getTransform().getPos().toString() +*/ \"   \" \n\t\t\t\t\t+ ((Runtime.getRuntime().maxMemory() - Runtime.getRuntime().freeMemory()) / 1048576) + \" of \" + (Runtime.getRuntime().maxMemory() / 1048576));\n\t\t\t\n\t\t\tupdate(Timer.getDelta());\n\t\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\t\trender();\n\t\t\t\n\t\t\tDisplay.update();\n\t\t\t\n\t\t}\n\t\t\n\t}","location":{"start":86,"insert":86,"offset":" ","indent":1},"item_type":"method","length":21},{"id":"4fd799e3-6a78-699a-0742-81f559d14b55","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"updates an entity's position based on input and transform data, using `processInput` and `updatePos`.","params":[{"name":"dt","type_name":"float","description":"time step used for updating the position of the entity in the game world.","complex_type":false}],"usage":{"language":"java","code":"private static void update(float dt) {\n    c.processInput(dt, 5, .3f);\n}\n","description":"\nIn this example, the value of `dt` is a float variable representing the time delta between frames. The method updates the position of the player in the game world based on the input from the keyboard and mouse."},"name":"update","code":"private static void update(float dt) {\n\t\tc.processInput(dt, 5, .3f);\n\t\tw.updatePos(c.getTransform().getPos().getX(), c.getTransform().getPos().getY(), c.getTransform().getPos().getZ());\n\t}","location":{"start":108,"insert":108,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"90f1ea39-d4b8-a295-e64c-42a3aebcd278","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"renders a 3D model using the WebGL renderer. It sets up the rendering context, binds the model's vertices, and draws the model using the ModelViewProjection matrix.","params":[],"usage":{"language":"java","code":"private static void render() {\n    // Enable vertex attribute arrays for the model\n    Model.enableAttribs();\n    \n    // Bind the shader program to the OpenGL context\n    s.bind();\n    \n    // Iterate over each block in the world\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 4; j++) {\n            for (int k = 0; k < 4; k++) {\n                // Calculate the RGB color of the current block\n                float r = (4 - i) / 4f;\n                float g = j / 4f;\n                float b = k / 4f;\n                \n                // Pass the calculated color to the shader as a uniform variable\n                s.uniformf(\"color\", r, g, b);\n                \n                // Calculate the model-view-projection matrix for the current block\n                Matrix4f mvp = c.getViewProjection().mul(ch[i][j][k].getModelMatrix());\n                \n                // Pass the calculated model-view-projection matrix to the shader as a uniform variable\n                s.uniformMat4(\"MVP\", mvp);\n                \n                // Draw the current block using the shader program\n                ch[i][j][k].getModel().draw();\n            }\n        }\n    }\n    \n    // Disable vertex attribute arrays for the model\n    Model.disableAttribs();\n}\n","description":"\nThe example code should work correctly and provide a clear understanding of how to use the method render. Additionally, it should be as short as possible in order to minimize the amount of code that needs to be read."},"name":"render","code":"private static void render() {\n\t\t\n//\t\tModel.enableAttribs();\n\t\t\n\t\ts.bind();\n//\t\tfor (int i = 0; i < 4; i++)\n//\t\t\tfor (int j = 0; j < 4; j++)\n//\t\t\t\tfor (int k = 0; k < 4; k++) {\n//\t\t\t\t\tfloat r = (4 - i) / 4f;\n//\t\t\t\t\tfloat g = j / 4f;\n//\t\t\t\t\tfloat b = k / 4f;\n//\t\t\t\t\ts.uniformf(\"color\", r, g, b);\n//\t\t\t\t\ts.unifromMat4(\"MVP\", (c.getViewProjection().mul(ch[i][j][k].getModelMatrix())));\n//\t\t\t\t\tch[i][j][k].getModel().draw();\n//\t\t\t\t}\n\t\t\n\t\tw.render(s, c);\n\t\t\n//\t\tModel.disableAttribs();\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1},"item_type":"method","length":20},{"id":"a0600e01-aef5-a9a9-0743-0a0ad1f9a6d0","ancestors":["f577e5e0-b3ea-7da6-6042-67f485231431"],"type":"function","description":"terminates the Java program by calling the `System.exit()` method with the specified status code, which is an integer value ranging from 0 to 255.","params":[{"name":"status","type_name":"int","description":"value to be used when calling the `System.exit()` method, indicating the exit status of the program.","complex_type":false}],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        //...\n        \n        exit(0);  //exit the program with status of 0\n    }\n}\n","description":""},"name":"exit","code":"private static void exit(int status) {\n\t\tSystem.exit(status);\n\t}","location":{"start":134,"insert":134,"offset":" ","indent":1},"item_type":"method","length":3}]}}}