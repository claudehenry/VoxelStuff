{"name":"Util.java","path":"src/com/ch/Util.java","content":{"structured":{"description":"Several methods and classes that operate on various data types such as integers, floats, and strings. The Util class provides methods for creating buffers in different data types, flipping and manipulating their contents, as well as removing empty elements from arrays. The code also includes a method to convert a matrix to a float buffer.","items":[{"id":"657356ff-e968-db90-de4e-a211a9e396f5","ancestors":[],"type":"function","description":"provides various methods for manipulating data arrays and buffers in Java. These include:\n\n* Creating FloatBuffer, IntBuffer, and ByteBuffer objects for storing and manipulating data.\n* Methods for flipping buffers and converting them to other data types (e.g., Vertex[] to FloatBuffer).\n* A method for removing empty strings from an array.\n* Methods for converting Integer, Float, and List objects to arrays.","name":"Util","code":"public class Util {\n\t\n\tpublic static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}\n\n\tpublic static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}\n\n\tpublic static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}\n\n\tpublic static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n\tpublic static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Vertex[] vertices) {\n\t\tFloatBuffer buffer = createFloatBuffer(vertices.length * Vertex.SIZE);\n\n\t\tfor (int i = 0; i < vertices.length; i++) {\n\t\t\tbuffer.put(vertices[i].getPos().getX());\n\t\t\tbuffer.put(vertices[i].getPos().getY());\n\t\t\tbuffer.put(vertices[i].getPos().getZ());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getX());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getX());\n\t\t\tbuffer.put(vertices[i].getNormal().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getZ());\n\t\t\tbuffer.put(vertices[i].getTangent().getX());\n\t\t\tbuffer.put(vertices[i].getTangent().getY());\n\t\t\tbuffer.put(vertices[i].getTangent().getZ());\n\t\t}\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t*/\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Matrix4f value) {\n\t\tFloatBuffer buffer = createFloatBuffer(4 * 4);\n\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\tbuffer.put(value.get(i, j));\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n\tpublic static Matrix4f loatMat4(FloatBuffer vals) {\n\t\t\n//\t\tvals.flip();\n\t\t\n\t\tMatrix4f m = new Matrix4f();\n\t\t\n\t\tint index;\n\t\tfor (index = 0; index < 16; index++)\n\t\t\tm.set(index % 4, index / 4, vals.get());\n\t\t\n\t\treturn m;\n\t}\n*/\n\tpublic static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}\n\n\tpublic static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n\tpublic static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n\t\n\tpublic static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n\tpublic static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n}","location":{"start":11,"insert":11,"offset":" ","indent":0,"comment":null},"item_type":"class","length":129},{"id":"69effd6c-f5ee-b5b8-4540-dc38eecb484d","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"creates a new `FloatBuffer` object with the specified size.","params":[{"name":"size","type_name":"int","description":"number of elements to be stored in the `FloatBuffer`.","complex_type":false}],"returns":{"type_name":"FloatBuffer","description":"a `FloatBuffer` object representing a buffer of size `size` containing floating-point values.\n\n* The method returns a `FloatBuffer` object, which is a type-safe wrapper around a native floating-point buffer.\n* The buffer size is determined by the `size` parameter passed to the method, which cannot be negative.\n* The buffer is created using the `BufferUtils` class, which provides utility methods for creating and manipulating buffers in a type-safe manner.","complex_type":true},"name":"createFloatBuffer","code":"public static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}","location":{"start":13,"insert":13,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f0c538bb-a6cc-77ad-0043-e77ab90d28d9","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"creates an `IntBuffer` object of a specified size, using the `BufferUtils` class. The created buffer can be used for efficient memory access and manipulation of integer values.","params":[{"name":"size","type_name":"int","description":"integer capacity of the IntBuffer that is to be created.","complex_type":false}],"returns":{"type_name":"IntBuffer","description":"an `IntBuffer` object that represents a contiguous block of integers with the specified size.\n\nThe `IntBuffer` object is created using the `BufferUtils` class, which is responsible for managing buffers in Java. The size parameter passed to the function determines the capacity of the buffer, which can be greater than or equal to 0.\nThe buffer is guaranteed to have enough space to hold at least `size` elements of type `int`. If the actual number of elements stored in the buffer exceeds the specified `size`, the remaining elements will be discarded without notice.\nThe buffer's position is set to 0, indicating that the first element in the buffer can be accessed by invoking the `get` method with a valid index.","complex_type":true},"name":"createIntBuffer","code":"public static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"dbf5b7ae-6d9b-87bc-cb48-b1f45fa0abdb","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"creates a new byte buffer with the specified size using the `BufferUtils` class.","params":[{"name":"size","type_name":"int","description":"buffer size in bytes that the `createByteBuffer` method creates.","complex_type":false}],"returns":{"type_name":"ByteBuffer","description":"a ByteBuffer instance of the specified size.\n\nThe returned ByteBuffer has a capacity of `size` bytes, which is the parameter passed to the function.\nIt is created by BufferUtils, whose class and method are unspecified in the code snippet provided. Therefore, its implementation details are unknown.\nThe ByteBuffer can be used for reading or writing binary data, as it represents a buffer that can hold binary data of any size.","complex_type":true},"name":"createByteBuffer","code":"public static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}","location":{"start":21,"insert":21,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b1c9d54b-395f-59bb-5f46-e327fb15e130","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"creates an `IntBuffer` from an array of integers and flips it, allowing for efficient access to its elements.","params":[],"returns":{"type_name":"IntBuffer","description":"an IntBuffer containing the flipped version of the input array.\n\n* The `IntBuffer` object returned by the function is flipped, meaning that its elements are reversed in memory.\n* The buffer's length is equal to the number of elements passed to the function, as reflected by the `values.length` parameter.\n* The buffer's capacity is unchanged after being flipped, which means it can still store the same amount of data.","complex_type":true},"name":"createFlippedBuffer","code":"public static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":25,"insert":25,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"700a18b0-bb71-6f86-ef40-2e48743d8e64","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"creates a new `FloatBuffer` object by copying a given array of floating-point values and flipping it.","params":[],"returns":{"type_name":"FloatBuffer","description":"a flipped FloatBuffer containing the provided values.\n\n* `FloatBuffer buffer`: This is a `FloatBuffer` object that contains the flipped version of the input values.\n* `values.length`: This is the number of input values that were passed to the function.\n* `put()` method: The `buffer.put(values)` line calls the `put()` method, which adds the input values to the buffer in a contiguous block of memory.\n* `flip()` method: The `buffer.flip()` line calls the `flip()` method, which makes the buffer's data position points to the end of the buffer, and its position pointer to the beginning of the buffer. This allows for efficient random access to the buffer's data.","complex_type":true},"name":"createFlippedBuffer","code":"public static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1,"comment":null},"item_type":"method","length":7},{"id":"556cdb20-b1cd-5384-224e-6c7f51233336","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"removes all empty strings from an array of strings and returns an array of non-empty strings.","params":[{"name":"data","type_name":"String[]","description":"array of strings that the function will operate on, and it is used to store the result of the operation after the empty strings have been removed.\n\n* Length: The length of the input array is specified as `data.length`.\n* Elements: Each element in the input array is a `String`, which means that each element has a type of `String` and can contain text or other data types enclosed within double quotes (`\"\"`).\n* Emptiness: The function checks if each element is not empty by using the `!` operator. If an element is empty, it is not included in the resulting array `result`.","complex_type":true}],"returns":{"type_name":"String","description":"an array of non-empty strings.","complex_type":false},"name":"removeEmptyStrings","code":"public static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}","location":{"start":91,"insert":91,"offset":" ","indent":1,"comment":null},"item_type":"method","length":12},{"id":"758b61c0-b057-20b8-014b-7e677c4827be","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"takes an `Integer[]` array as input and returns a new `int[]` array containing the same values.","params":[{"name":"data","type_name":"Integer[]","description":"integer array that is converted to an int array by the function.\n\n* The function takes an `Integer[]` array as input, indicating that the original data is also an integer array.\n* The function creates a new `int[]` array with the same length as the input `data`.\n* The function then iterates over each element in the input array and assigns it to the corresponding position in the output array using a simple loop.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array with the same length as the input array `data`.","complex_type":false},"name":"toIntArray","code":"public static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":104,"insert":104,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"0bb839af-3176-e29b-8b44-20375cc0c616","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"takes a list of integers and returns an integer array with the same size as the input list. It iterates through the list and copies each element to a corresponding position in the output array.","params":[{"name":"data","type_name":"List<Integer>","description":"List of integers to be converted into an integer array.\n\n* `data` is an instance of `List`, implying it contains a collection of items that can be of any data type, including `Integer`.\n* `data.size()` returns the number of elements in the list.\n* The method `get(int index)` is used to retrieve the element at position `index` in the list. It returns an `Optional`, which may contain the value if it exists or `None` otherwise.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array containing the elements of the input list.","complex_type":false},"name":"toIntArray","code":"public static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"5616ee06-6719-ae82-5f46-0df8441409fe","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"takes a `Float` array as input and returns an array of the same length containing the corresponding values converted to `float`.","params":[{"name":"data","type_name":"Float[]","description":"Float array that is to be converted into a `float[]` array.\n\n* The type of `data` is `Float[]`.\n* The length of `data` is determined by its size, which is a compile-time constant.\n* Each element in `data` is of type `Float`.","complex_type":true}],"returns":{"type_name":"float","description":"an array of `float` values, equal to the length of the input `Float[]` data.","complex_type":false},"name":"toFloatArray","code":"public static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"89a16521-8d2d-b0a8-c440-fc3506ab8081","ancestors":["657356ff-e968-db90-de4e-a211a9e396f5"],"type":"function","description":"converts a list of floating-point numbers into an array of floats, copying the elements of the list to the array.","params":[{"name":"data","type_name":"List<Float>","description":"List of Float values that are to be converted into an array of Float values.\n\nThe input `data` is of type `List<Float>`, indicating that it is an array-based collection containing floating-point values. The size of the list is represented by the `size()` method.\n\nWithin the function, a new array of floats is created using the `float[]` constructor, and its length is set to match the size of `data`. Then, the elements of `data` are copied into the newly created array using a standard for-loop.","complex_type":true}],"returns":{"type_name":"float","description":"an array of float values representing the elements of the input list.","complex_type":false},"name":"toFloatArray","code":"public static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":131,"insert":131,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8}]}}}