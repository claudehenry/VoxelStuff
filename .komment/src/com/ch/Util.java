{"name":"Util.java","path":"src/com/ch/Util.java","content":{"structured":{"description":"Various utility methods for working with buffers, matrices, and strings. The code includes methods for creating and manipulating floating-point buffers, integer buffers, and byte buffers. It also provides methods for converting lists of integers and floats to arrays, as well as methods for flipping and manipulating buffers. Additionally, the code includes a method for removing empty strings from an array.","items":[{"id":"80a7ff8e-c2a2-ea94-2f44-d7aad3005632","ancestors":[],"type":"function","description":"TODO","name":"Util","code":"public class Util {\n\t\n\tpublic static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}\n\n\tpublic static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}\n\n\tpublic static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}\n\n\tpublic static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n\tpublic static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Vertex[] vertices) {\n\t\tFloatBuffer buffer = createFloatBuffer(vertices.length * Vertex.SIZE);\n\n\t\tfor (int i = 0; i < vertices.length; i++) {\n\t\t\tbuffer.put(vertices[i].getPos().getX());\n\t\t\tbuffer.put(vertices[i].getPos().getY());\n\t\t\tbuffer.put(vertices[i].getPos().getZ());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getX());\n\t\t\tbuffer.put(vertices[i].getTexCoord().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getX());\n\t\t\tbuffer.put(vertices[i].getNormal().getY());\n\t\t\tbuffer.put(vertices[i].getNormal().getZ());\n\t\t\tbuffer.put(vertices[i].getTangent().getX());\n\t\t\tbuffer.put(vertices[i].getTangent().getY());\n\t\t\tbuffer.put(vertices[i].getTangent().getZ());\n\t\t}\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t*/\n\n\t/*\n\tpublic static FloatBuffer createFlippedBuffer(Matrix4f value) {\n\t\tFloatBuffer buffer = createFloatBuffer(4 * 4);\n\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j < 4; j++)\n\t\t\t\tbuffer.put(value.get(i, j));\n\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}\n\t\n\tpublic static Matrix4f loatMat4(FloatBuffer vals) {\n\t\t\n//\t\tvals.flip();\n\t\t\n\t\tMatrix4f m = new Matrix4f();\n\t\t\n\t\tint index;\n\t\tfor (index = 0; index < 16; index++)\n\t\t\tm.set(index % 4, index / 4, vals.get());\n\t\t\n\t\treturn m;\n\t}\n*/\n\tpublic static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}\n\n\tpublic static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n\tpublic static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n\t\n\tpublic static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}\n\t\n\tpublic static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":129},{"id":"ef81022e-adfb-338c-d94f-da8ef033a05d","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"creates a new `FloatBuffer` instance with the specified size. The returned buffer contains a contiguous block of memory capable of storing floating-point values.","params":[{"name":"size","type_name":"int","description":"number of floating-point values to be stored in the `FloatBuffer`.","complex_type":false}],"returns":{"type_name":"FloatBuffer","description":"a `FloatBuffer` object of the specified size, created using the `BufferUtils` class.\n\n* The output is an instance of the `FloatBuffer` class, which represents a contiguous block of memory that can be accessed and modified as a vector of floating-point values.\n* The size of the buffer is determined by the parameter passed to the function, which must be a positive integer.\n* The buffer is created using the `BufferUtils` class, which provides utility methods for working with buffers in Java.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        //create a FloatBuffer with size 50\n        FloatBuffer floatbuffer = Util.createFloatBuffer(50);\n        \n        //put values into the FloatBuffer\n        for (int i = 0; i < 10; i++) {\n            floatbuffer.put((float) i / 2f);\n        }\n    }\n}\n","description":""},"name":"createFloatBuffer","code":"public static FloatBuffer createFloatBuffer(int size) {\n\t\treturn BufferUtils.createFloatBuffer(size);\n\t}","location":{"start":13,"insert":13,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"ee0aabc6-89d5-44a7-ca45-1b88f5d3acf2","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"creates an `IntBuffer` instance with the specified size.","params":[{"name":"size","type_name":"int","description":"number of elements to be stored in the buffer.","complex_type":false}],"returns":{"type_name":"IntBuffer","description":"an `IntBuffer` object that represents a contiguous block of integers with the specified size.\n\nThe function returns an `IntBuffer` object, which is a type-safe wrapper around a native buffer containing integer values. The buffer is managed by the Java platform and provides efficient access to the underlying data. The size of the buffer is specified by the parameter `size`.","complex_type":true},"usage":{"language":"java","code":"int size = 10; // size is the parameter passed to method createIntBuffer, which specifies the size of the int buffer to return.\nIntBuffer result = Util.createIntBuffer(size);\n// result now contains an IntBuffer with a capacity of size elements.\n","description":""},"name":"createIntBuffer","code":"public static IntBuffer createIntBuffer(int size) {\n\t\treturn BufferUtils.createIntBuffer(size);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"3fc6ba91-ca46-19bb-4649-33d0a8cd2fbe","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"creates a new `ByteBuffer` instance with a specified size.","params":[{"name":"size","type_name":"int","description":"capacity of the byte buffer to be created, which determines the maximum amount of memory allocated for storing data.","complex_type":false}],"returns":{"type_name":"ByteBuffer","description":"a byte buffer with the specified size.\n\n* The `createByteBuffer` function returns a `ByteBuffer` object that represents a contiguous block of memory with a specified capacity for storing binary data.\n* The ` ByteBuffer` object is a type-safe wrapper around a low-level memory buffer, providing a set of methods for reading and writing data to the buffer.\n* The size parameter passed to the function determines the initial capacity of the returned buffer. If the size is zero or negative, the buffer will be empty and have no data stored in it.","complex_type":true},"usage":{"language":"java","code":"int size = 10;\nByteBuffer byteBuffer = Util.createByteBuffer(size);\nbyteBuffer.put((byte) 42); // Put the value 42 into the ByteBuffer at index 0\nbyteBuffer.get(); // Reads the value stored in the ByteBuffer at index 0 and returns it as a byte\n","description":""},"name":"createByteBuffer","code":"public static ByteBuffer createByteBuffer(int size) {\n\t\treturn BufferUtils.createByteBuffer(size);\n\t}","location":{"start":21,"insert":21,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"e25bfc0a-31bf-63a4-9242-28fd05d0af48","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"creates an `IntBuffer` object containing the given array elements in a flipped state, i.e., with all bits set to 1 on the bottom half of the buffer.","params":[],"returns":{"type_name":"IntBuffer","description":"an IntBuffer containing the flipped versions of the input values.\n\n* The function creates an `IntBuffer` object named `buffer`.\n* The `buffer` object is filled with the input values using the `put()` method.\n* The `buffer` object is flipped to create a new buffer that can be used for reading and writing operations.\n\nThe output of the function is an `IntBuffer` object, which is a mutable array of integers that can be modified through the use of the `put()`, `get()`, and `flip()` methods.","complex_type":true},"usage":{"language":"java","code":"IntBuffer buffer = Util.createFlippedBuffer(1, 2, 3);\nbuffer.get(0); // Returns 1\nbuffer.get(1); // Returns 2\nbuffer.get(2); // Returns 3\n","description":"\nThis is because the IntBuffer's flip method reverses the order of the int values inside the buffer, so that they can be read in reverse order using get() method."},"name":"createFlippedBuffer","code":"public static IntBuffer createFlippedBuffer(int... values) {\n\t\tIntBuffer buffer = createIntBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":25,"insert":25,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"2d92ea31-8b5f-f194-ff46-9d02ad496737","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"creates a new FloatBuffer object and assigns it the provided array of floats, then flips the buffer to make the data available for reading from the end of the buffer.","params":[],"returns":{"type_name":"FloatBuffer","description":"a flipped FloatBuffer containing the input values.\n\n* `FloatBuffer buffer`: This is the buffer that contains the flipped float values.\n* `values.length`: The number of float values stored in the buffer.\n* `put(values)`: The method used to store the float values in the buffer.\n* `flip()`: The method used to flip the buffer, making its elements accessible through the `get` methods.","complex_type":true},"usage":{"language":"java","code":"import com.ch;\n\npublic class Example {\n\tpublic static void main(String[] args) {\n\t\tFloatBuffer buffer = Util.createFlippedBuffer(1, 2, 3, 4);\n\n\t\t// Use the buffer here\n\t}\n}\n","description":""},"name":"createFlippedBuffer","code":"public static FloatBuffer createFlippedBuffer(float... values) {\n\t\tFloatBuffer buffer = createFloatBuffer(values.length);\n\t\tbuffer.put(values);\n\t\tbuffer.flip();\n\n\t\treturn buffer;\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"9d32e2a6-7c50-7d91-fd46-ae5e5e36b8be","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"removes any empty strings from an array of strings and returns an new array with only non-empty strings.","params":[{"name":"data","type_name":"String[]","description":"0-length array of strings that is to be processed by the function, and its elements are checked for emptiness before being added to an ArrayList for subsequent conversion into an array output.\n\n* `data` is an array of strings.\n* The length of the array `data` is specified by an integer variable `data.length`.\n* Each element in the array `data` can be a string, or it can be empty (represented by the value `\"\"`).\n\nThe function then performs operations on the elements of the array `data`, including:\n\n* Iterating through each element of `data` using a loop from 0 to `data.length - 1`.\n* Checking if each element is not empty (i.e., it is not `\"\"`). If it is not empty, the function adds it to an ArrayList named `result`.\n* After all elements are processed, the `result` ArrayList is converted into a new array of strings using the `toArray()` method.\n* The resulting array of strings is returned as the output of the function.","complex_type":true}],"returns":{"type_name":"String","description":"an array of non-empty strings.\n\n* The returned array `res` has a length equal to the number of non-empty strings in the input array `data`.\n* Each element in `res` is a non-empty string from the original input array.\n* The order of the elements in `res` is the same as the order of the elements in `data`.","complex_type":true},"usage":{"language":"java","code":"String[] data = {\"hello\", \"\", \"world\"};\nSystem.out.println(Util.removeEmptyStrings(data)); // Output [\"hello\", \"world\"]\n","description":""},"name":"removeEmptyStrings","code":"public static String[] removeEmptyStrings(String[] data) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tif (!data[i].equals(\"\"))\n\t\t\t\tresult.add(data[i]);\n\n\t\tString[] res = new String[result.size()];\n\t\tresult.toArray(res);\n\n\t\treturn res;\n\t}","location":{"start":91,"insert":91,"offset":" ","indent":1},"item_type":"method","length":12},{"id":"9b8cb2e6-f5ae-7fa1-d04b-c9e6e2d952aa","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"converts an `Integer[]` array to an `int[]` array with the same length, by simply copying the values of the original array to the new array.","params":[{"name":"data","type_name":"Integer[]","description":"1D array of integers that is converted into a new 1D integer array by the `toIntArray()` method.\n\nThe function takes an `Integer[]` input `data`. The length of the array is consistent throughout the execution of the function.\n\nEach element of the input `data` is copied to a newly created `int[]` output called `result`.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array with the same elements as the input array.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        // Set the array we want to convert to an integer array \n        Integer[] intArray = new Integer[3];\n        \n        // Set the values of the array to integers\n        intArray[0] = 1;\n        intArray[1] = 2;\n        intArray[2] = 3;\n        \n        // Call the method to convert the integer array to an integer array\n        int[] intArray2 = Util.toIntArray(intArray);\n    }\n}\n","description":"\nIn this example, we set up an integer array with three elements and then pass it as a parameter to the method toIntArray. The method returns an integer array with the same values as the original array."},"name":"toIntArray","code":"public static int[] toIntArray(Integer[] data) {\n\t\tint[] result = new int[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":104,"insert":104,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"a3cb6fd0-6c05-8080-8145-5875af7c4635","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"takes a list of integers and returns an integer array with the same size as the list. It loops through each element in the list and assigns it to the corresponding position in the integer array.","params":[{"name":"data","type_name":"List<Integer>","description":"List of integers that is to be converted into an integer array by the `toIntArray()` method.\n\n1. The function takes in a `List<Integer>` as input, indicating that the list contains only integer elements.\n2. The function creates an array of integers with size equal to the number of elements in the input list using the `int[]` data type.\n3. The function iterates over each element in the input list and assigns it to the corresponding position in the output array using the `result[i]` syntax.\n4. The function returns the populated integer array as a whole, which can be used for further processing or analysis.","complex_type":true}],"returns":{"type_name":"int","description":"an integer array of size equal to the number of elements in the input list.","complex_type":false},"usage":{"language":"java","code":"List<Integer> myList = new ArrayList<>();\nmyList.add(1);\nmyList.add(2);\nmyList.add(3);\nint[] intArray = Util.toIntArray(myList);\n","description":"\nIn this example, the method toIntArray is called and passed a list of integers as an argument, myList. The method then returns an array of integers which can be stored in intArray for further use."},"name":"toIntArray","code":"public static int[] toIntArray(List<Integer> data) {\n\t\tint[] result = new int[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":113,"insert":113,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"c48db9de-af7f-519b-754e-350dc4bce562","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"converts a `Float` array to a `float[]` array, with each element of the input array copied to the output array.","params":[{"name":"data","type_name":"Float[]","description":"Float array that contains the values to be converted to a float array.\n\n* `data` is an instance of the `Float` class, indicating that it contains a collection of floating-point numbers.\n* The method takes a single argument `data`, which is an array of `Float` objects.\n* The function creates a new `float[]` array with the same length as `data`.\n* It then iterates over each element in the input `data` array and assigns it to a corresponding position in the new `float[]` array.\n\nTherefore, the resulting `float[]` array contains the exact values of the original `data` array.","complex_type":true}],"returns":{"type_name":"float","description":"an array of floating-point values, each corresponding to a value in the input array.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    Float[] data = {1f, 2f, 3f}; // Input for the method\n    float[] output = Util.toFloatArray(data);\n    System.out.println(output[0]); // Output: 1\n    System.out.println(output[1]); // Output: 2\n    System.out.println(output[2]); // Output: 3\n  }\n}\n","description":""},"name":"toFloatArray","code":"public static float[] toFloatArray(Float[] data) {\n\t\tfloat[] result = new float[data.length];\n\n\t\tfor (int i = 0; i < data.length; i++)\n\t\t\tresult[i] = data[i];\n\n\t\treturn result;\n\t}","location":{"start":122,"insert":122,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"048dcbc9-832f-82a1-8744-84546a36b427","ancestors":["80a7ff8e-c2a2-ea94-2f44-d7aad3005632"],"type":"function","description":"converts a `List<Float>` into an array of float values, by using a loop to iterate through the list and assign each value to a corresponding index in the resulting array.","params":[{"name":"data","type_name":"List<Float>","description":"list of floating-point numbers to be converted into an array of float values.\n\n* `data`: A `List<Float>` containing the serialized data to be converted into an array of floating-point numbers.","complex_type":true}],"returns":{"type_name":"float","description":"an array of floating-point numbers representing the input list of float values.","complex_type":false},"usage":{"language":"java","code":"List<Float> data = new ArrayList<>();\ndata.add(10.0f);\ndata.add(20.0f);\n\nfloat[] result = Util.toFloatArray(data);\n","description":"\nThis will convert the list of floats into a float array."},"name":"toFloatArray","code":"public static float[] toFloatArray(List<Float> data) {\n\t\tfloat[] result = new float[data.size()];\n\n\t\tfor (int i = 0; i < data.size(); i++)\n\t\t\tresult[i] = data.get(i);\n\n\t\treturn result;\n\t}","location":{"start":131,"insert":131,"offset":" ","indent":1},"item_type":"method","length":8}]}}}