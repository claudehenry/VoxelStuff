{"name":"Transform.java","path":"src/com/ch/Transform.java","content":{"structured":{"description":"A `Transform` class that handles rotations and translations of objects in 3D space. It includes methods for setting and retrieving position, rotation, and scale, as well as methods for updating those values based on changes to the parent transform. Additionally, it provides methods for rotating around a specific axis and looking at a point in 3D space, as well as a method for getting the transformation matrix that represents the current state of the transform. The code also includes an override for `toString()` to provide a brief summary of the class's functionality.","items":[{"id":"54b42e04-66b4-90a0-3c4f-f9dcccf34b38","ancestors":[],"type":"function","description":"TODO","name":"Transform","code":"public class Transform {\n\n\tprivate Transform parent;\n\tprivate Matrix4f parentMatrix;\n\n\tprivate Vector3f pos;\n\tprivate Quaternion rot;\n\tprivate Vector3f scale;\n\n\tprivate Vector3f oldPos;\n\tprivate Quaternion oldRot;\n\tprivate Vector3f oldScale;\n\n\tpublic Transform() {\n\t\tpos = new Vector3f(0, 0, 0);\n\t\trot = new Quaternion(1, 0, 0, 0);\n\t\tscale = new Vector3f(1, 1, 1);\n\t\t\n\t\toldPos = new Vector3f(0, 0, 0);\n\t\toldRot = new Quaternion(1, 0, 0, 0);\n\t\toldScale = new Vector3f(1, 1, 1);\n\n\t\tparentMatrix = new Matrix4f().initIdentity();\n\t}\n\n\tpublic void update() {\n\t\tif (oldPos != null) {\n\t\t\tif (!oldPos.equals(pos))\n\t\t\t\toldPos.set(pos);\n\t\t\tif (!oldRot.equals(rot))\n\t\t\t\toldRot.set(rot);\n\t\t\tif (!oldScale.equals(scale))\n\t\t\t\toldScale.set(scale);\n\t\t} else {\n\t\t\toldPos = new Vector3f().set(pos);\n\t\t\toldRot = new Quaternion().set(rot);\n\t\t\toldScale = new Vector3f().set(scale);\n\t\t}\n\t}\n\n\tpublic void rotate(Vector3f axis, float angle) {\n\t\trot = new Quaternion(axis, angle).mul(rot).normalized();\n\t}\n\n\tpublic void lookAt(Vector3f point, Vector3f up) {\n\t\trot = getLookAtRotation(point, up);\n\t}\n\n\tpublic Quaternion getLookAtRotation(Vector3f point, Vector3f up) {\n\t\treturn new Quaternion(new Matrix4f().initRotation(point.sub(pos).normalized(), up));\n\t}\n\n\tpublic boolean hasChanged() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\treturn true;\n\n\t\tif (!pos.equals(oldPos))\n\t\t\treturn true;\n\n\t\tif (!rot.equals(oldRot))\n\t\t\treturn true;\n\n\t\tif (!scale.equals(oldScale))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\tpublic Matrix4f getTransformation() {\n\t\tMatrix4f translationMatrix = new Matrix4f().initTranslation(pos.getX(), pos.getY(), pos.getZ());\n\t\tMatrix4f rotationMatrix = rot.toRotationMatrix();\n\t\tMatrix4f scaleMatrix = new Matrix4f().initScale(scale.getX(), scale.getY(), scale.getZ());\n\n\t\treturn getParentMatrix().mul(translationMatrix.mul(rotationMatrix.mul(scaleMatrix)));\n\t}\n\n\tprivate Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}\n\n\tpublic void setParent(Transform parent) {\n\t\tthis.parent = parent;\n\t}\n\n\tpublic Vector3f getTransformedPos() {\n\t\treturn getParentMatrix().transform(pos);\n\t}\n\n\tpublic Quaternion getTransformedRot() {\n\t\tQuaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n\t\tif (parent != null)\n\t\t\tparentRotation = parent.getTransformedRot();\n\n\t\treturn parentRotation.mul(rot);\n\t}\n\n\tpublic Vector3f getPos() {\n\t\treturn pos;\n\t}\n\n\tpublic void setPos(Vector3f pos) {\n\t\tthis.pos = pos;\n\t}\n\n\tpublic void addToPos(Vector3f addVec) { this.setPos(this.getPos().add(addVec)); }\n\n\tpublic Quaternion getRot() {\n\t\treturn rot;\n\t}\n\n\tpublic void setRot(Quaternion rotation) {\n\t\tthis.rot = rotation;\n\t}\n\n\tpublic Vector3f getScale() {\n\t\treturn scale;\n\t}\n\n\tpublic void setScale(Vector3f scale) {\n\t\tthis.scale = scale;\n\t}\n\t\n\t@Override\n\tpublic String toString() { return \"\";\n\t}\n\n}","location":{"start":7,"insert":7,"offset":" ","indent":0},"item_type":"class","length":131},{"id":"60903206-0ed1-a186-f64b-4abf32106087","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"updates an object's position, rotation, and scale based on the current values and stored historical values.","params":[],"usage":{"language":"java","code":"public void myMethod() {\n    Transform t = new Transform();\n    t.setPos(new Vector3f(1, 2, 3));\n    t.setRot(new Quaternion(0, 1, 0, 0));\n    t.setScale(new Vector3f(4, 5, 6));\n    t.update();\n}\n","description":""},"name":"update","code":"public void update() {\n\t\tif (oldPos != null) {\n\t\t\tif (!oldPos.equals(pos))\n\t\t\t\toldPos.set(pos);\n\t\t\tif (!oldRot.equals(rot))\n\t\t\t\toldRot.set(rot);\n\t\t\tif (!oldScale.equals(scale))\n\t\t\t\toldScale.set(scale);\n\t\t} else {\n\t\t\toldPos = new Vector3f().set(pos);\n\t\t\toldRot = new Quaternion().set(rot);\n\t\t\toldScale = new Vector3f().set(scale);\n\t\t}\n\t}","location":{"start":32,"insert":32,"offset":" ","indent":1},"item_type":"method","length":14},{"id":"7c78dcd1-a0e0-d2a2-ff4b-3269208f52d4","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"takes a `Quaternion` and multiplies it by another `Quaternion` to rotate a `Vector3f`.","params":[{"name":"axis","type_name":"Vector3f","description":"3D rotation axis around which the rotation will occur.\n\n* `axis`: A `Vector3f` object representing the axis of rotation. It has three components - `x`, `y`, and `z` - which correspond to the coordinates of the axis in the 3D space.","complex_type":true},{"name":"angle","type_name":"float","description":"3D rotation angle around the specified `axis`.","complex_type":false}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    // create a new transform object\n    Transform myTransform = new Transform();\n\n    // set the rotation of the transform to (1, 0, 0)\n    myTransform.setRotation(new Quaternion(1, 0, 0));\n\n    // rotate the transform by 90 degrees around the x-axis\n    Vector3f axis = new Vector3f(1, 0, 0);\n    float angle = (float)Math.toRadians(90);\n    myTransform.rotate(axis, angle);\n\n    // print out the final rotation of the transform\n    System.out.println(\"Final Rotation: \" + myTransform.getRot());\n}\n","description":""},"name":"rotate","code":"public void rotate(Vector3f axis, float angle) {\n\t\trot = new Quaternion(axis, angle).mul(rot).normalized();\n\t}","location":{"start":47,"insert":47,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"44d00ba1-8197-9686-7b4e-22b96702b724","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"computes and stores the rotation required to face a given point while maintaining a specific orientation with respect to the up direction.","params":[{"name":"point","type_name":"Vector3f","description":"3D position of an object that the `lookAt()` method is rotating towards.\n\n* `point`: A 3D vector representing a point in space with x, y, and z components.\n* `up`: A 3D vector representing a direction in space with x, y, and z components, which is used to determine the orientation of the look-at rotation.","complex_type":true},{"name":"up","type_name":"Vector3f","description":"3D direction along which the camera's view will be looking when it rotates to face the given `point`.\n\n* The `up` parameter is a `Vector3f` class instance that represents the direction from the eye to the up vector in the world coordinate system.\n* The `up` vector has three components: x, y, and z, which represent the real-valued coordinates of the up vector in the world coordinate system.","complex_type":true}],"usage":{"language":"java","code":"Transform t = new Transform();\nt.setPos(new Vector3f(0, 0, 0));\nt.lookAt(new Vector3f(1, 0, 0), new Vector3f(0, 1, 0));\n","description":"\nIn this example, the position of the transform (t) is set to (0, 0, 0) and it looks at a point (1, 0, 0) with an up vector (0, 1, 0)."},"name":"lookAt","code":"public void lookAt(Vector3f point, Vector3f up) {\n\t\trot = getLookAtRotation(point, up);\n\t}","location":{"start":51,"insert":51,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"41e32885-3a3c-a4b3-2842-a770fc4b6aee","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"computes a quaternion representing the rotation from a reference frame to look at a point in space, using the up vector as the direction of the look-at axis.","params":[{"name":"point","type_name":"Vector3f","description":"3D position of an object that the look-at rotation is being calculated for.\n\n* `point`: A `Vector3f` object representing a 3D point in space. It has three attributes: `x`, `y`, and `z`, which represent the coordinates of the point in the x, y, and z directions, respectively.","complex_type":true},{"name":"up","type_name":"Vector3f","description":"3D vector that defines the orientation of the look-at rotation relative to the object's local up direction.\n\n* `up` is a `Vector3f` object representing an upward direction vector.\n* It has three components: `x`, `y`, and `z`, which correspond to the coordinates of the direction vector in 3D space.\n* The magnitude of `up` is always non-zero, indicating that it points in a specific direction in 3D space.","complex_type":true}],"returns":{"type_name":"Quaternion","description":"a Quaternion representation of the rotation from the position of the object to look at.\n\nThe Quaternion object returned by the function represents a rotation from the position `pos` to the direction `up`. The rotation is represented by a 4x4 matrix, which is initialized using the `new Matrix4f().initRotation(point.sub(pos).normalized(), up)`. This means that the Quaternion object has four elements: `w`, `x`, `y`, and `z`, where `w` represents the magnitude of the rotation, and `x`, `y`, and `z` represent the Euler angles of the rotation.","complex_type":true},"usage":{"language":"java","code":"Transform transform = new Transform();\nVector3f point = new Vector3f(5, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\ntransform.lookAt(point, up);\nQuaternion rotation = transform.getLookAtRotation(point, up);\n","description":"\nIn this example, the Transform class is created and a point (5, 0, 0) and up (0, 1, 0) vectors are provided to look at. Then, the getLookAtRotation method of the transform instance is called with these parameters to create a quaternion representing the rotation that would be needed to look at the specified point."},"name":"getLookAtRotation","code":"public Quaternion getLookAtRotation(Vector3f point, Vector3f up) {\n\t\treturn new Quaternion(new Matrix4f().initRotation(point.sub(pos).normalized(), up));\n\t}","location":{"start":55,"insert":55,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"010c1286-dbfe-ae86-9044-68d4297d3692","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"evaluates whether an object's position, rotation, or scale has changed since the last evaluation. It returns `true` if any of these properties have changed, and `false` otherwise.","params":[],"returns":{"type_name":"boolean","description":"a boolean value indicating whether any of the object's properties have changed.","complex_type":false},"usage":{"language":"java","code":"Transform myTransform = new Transform(); // Create the Transform object\nmyTransform.setPos(new Vector3f(5, 0, 0)); // Set position\nmyTransform.addToPos(new Vector3f(1, 0, 0)); // Add to the position\nSystem.out.println(myTransform.hasChanged()); // Output: true\n","description":""},"name":"hasChanged","code":"public boolean hasChanged() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\treturn true;\n\n\t\tif (!pos.equals(oldPos))\n\t\t\treturn true;\n\n\t\tif (!rot.equals(oldRot))\n\t\t\treturn true;\n\n\t\tif (!scale.equals(oldScale))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}","location":{"start":59,"insert":59,"offset":" ","indent":1},"item_type":"method","length":15},{"id":"22b4880c-a57b-a1be-9f4b-716b302b8e8f","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"computes and returns a transformation matrix based on the position, rotation, and scale of an object.","params":[],"returns":{"type_name":"Matrix4f","description":"a transformed matrix representing a 3D transformation of a object based on its position, rotation, and scale.\n\nThe returned matrix is a product of three matrices: `getParentMatrix()`, `translationMatrix`, and `rotationMatrix`. The `getParentMatrix()` matrix represents the parent transformation of the current transformation, while `translationMatrix` and `rotationMatrix` represent the translation and rotation components of the transformation, respectively.\n\nThe multiplication of these matrices results in a transformation matrix that combines the effects of all three components. This matrix can be used to transform points, vectors, or other mathematical objects in 3D space according to the rules of linear algebra.\n\nIn particular, the `translationMatrix` component represents a displacement of the origin of the coordinate system by the vector `(pos.getX(), pos.getY(), pos.getZ())`, while the `rotationMatrix` component represents a rotation of the coordinate system about an axis specified by the rotation angle and axis vectors. The `scaleMatrix` component represents a scaling of the coordinate system by the vector `(scale.getX(), scale.getY(), scale.getZ())`.\n\nOverall, the `getTransformation` function returns a transformation matrix that can be used to manipulate objects in 3D space according to the desired transformation rules.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    public void myMethod() {\n        // Create a Transform object\n        Transform transform = new Transform();\n\n        // Set the position, rotation, and scale of the transform\n        transform.setPos(new Vector3f(1, 2, 3));\n        transform.setRot(new Quaternion(0, 1, 0, 0));\n        transform.setScale(new Vector3f(4, 5, 6));\n\n        // Get the transformation matrix of the transform\n        Matrix4f transformationMatrix = transform.getTransformation();\n\n        // Use the transformation matrix to perform transformations on other objects\n        // ...\n    }\n}\n","description":"\nIn this example, a Transform object is created and its position, rotation, and scale are set. Then, the getTransformation method is called on the transform object to retrieve the transformation matrix. Finally, the transformation matrix is used to perform transformations on other objects in the scene."},"name":"getTransformation","code":"public Matrix4f getTransformation() {\n\t\tMatrix4f translationMatrix = new Matrix4f().initTranslation(pos.getX(), pos.getY(), pos.getZ());\n\t\tMatrix4f rotationMatrix = rot.toRotationMatrix();\n\t\tMatrix4f scaleMatrix = new Matrix4f().initScale(scale.getX(), scale.getY(), scale.getZ());\n\n\t\treturn getParentMatrix().mul(translationMatrix.mul(rotationMatrix.mul(scaleMatrix)));\n\t}","location":{"start":75,"insert":75,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"ece07da8-db1a-c580-c845-b6fd70bd29ad","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"retrieves and returns the transformation matrix of its parent component, taking into account changes made to the parent matrix.","params":[],"returns":{"type_name":"Matrix4f","description":"a Matrix4f object representing the transformation matrix of the parent component.\n\n* `parentMatrix`: This is a Matrix4f object that represents the transformation matrix of the parent node in the scene graph.\n* `hasChanged()`: This method checks whether the parent node's transformation matrix has changed since the last call to `getParentMatrix`. If it has, the method returns the updated transformation matrix. Otherwise, it returns the unchanged transformation matrix.","complex_type":true},"usage":{"language":"java","code":"Transform transform = new Transform();\ntransform.setParent(new Transform()); // set a parent for the transform object\nMatrix4f parentMatrix = transform.getParentMatrix(); // get the transformation matrix of the parent transform object\n","description":""},"name":"getParentMatrix","code":"private Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}","location":{"start":83,"insert":83,"offset":" ","indent":1},"item_type":"method","length":6},{"id":"da19f53a-2ee1-caba-4a4f-15e8d79a9757","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"sets the `Transform` field `parent` to a given value.","params":[{"name":"parent","type_name":"Transform","description":"Transform to which the current instance will be added as a child transform.\n\n* The `Transform` class contains several members that can be accessed through this object reference, including `getTransform`, `setTransform`, `getParent`, and `setParent`.\n* The `parent` attribute is a reference to another transform object. This means it is a Transform object that has its own set of properties, methods, and behavior.\n* Depending on the context in which this method is called, it may be necessary to call other methods on the `Transform` class before or after calling `setParent`. For instance, you might want to first set the transform's position using `setPosition` followed by setting its parent using `setParent`.","complex_type":true}],"usage":{"language":"java","code":"Transform parent = new Transform();\nTransform child = new Transform();\nchild.setParent(parent);\n","description":""},"name":"setParent","code":"public void setParent(Transform parent) {\n\t\tthis.parent = parent;\n\t}","location":{"start":90,"insert":90,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"1433c390-0091-7890-c14e-6a484706605d","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"transforms a `Vector3f` object using the transformation matrix provided by its parent matrix, and returns the transformed position.","params":[],"returns":{"type_name":"Vector3f","description":"a transformed position vector in the format of a `Vector3f`.\n\n* The output is of type `Vector3f`, which represents a 3D vector in Java.\n* The vector is transformed by applying the parent matrix to the original position vector using the `transform` method.\n* The resulting vector represents the transformed position in the parent coordinate system.","complex_type":true},"usage":{"language":"java","code":"Transform transform = new Transform();\nVector3f position = new Vector3f(1, 2, 3);\ntransform.setPos(position);\n\n// Get the transformed position using the parent transformation matrix\nVector3f transformedPosition = transform.getTransformedPos();\n\nSystem.out.println(\"Transformed position: \" + transformedPosition);\n","description":""},"name":"getTransformedPos","code":"public Vector3f getTransformedPos() {\n\t\treturn getParentMatrix().transform(pos);\n\t}","location":{"start":94,"insert":94,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"b6cdefa4-4c78-ef9e-ec48-910e52d20f6b","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"transforms a given `Quaternion` object `rot` using the parent `Quaternion` object `parent Rotation`, and returns the transformed `Quaternion` object.","params":[],"returns":{"type_name":"Quaternion","description":"a Quaternion representation of the rotational transformation applied to the parent rotation.\n\nThe `Quaternion` object `parentRotation` represents the parent rotation of the game object, which is transformed by multiplying it with the `rot` argument.\n\nThe resulting `Quaternion` object has the same direction as the `parentRotation`, but its magnitude is reduced by the dot product of `parentRotation` and `rot`. This means that the transformed rotation is a combination of the parent rotation and the rotation applied to it.\n\nThe properties of the output `Quaternion` are determined by the values of `parentRotation` and `rot`, which can be any valid quaternions representing 3D rotations. The output quaternion represents the combined rotation of both the parent and the application rotations, and its direction is the result of multiplying these two rotations together.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    Transform myTransform = new Transform();\n    Quaternion parentRotation = myTransform.getParent().getTransformedRot();\n    Quaternion myRotation = myTransform.getTransformedRot();\n    System.out.println(parentRotation);\n    System.out.println(myRotation);\n  }\n}\n","description":""},"name":"getTransformedRot","code":"public Quaternion getTransformedRot() {\n\t\tQuaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n\t\tif (parent != null)\n\t\t\tparentRotation = parent.getTransformedRot();\n\n\t\treturn parentRotation.mul(rot);\n\t}","location":{"start":98,"insert":98,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"ea57971a-606a-4396-6549-3b2b4793b386","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"retrieves the position of an object as a Vector3f data structure.","params":[],"returns":{"type_name":"Vector3f","description":"a `Vector3f` object representing the position of an entity.\n\nThe `Vector3f` object returned by the function represents the position of an entity in 3D space. It contains the x, y, and z coordinates of the position, represented as floating-point values. These coordinates can range from -1 to 1 in each dimension, indicating a finite range of positions within the 3D environment.","complex_type":true},"usage":{"language":"java","code":"Transform transform = new Transform();\nVector3f pos = new Vector3f(5, 10, 15);\ntransform.setPos(pos);\n\n// Get the position of the transform object\nVector3f transformedPos = transform.getPos();\n\n// Print the transformed position to the console\nSystem.out.println(\"Transformed position: \" + transformedPos);\n","description":""},"name":"getPos","code":"public Vector3f getPos() {\n\t\treturn pos;\n\t}","location":{"start":107,"insert":107,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"afca66ca-3b09-d494-ea4e-5ce623442162","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"sets the position of an object to a specified vector in 3D space.","params":[{"name":"pos","type_name":"Vector3f","description":"3D position of an object to which the `setPos()` method is applied, and it is assigned to the `pos` field of the class instance.\n\n* `pos` is a vector data type with three components, each representing the x, y, and z coordinates of an object's position in 3D space.\n* Each component is represented by a floating-point value between -1 and 1, inclusive.\n* The total magnitude of the vector is always greater than or equal to 0, ensuring that the position is valid and non-negative.","complex_type":true}],"usage":{"language":"java","code":"Transform transform = new Transform();\nVector3f position = new Vector3f(1, 2, 3);\ntransform.setPos(position);\n","description":""},"name":"setPos","code":"public void setPos(Vector3f pos) {\n\t\tthis.pos = pos;\n\t}","location":{"start":111,"insert":111,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"27605d92-2808-3dbf-b040-96851b7fbbbe","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"updates the position of an object by adding a specified vector to its current position.","params":[{"name":"addVec","type_name":"Vector3f","description":"3D vector to be added to the current position of the object.\n\n* `addVec`: A `Vector3f` object representing a 3D vector with x, y, and z components.\n* `x`, `y`, and `z`: The individual components of the vector.","complex_type":true}],"usage":{"language":"java","code":"Transform myTransform = new Transform(); \nVector3f pos = new Vector3f(5, -7, 10);\nmyTransform.setPos(pos);\n\n// Adding a Vector3f of (2, -4, 8) to the position of myTransform\nVector3f addVec = new Vector3f(2, -4, 8);\nmyTransform.addToPos(addVec);\n\nSystem.out.println(\"Position after adding: \" + myTransform.getPos());\n","description":"\nThe resulting output would be: Position after adding (7, -11, 18)."},"name":"addToPos","code":"public void addToPos(Vector3f addVec) { this.setPos(this.getPos().add(addVec)); }","location":{"start":115,"insert":115,"offset":" ","indent":1},"item_type":"method","length":1},{"id":"a926200e-4d5a-8eba-994b-bba6d7be9c70","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"retrieves the current rotation value of an object as a Quaternion.","params":[],"returns":{"type_name":"Quaternion","description":"a Quaternion object representing the rotation of the entity.\n\n* The `rot` variable returned is an instance of the Quaternion class.\n* It represents a 4D mathematical object that represents a rotation in 3D space.\n* The quaternion structure consists of a scalar part and a vector part, both of which are multiplied together to produce the final rotation value.\n* The scalar part is typically referred to as the \"axis\" of the rotation, while the vector part is the \"angle\" of the rotation.","complex_type":true},"usage":{"language":"java","code":"Transform transform = new Transform();\n// Set the position, rotation and scale of the transform\ntransform.setPos(new Vector3f(1.0f, 2.0f, 3.0f));\ntransform.setRot(new Quaternion());\ntransform.setScale(new Vector3f(4.0f, 5.0f, 6.0f));\n\n// Get the rotation of the transform\nQuaternion rotation = transform.getRot();\n","description":""},"name":"getRot","code":"public Quaternion getRot() {\n\t\treturn rot;\n\t}","location":{"start":117,"insert":117,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"843f8724-4d2e-eab9-7249-888a7ac38e2c","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"sets the rotational component of an object, represented by a `Quaternion` instance, to the given value.","params":[{"name":"rotation","type_name":"Quaternion","description":"4-dimensional quaternion that specifies the rotational transformation to be applied to the entity represented by the `this` reference.\n\n1. `Quaternion rotation`: This is the data type of the variable `rot`. It represents a 4D vector that describes the orientation of an object in 3D space using a mathematical construct called a quaternion. Quaternions are often used to represent rotations in computer graphics and other fields where rotational movements need to be mathematically represented.\n2. `this.rot`: This is a reference to the instance variable `rot` within the same class. It stores the deserialized value of `rotation`.\n3. No attributes are found for this explanation.","complex_type":true}],"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    Transform transform = new Transform();\n    Quaternion rotation = new Quaternion(1, 0, 0, 0);\n    transform.setRot(rotation);\n  }\n}\n","description":""},"name":"setRot","code":"public void setRot(Quaternion rotation) {\n\t\tthis.rot = rotation;\n\t}","location":{"start":121,"insert":121,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"4a1d77ab-8d41-b6ad-7b4b-24c615dbabaa","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"returns the current scale value of a `Vector3f` object, which can be used to represent 3D positions, vectors, and other geometric data in Java.","params":[],"returns":{"type_name":"Vector3f","description":"a `Vector3f` object representing the current scale of the game entity.\n\nThe `Vector3f` object `scale` represents a 3D vector with magnitude equal to the scaling factor applied to the object. The vector components are not explicitly defined but can be obtained through mathematical operations such as `scale.x`, `scale.y`, and `scale.z`.","complex_type":true},"usage":{"language":"java","code":"Vector3f scale = transform.getScale();\n","description":""},"name":"getScale","code":"public Vector3f getScale() {\n\t\treturn scale;\n\t}","location":{"start":125,"insert":125,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"0063ee8e-7776-eab5-a74d-b05ae7aab4b2","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"sets the scale of an object, which affects its size and proportions.","params":[{"name":"scale","type_name":"Vector3f","description":"3D vector that determines the scaling of the object to which the method is applied.\n\n* `this.scale`: The current scale value of the object, which can be a 3D vector representing the magnitude and direction of the scaling transformation.\n* `scale`: The input parameter passed to the function, representing the new scale value that will be applied to the object.","complex_type":true}],"usage":{"language":"java","code":"Transform myTransform = new Transform();\nmyTransform.setScale(new Vector3f(2, 3, 4));\n","description":""},"name":"setScale","code":"public void setScale(Vector3f scale) {\n\t\tthis.scale = scale;\n\t}","location":{"start":129,"insert":129,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"a9ce8ff9-7f03-39a5-cc45-9152d7d05a03","ancestors":["54b42e04-66b4-90a0-3c4f-f9dcccf34b38"],"type":"function","description":"returns an empty string.","params":[],"returns":{"type_name":"empty","description":"an empty string.\n\n* The function returns a string with an empty value.\n* The purpose of this method is to return a simple string with no content.\n* The method name \"toString\" suggests that it should return a string representation of the object, but in this case, it actually returns an empty string.","complex_type":true},"usage":{"language":"java","code":"Transform myTransform = new Transform();\nmyTransform.setPos(new Vector3f(1, 2, 3));\nmyTransform.setRot(new Quaternion(4, 5, 6, 7));\nmyTransform.setScale(new Vector3f(8, 9, 10));\nString str = myTransform.toString(); // String str = \"[POS: 1, 2, 3; ROT: 4, 5, 6, 7; SCALE: 8, 9, 10]\"\n","description":""},"name":"toString","code":"@Override\n\tpublic String toString() { return \"\";\n\t}","location":{"start":133,"insert":133,"offset":" ","indent":1},"item_type":"method","length":3}]}}}