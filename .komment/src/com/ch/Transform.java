{"name":"Transform.java","path":"src/com/ch/Transform.java","content":{"structured":{"description":"","items":[{"id":"5871085c-4e69-4f4c-97ec-7f879092b40d","ancestors":[],"type":"function","name":"update","location":{"offset":"\t","indent":1,"insert":32,"start":32},"returns":false,"params":[],"code":"public void update() {\n\t\tif (oldPos != null) {\n\t\t\tif (!oldPos.equals(pos))\n\t\t\t\toldPos.set(pos);\n\t\t\tif (!oldRot.equals(rot))\n\t\t\t\toldRot.set(rot);\n\t\t\tif (!oldScale.equals(scale))\n\t\t\t\toldScale.set(scale);\n\t\t} else {\n\t\t\toldPos = new Vector3f().set(pos);\n\t\t\toldRot = new Quaternion().set(rot);\n\t\t\toldScale = new Vector3f().set(scale);\n\t\t}\n\t}","skip":false,"length":14,"comment":{"description":"updates the `pos`, `rot`, and `scale` variables of an object based on their current values and the given ones, storing the old values in new vectors for future use.","params":[],"returns":null}},{"id":"b991bc0a-f313-43cf-9ba6-0870f629997a","ancestors":[],"type":"function","name":"rotate","location":{"offset":"\t","indent":1,"insert":47,"start":47},"returns":false,"params":[{"name":"axis","type":"Vector3f"},{"name":"angle","type":"float"}],"code":"public void rotate(Vector3f axis, float angle) {\n\t\trot = new Quaternion(axis, angle).mul(rot).normalized();\n\t}","skip":false,"length":3,"comment":{"description":"transforms a `Vector3f` object by multiplying it with a quaternion representing a rotation around a specified axis, and normalizing the result.","params":[{"name":"axis","type":"Vector3f","description":"3D axis around which the rotation will occur."},{"name":"angle","type":"float","description":"3D rotation angle about the specified `axis`."}],"returns":null}},{"id":"7ff0d75f-8126-429d-bc8f-a418cb656dd0","ancestors":[],"type":"function","name":"lookAt","location":{"offset":"\t","indent":1,"insert":51,"start":51},"returns":false,"params":[{"name":"point","type":"Vector3f"},{"name":"up","type":"Vector3f"}],"code":"public void lookAt(Vector3f point, Vector3f up) {\n\t\trot = getLookAtRotation(point, up);\n\t}","skip":false,"length":3,"comment":{"description":"calculates and returns a rotation matrix that aligns the object's local axis with a provided point and up vector in the world frame of reference.","params":[{"name":"point","type":"Vector3f","description":"3D position of an object or point of interest that the `lookAt()` method is rotating towards."},{"name":"up","type":"Vector3f","description":"3D direction perpendicular to the line of sight and towards which the camera will look."}],"returns":null}},{"id":"b26fd11a-e66f-41f1-bc89-be4652bf8d5d","ancestors":[],"type":"function","name":"getLookAtRotation","location":{"offset":"\t","indent":1,"insert":55,"start":55},"returns":"Quaternion","params":[{"name":"point","type":"Vector3f"},{"name":"up","type":"Vector3f"}],"code":"public Quaternion getLookAtRotation(Vector3f point, Vector3f up) {\n\t\treturn new Quaternion(new Matrix4f().initRotation(point.sub(pos).normalized(), up));\n\t}","skip":false,"length":3,"comment":{"description":"computes a rotation matrix to orient the object's forward vector towards a given point while keeping the object's up vector parallel to its own z-axis.","params":[{"name":"point","type":"Vector3f","description":"3D position from which the look-at rotation is to be computed."},{"name":"up","type":"Vector3f","description":"3D direction perpendicular to the line connecting the `pos` parameter to the `point` parameter, which is used to calculate the rotation quaternion for looking at the `point` from the `pos`."}],"returns":{"type":"Quaternion","description":"a quaternion representing the rotation from the object's current position to look at a point in space."}}},{"id":"53d53806-2edb-4b3a-9f4c-556e610cc307","ancestors":[],"type":"function","name":"hasChanged","location":{"offset":"\t","indent":1,"insert":59,"start":59},"returns":"boolean","params":[],"code":"public boolean hasChanged() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\treturn true;\n\n\t\tif (!pos.equals(oldPos))\n\t\t\treturn true;\n\n\t\tif (!rot.equals(oldRot))\n\t\t\treturn true;\n\n\t\tif (!scale.equals(oldScale))\n\t\t\treturn true;\n\n\t\treturn false;\n\t}","skip":false,"length":15,"comment":{"description":"checks if any of its attributes have changed by comparing them to their previous values. If any have, the function returns `true`. Otherwise, it returns `false`.","params":[],"returns":{"type":"boolean","description":"a boolean value indicating whether the object has changed."}}},{"id":"fa696c69-fd94-49c1-82bd-8b1e40bd2669","ancestors":[],"type":"function","name":"getTransformation","location":{"offset":"\t","indent":1,"insert":75,"start":75},"returns":"Matrix4f","params":[],"code":"public Matrix4f getTransformation() {\n\t\tMatrix4f translationMatrix = new Matrix4f().initTranslation(pos.getX(), pos.getY(), pos.getZ());\n\t\tMatrix4f rotationMatrix = rot.toRotationMatrix();\n\t\tMatrix4f scaleMatrix = new Matrix4f().initScale(scale.getX(), scale.getY(), scale.getZ());\n\n\t\treturn getParentMatrix().mul(translationMatrix.mul(rotationMatrix.mul(scaleMatrix)));\n\t}","skip":false,"length":7,"comment":{"description":"generates a transformation matrix based on the position, rotation, and scale of an object. It returns the multiplication of the parent matrix, translation matrix, rotation matrix, and scale matrix.","params":[],"returns":{"type":"Matrix4f","description":"a transformed matrix representing the combination of translation, rotation, and scaling."}}},{"id":"3baba923-11e3-43dd-b579-7879a1abcccf","ancestors":[],"type":"function","name":"getParentMatrix","location":{"offset":"\t","indent":1,"insert":83,"start":83},"returns":"Matrix4f","params":[],"code":"private Matrix4f getParentMatrix() {\n\t\tif (parent != null && parent.hasChanged())\n\t\t\tparentMatrix = parent.getTransformation();\n\n\t\treturn parentMatrix;\n\t}","skip":false,"length":6,"comment":{"description":"retrieves and returns the transformation matrix of the parent node in a scene graph, taking into account any changes made to the parent node's transformation.","params":[],"returns":{"type":"Matrix4f","description":"a Matrix4f representation of the transformation matrix of the parent node."}}},{"id":"ae8eda4c-44bf-40ec-8466-607864418050","ancestors":[],"type":"function","name":"setParent","location":{"offset":"\t","indent":1,"insert":90,"start":90},"returns":false,"params":[{"name":"parent","type":"Transform"}],"code":"public void setParent(Transform parent) {\n\t\tthis.parent = parent;\n\t}","skip":false,"length":3,"comment":{"description":"sets the `Transform` reference of an object to a given `Transform` object.","params":[{"name":"parent","type":"Transform","description":"3D transform to which the current transform will be attached as a child."}],"returns":null}},{"id":"05a28544-ce43-4818-a2a1-70419f576d5f","ancestors":[],"type":"function","name":"getTransformedPos","location":{"offset":"\t","indent":1,"insert":94,"start":94},"returns":"Vector3f","params":[],"code":"public Vector3f getTransformedPos() {\n\t\treturn getParentMatrix().transform(pos);\n\t}","skip":false,"length":3,"comment":{"description":"returns a transformed position of a GameObject, based on the transformation matrix of its parent GameObject.","params":[],"returns":{"type":"Vector3f","description":"a transformed position value in a Vector3f format."}}},{"id":"8255cde9-240f-4725-92c1-18ca1270f22b","ancestors":[],"type":"function","name":"getTransformedRot","location":{"offset":"\t","indent":1,"insert":98,"start":98},"returns":"Quaternion","params":[],"code":"public Quaternion getTransformedRot() {\n\t\tQuaternion parentRotation = new Quaternion(1, 0, 0, 0);\n\n\t\tif (parent != null)\n\t\t\tparentRotation = parent.getTransformedRot();\n\n\t\treturn parentRotation.mul(rot);\n\t}","skip":false,"length":8,"comment":{"description":"calculates and returns a rotated Quaternion representation of its input, based on the provided parent rotation and multiplication operation.","params":[],"returns":{"type":"Quaternion","description":"a transformed quaternion representing the combination of the parent rotation and the given rotation."}}},{"id":"d5298023-c0d9-4218-8701-7cda025ccc71","ancestors":[],"type":"function","name":"getPos","location":{"offset":"\t","indent":1,"insert":107,"start":107},"returns":"Vector3f","params":[],"code":"public Vector3f getPos() {\n\t\treturn pos;\n\t}","skip":false,"length":3,"comment":{"description":"returns the position of an object in a 3D space as a `Vector3f` object.","params":[],"returns":{"type":"Vector3f","description":"a `Vector3f` object representing the position of the entity."}}},{"id":"3464677d-3bc7-4b01-99f0-5662cabd33bd","ancestors":[],"type":"function","name":"setPos","location":{"offset":"\t","indent":1,"insert":111,"start":111},"returns":false,"params":[{"name":"pos","type":"Vector3f"}],"code":"public void setPos(Vector3f pos) {\n\t\tthis.pos = pos;\n\t}","skip":false,"length":3,"comment":{"description":"sets the position of an object to a specified Vector3f value.","params":[{"name":"pos","type":"Vector3f","description":"3D position of an object in the scene, which is assigned to the `pos` field of the class instance."}],"returns":null}},{"id":"4d64d7ae-ec82-445c-aa69-3300334108a3","ancestors":[],"type":"function","name":"addToPos","location":{"offset":"\t","indent":1,"insert":115,"start":115},"returns":false,"params":[{"name":"addVec","type":"Vector3f"}],"code":"public void addToPos(Vector3f addVec) { this.setPos(this.getPos().add(addVec)); }","skip":false,"length":1,"comment":{"description":"updates the position of an object by adding a vector to its current position.","params":[{"name":"addVec","type":"Vector3f","description":"3D vector to be added to the current position of the object."}],"returns":null}},{"id":"faca9868-3fd2-46a9-951f-8d770b43e042","ancestors":[],"type":"function","name":"getRot","location":{"offset":"\t","indent":1,"insert":117,"start":117},"returns":"Quaternion","params":[],"code":"public Quaternion getRot() {\n\t\treturn rot;\n\t}","skip":false,"length":3,"comment":{"description":"returns the current rotation of an object in a Quaternion format, representing its orientation in 3D space.","params":[],"returns":{"type":"Quaternion","description":"a `Quaternion` object representing the rotation of the object."}}},{"id":"a236ecd6-73e0-4900-82fe-475899c0bd49","ancestors":[],"type":"function","name":"setRot","location":{"offset":"\t","indent":1,"insert":121,"start":121},"returns":false,"params":[{"name":"rotation","type":"Quaternion"}],"code":"public void setRot(Quaternion rotation) {\n\t\tthis.rot = rotation;\n\t}","skip":false,"length":3,"comment":{"description":"sets a quaternion value to a class instance field `rot`.","params":[{"name":"rotation","type":"Quaternion","description":"4D rotational transformation that is applied to the object, modifying its orientation in 3D space."}],"returns":null}},{"id":"c5235215-038f-4799-a655-4f955ec12b9c","ancestors":[],"type":"function","name":"getScale","location":{"offset":"\t","indent":1,"insert":125,"start":125},"returns":"Vector3f","params":[],"code":"public Vector3f getScale() {\n\t\treturn scale;\n\t}","skip":false,"length":3,"comment":{"description":"returns the scale value of the current GameObject.","params":[],"returns":{"type":"Vector3f","description":"a vector representing the scale of the object."}}},{"id":"756c6aad-9a26-4603-95fe-84fd1b4b87dd","ancestors":[],"type":"function","name":"setScale","location":{"offset":"\t","indent":1,"insert":129,"start":129},"returns":false,"params":[{"name":"scale","type":"Vector3f"}],"code":"public void setScale(Vector3f scale) {\n\t\tthis.scale = scale;\n\t}","skip":false,"length":3,"comment":{"description":"sets the scaling factors for an object's position, size, and rotation.","params":[{"name":"scale","type":"Vector3f","description":"3D scaling factor for the GameObject, which is applied to its dimensions upon calling the `setScale()` method."}],"returns":null}},{"id":"055fa94c-daf4-4848-8c06-f9e59f2cd551","ancestors":[],"type":"function","name":"toString","location":{"offset":"\t","indent":1,"insert":133,"start":133},"returns":"String","params":[],"code":"@Override\n\tpublic String toString() { return \"\";\n\t}","skip":false,"length":3,"comment":{"description":"simply returns an empty string, without any additional functionality or modification to the original code.","params":[],"returns":{"type":"String","description":"an empty string."}}}]}}}