{"name":"Model.java","path":"src/com/ch/Model.java","content":{"structured":{"description":"A `Model` class that loads and renders 3D models using the OpenGL library. The class has several methods for loading models from arrays of vertices and indices, binding and unbinding vertex arrays, and enabling and disabling vertex attributaries. The code also includes a static method for loading models from files.","items":[{"id":"891357af-cc6a-41b6-e140-85553da715eb","ancestors":[],"type":"function","description":"TODO","name":"Model","code":"public class Model {\n\n\tprivate int vao, size;\n\t\n\tpublic Model(int vao, int count) {\n\t\tthis.vao = vao;\n\t\tthis.size = count;\n\t}\n\t\n\tpublic void draw() {\n\t\tGL30.glBindVertexArray(vao);\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t\t//GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, size);\n\t\tGL11.glDrawElements(GL11.GL_TRIANGLES, size, GL11.GL_UNSIGNED_INT, 0);\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t\tGL30.glBindVertexArray(0);\n\t}\n\t\n\tpublic static void enableAttribs() {\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t}\n\t\n\tpublic static void disableAttribs() {\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t}\n\t\n\tpublic int getVAO() {\n\t\treturn vao;\n\t}\n\t\n\tpublic int getSize() {\n\t\treturn size;\n\t}\n\t\n\tpublic static Model load(float[] vertices, int[] indices) {\n\t\tint vao = createVAO();\n\t\tstoreIndices(indices);\n\t\tstoreData(0, vertices);\n\t\tunbindVAO();\n\t\tint v_count = indices.length;\n\t\treturn new Model(vao, v_count);\n\t}\n\t\n\tprivate static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}\n\t\n\tprivate static void storeData(int attrib, float[] data) {\n\t\tint vbo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n\t\tGL15.glBufferData(GL15.GL_ARRAY_BUFFER, Util.createFlippedBuffer(data), GL15.GL_STATIC_DRAW);\n\t\tGL20.glVertexAttribPointer(attrib, 3, GL11.GL_FLOAT, false, 5 * 4,     0);\n\t\tGL20.glVertexAttribPointer(attrib + 1, 2, GL11.GL_FLOAT, false, 5 * 4, 3 * 4);\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n\t}\n\t\n\tprivate static void storeIndices(int[] indices) {\n\t\tint ibo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, ibo);\n\t\tGL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, Util.createFlippedBuffer(indices), GL15.GL_STATIC_DRAW);\n\t}\n\t\n\tprivate static void unbindVAO() {\n\t\tGL30.glBindVertexArray(0);\n\t}\n\t\n}","location":{"start":8,"insert":8,"offset":" ","indent":0},"item_type":"class","length":73},{"id":"2f8bb5f3-89a7-199b-864a-885abbba8a9b","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"binds a vertex array object, enables vertex attributes, and calls `glDrawElements` to render a mesh consisting of triangles.","params":[],"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        Model model = new Model(); // Instantiate the model\n        model.draw(); // Call the draw() method on the model to render it\n    }\n}\n","description":""},"name":"draw","code":"public void draw() {\n\t\tGL30.glBindVertexArray(vao);\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t\t//GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, size);\n\t\tGL11.glDrawElements(GL11.GL_TRIANGLES, size, GL11.GL_UNSIGNED_INT, 0);\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t\tGL30.glBindVertexArray(0);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"47b7849c-856a-7c86-4441-6ca502f68fe5","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"enables vertex attribute arrays for vertex positions (vertexAttribArray[0]) and vertex normals (vertexAttribArray[1]).","params":[],"usage":{"language":"java","code":"public class Test {\n    public static void main(String[] args) {\n        Model model = new Model();\n        // Enable attribs 0 and 1 for the model\n        model.enableAttribs();\n    }\n}\n","description":""},"name":"enableAttribs","code":"public static void enableAttribs() {\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t}","location":{"start":28,"insert":28,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"b0e01663-ad69-869b-8b44-9c57c693065a","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"disables both vertex attribute arrays (VAAs) for the current GL context.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tModel model = new Model();\n\tmodel.enableAttribs();\n\t//Do something with the model\n\tmodel.disableAttribs();\n}\n","description":""},"name":"disableAttribs","code":"public static void disableAttribs() {\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"592ec56e-b552-2894-1646-5608be440374","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"retrieves the value of a variable `vao`.","params":[],"returns":{"type_name":"int","description":"an integer value representing the `vao` field.","complex_type":false},"usage":{"language":"java","code":"Model model = Model.load(vertices, indices); \nint vaoId = model.getVAO();\n","description":""},"name":"getVAO","code":"public int getVAO() {\n\t\treturn vao;\n\t}","location":{"start":38,"insert":38,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"8c361e53-1c2d-8688-7549-a8802b783bcb","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"returns the current size of an object's storage.","params":[],"returns":{"type_name":"int","description":"the value of `size`.","complex_type":false},"usage":{"language":"java","code":"int size = model.getSize();\n","description":""},"name":"getSize","code":"public int getSize() {\n\t\treturn size;\n\t}","location":{"start":42,"insert":42,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"00bd6f9e-26e6-8ab1-574c-6995ecf87ff8","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"loads a 3D model from an array of vertices and an array of indices. It creates a Vertex Array Object (VAO), stores the indices, and then stores the vertex data. Finally, it returns a `Model` object representing the loaded model.","params":[{"name":"vertices","type_name":"float[]","description":"3D model's vertices as a floating-point array that is used to create the model's geometry.\n\n* The input `vertices` is an array of float values representing 3D vertices.\n* The length of the `indices` array is specified in the `int[] indices` parameter, indicating the number of indices to be stored and bound to the VAO.","complex_type":true},{"name":"indices","type_name":"int[]","description":"3D model's index data, which is stored in the function and used to bind the vertex array object (VAO) for rendering.\n\n* `indices` is an `int[]` array representing the index data for the model.\n* `v_count` is an `int` variable representing the number of indices in the `indices` array.","complex_type":true}],"returns":{"type_name":"Model","description":"a `Model` object representing the loaded 3D model.\n\n* The output is a `Model` object, which represents a 3D model in the scene.\n* The `vao` field contains the handle to the Vertex Array Object (VAO) used to store and manipulate the vertices of the model.\n* The `v_count` field indicates the number of vertices in the model.\n\nTherefore, the output of the `load` function is a complete 3D model represented by a `Model` object, along with the necessary information to access and manipulate its vertices.","complex_type":true},"usage":{"language":"java","code":"float[] vertices = new float[]{\n\t-1.0f, 1.0f, -1.0f, 0.0f, 0.0f,\n\t-1.0f, 1.0f,  1.0f, 0.0f, 0.0f,\n\t-1.0f, -1.0f, -1.0f, 0.0f, 0.0f,\n\t-1.0f, -1.0f,  1.0f, 0.0f, 0.0f,\n\t1.0f, 1.0f, -1.0f, 0.0f, 0.0f,\n\t1.0f, 1.0f,  1.0f, 0.0f, 0.0f,\n\t1.0f, -1.0f, -1.0f, 0.0f, 0.0f,\n\t1.0f, -1.0f,  1.0f, 0.0f, 0.0f\n};\nint[] indices = new int[]{\n\t0, 1, 2,\n\t0, 2, 3,\n\t4, 5, 6,\n\t4, 6, 7,\n\t8, 9, 10,\n\t8, 10, 11,\n\t12, 13, 14,\n\t12, 14, 15\n};\nModel model = Model.load(vertices, indices);\n","description":""},"name":"load","code":"public static Model load(float[] vertices, int[] indices) {\n\t\tint vao = createVAO();\n\t\tstoreIndices(indices);\n\t\tstoreData(0, vertices);\n\t\tunbindVAO();\n\t\tint v_count = indices.length;\n\t\treturn new Model(vao, v_count);\n\t}","location":{"start":46,"insert":46,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"197c53c3-3ba3-6abb-9c45-d579217471a3","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"creates a new vertex array object (VAO) and binds it to the current GL context, allowing for manipulation of vertices within the context.","params":[],"returns":{"type_name":"int","description":"an integer value representing a vertex array object (VBO) handle.","complex_type":false},"usage":{"language":"java","code":"private static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}\n\npublic static void main(String[] args) {\n\t\tcreateVAO();\n}\n","description":""},"name":"createVAO","code":"private static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}","location":{"start":55,"insert":55,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"99df0dc8-a46a-169e-1e4d-dc6d560baf36","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"genarates a vertex buffer object (VBO) and binds it to a GPU, storing an array of floats data in it. It then sets up vertex attributers for the data, specifying the layout and format of the data.","params":[{"name":"attrib","type_name":"int","description":"2D vertex attribute that stores the data to be displayed in the current frame.","complex_type":false},{"name":"data","type_name":"float[]","description":"3D float array that will be stored in a VBO (Vertex Buffer Object) and passed as vertex attributes to the GPU for rendering.\n\n* The input `data` is an array of 3D vectors represented as 4-element floating-point arrays.\n* The array is created using the `Util.createFlippedBuffer()` method, which may destructure the input data if appropriate.\n* The buffer data is stored in `vbo`, a variable generated by `GL15.glGenBuffers()`.\n* The `GL20.glVertexAttribPointer()` function sets up vertex attributes for the buffer data, specifying the format of the data (3D vectors represented as 4-element floating-point arrays) and the offset into the buffer where the data can be found.","complex_type":true}],"usage":{"language":"java","code":"private static float[] vertices = new float[] {\n   -0.5f, 0.5f, 0.0f, // Vertex 1 position\n   0.5f, 0.5f, 0.0f, // Vertex 2 position\n   0.5f, -0.5f, 0.0f, // Vertex 3 position\n   -0.5f, -0.5f, 0.0f // Vertex 4 position\n};\nstoreData(0, vertices);\n","description":"\nThis code would create a new float array called \"vertices\" and then call the method storeData with two arguments of (0, vertices). The first argument is an integer that represents the attribute we want to use on the VAO, in this case 0. The second argument is the array of floats that contains the vertex data. The method will bind a VBO to the currently bound VAO and store the vertex data inside it, and then set up the Vertex Attrib Pointer for attribute zero with three components per vertex, each component being a float value."},"name":"storeData","code":"private static void storeData(int attrib, float[] data) {\n\t\tint vbo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n\t\tGL15.glBufferData(GL15.GL_ARRAY_BUFFER, Util.createFlippedBuffer(data), GL15.GL_STATIC_DRAW);\n\t\tGL20.glVertexAttribPointer(attrib, 3, GL11.GL_FLOAT, false, 5 * 4,     0);\n\t\tGL20.glVertexAttribPointer(attrib + 1, 2, GL11.GL_FLOAT, false, 5 * 4, 3 * 4);\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n\t}","location":{"start":61,"insert":61,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"308d34fa-5234-71b3-c645-e8a0c6953ce1","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"generates a buffer for storing element indices and binds it, then buffers the indices data using `GL_STATIC_DRAW`.","params":[{"name":"indices","type_name":"int[]","description":"3D vertices of an object as an integer array, which is then passed to the `GL15.glBufferData()` method to store them in a buffer for later use in a 3D rendering context.\n\n* `indices` is an integer array that represents a set of indices for rendering 3D elements in a graphics pipeline.\n* The length of the array indicates the number of elements to be rendered.\n* Each element in the array is represented by an integer value between 0 and 1, inclusive, indicating the corresponding vertex position in 3D space.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    int[] indices = new int[] { 0, 1, 2, 3 };\n    Model.storeIndices(indices);\n}\n","description":"\nIn this example, the method is being called with an int array of four elements: 0, 1, 2, and 3. The method creates a new vertex buffer object (VBO) using the GL15 class' glGenBuffers() method, binds it to the element array buffer target using the GL15 class' glBindBuffer() method, sets its data store using the GL15 class' glBufferData() method, and finally unbinds it from the element array buffer target using the GL30 class' glBindVertexArray() method."},"name":"storeIndices","code":"private static void storeIndices(int[] indices) {\n\t\tint ibo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, ibo);\n\t\tGL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, Util.createFlippedBuffer(indices), GL15.GL_STATIC_DRAW);\n\t}","location":{"start":70,"insert":70,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"388ac041-5a59-a5a7-5a46-b431a285292a","ancestors":["891357af-cc6a-41b6-e140-85553da715eb"],"type":"function","description":"unbinds a vertex array object (VAO) from the current GL context, releasing the associated memory and rendering state.","params":[],"usage":{"language":"java","code":"private static void unbindVAO() {\n\tGL30.glBindVertexArray(0);\n}\n","description":"\nThis is a simple java method that uses the GL30 library to bind the VAO to 0. This method is used to unbind the vertex array object, which will prevent any further draw calls from using it."},"name":"unbindVAO","code":"private static void unbindVAO() {\n\t\tGL30.glBindVertexArray(0);\n\t}","location":{"start":76,"insert":76,"offset":" ","indent":1},"item_type":"method","length":3}]}}}