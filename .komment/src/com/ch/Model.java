{"name":"Model.java","path":"src/com/ch/Model.java","content":{"structured":{"description":"A `Model` class that represents a 3D model in an OpenGL environment. The `Model` class has several methods for loading and rendering the model, including a `draw()` method that draws the model's vertices and indices using a vertex array object (VAO) and element array buffer (EAB). The code also includes utility methods for creating and binding VAOs and EABs.","items":[{"id":"5a955967-1e76-ffba-4d4a-8b58098f6088","ancestors":[],"type":"function","description":"in the provided code is used to manage vertex attributes and indices for rendering 3D models. It provides methods to enable and disable vertex attribs, bind and unbind vertex arrays, and load data from arrays. The class also provides a method to get the VAO and size of the model.","name":"Model","code":"public class Model {\n\n\tprivate int vao, size;\n\t\n\tpublic Model(int vao, int count) {\n\t\tthis.vao = vao;\n\t\tthis.size = count;\n\t}\n\t\n\tpublic void draw() {\n\t\tGL30.glBindVertexArray(vao);\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t\t//GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, size);\n\t\tGL11.glDrawElements(GL11.GL_TRIANGLES, size, GL11.GL_UNSIGNED_INT, 0);\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t\tGL30.glBindVertexArray(0);\n\t}\n\t\n\tpublic static void enableAttribs() {\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t}\n\t\n\tpublic static void disableAttribs() {\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t}\n\t\n\tpublic int getVAO() {\n\t\treturn vao;\n\t}\n\t\n\tpublic int getSize() {\n\t\treturn size;\n\t}\n\t\n\tpublic static Model load(float[] vertices, int[] indices) {\n\t\tint vao = createVAO();\n\t\tstoreIndices(indices);\n\t\tstoreData(0, vertices);\n\t\tunbindVAO();\n\t\tint v_count = indices.length;\n\t\treturn new Model(vao, v_count);\n\t}\n\t\n\tprivate static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}\n\t\n\tprivate static void storeData(int attrib, float[] data) {\n\t\tint vbo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n\t\tGL15.glBufferData(GL15.GL_ARRAY_BUFFER, Util.createFlippedBuffer(data), GL15.GL_STATIC_DRAW);\n\t\tGL20.glVertexAttribPointer(attrib, 3, GL11.GL_FLOAT, false, 5 * 4,     0);\n\t\tGL20.glVertexAttribPointer(attrib + 1, 2, GL11.GL_FLOAT, false, 5 * 4, 3 * 4);\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n\t}\n\t\n\tprivate static void storeIndices(int[] indices) {\n\t\tint ibo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, ibo);\n\t\tGL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, Util.createFlippedBuffer(indices), GL15.GL_STATIC_DRAW);\n\t}\n\t\n\tprivate static void unbindVAO() {\n\t\tGL30.glBindVertexArray(0);\n\t}\n\t\n}","location":{"start":8,"insert":8,"offset":" ","indent":0,"comment":null},"item_type":"class","length":73},{"id":"48f26e19-69f8-508b-c14d-8e8792bf2b53","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"binds a vertex array object (VAO), enables vertex attrib arrays for position and texture coord, and renders triangles using `glDrawElements`.","params":[],"usage":{"language":"java","code":"public class SomeClass {\n    public static void main(String[] args) {\n        Model model = new Model();\n        \n        // Create some vertices and indices\n        float[] vertices = { /* ... */ };\n        int[] indices = { /* ... */ };\n        \n        // Load the vertices and indices into a VAO\n        model.load(vertices, indices);\n        \n        // Draw the VAO using GL11.glDrawElements\n        model.draw();\n    }\n}\n","description":""},"name":"draw","code":"public void draw() {\n\t\tGL30.glBindVertexArray(vao);\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t\t//GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, size);\n\t\tGL11.glDrawElements(GL11.GL_TRIANGLES, size, GL11.GL_UNSIGNED_INT, 0);\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t\tGL30.glBindVertexArray(0);\n\t}","location":{"start":17,"insert":17,"offset":" ","indent":1,"comment":null},"item_type":"method","length":10},{"id":"20276913-0f3c-2399-594b-b4293877a941","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"enables vertex attribute arrays for two attributes (vertex position and color) using the `glEnableVertexAttribArray` method from OpenGL API.","params":[],"name":"enableAttribs","code":"public static void enableAttribs() {\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t}","location":{"start":28,"insert":28,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"88b3a341-95e4-20b2-ec4a-77c5680fe02e","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"disables both vertex attributes in a shader program using `glDisableVertexAttribArray`.","params":[],"name":"disableAttribs","code":"public static void disableAttribs() {\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t}","location":{"start":33,"insert":33,"offset":" ","indent":1,"comment":null},"item_type":"method","length":4},{"id":"3f3d8630-f2a8-24ac-5a48-0d5983e6ce16","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"returns the value of `vao`.","params":[],"returns":{"type_name":"int","description":"an integer value representing the VAO.","complex_type":false},"usage":{"language":"java","code":"Model model = Model.load(...);\nint vaoID = model.getVAO(); // Obtain the VAO ID for the model.\nGL30.glBindVertexArray(vaoID); // Bind the VAO to the GL context.\nmodel.draw(); // Draw the model using the bound VAO.\n","description":""},"name":"getVAO","code":"public int getVAO() {\n\t\treturn vao;\n\t}","location":{"start":38,"insert":38,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"76cbc45a-3cea-4689-7649-92b95046f05d","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"returns the current size of an object's storage.","params":[],"returns":{"type_name":"int","description":"the value of `size`.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        Model model = new Model();\n        int size = model.getSize();\n        System.out.println(\"Model has \" + size + \" vertices\");\n    }\n}\n","description":"\nIn the above example, a new Model object is created and then its getSize() method is called to retrieve the number of vertices in the model. The returned value is then printed to the console using System.out.println()."},"name":"getSize","code":"public int getSize() {\n\t\treturn size;\n\t}","location":{"start":42,"insert":42,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"0b2cb042-1ec1-3d8a-3b4c-49af1c3eeb76","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"loads data into a model. It creates a Vertex Array Object (VAO) and stores indices and vertices data. It then unbinds the VAO, returns the model instance and the number of vertices stored.","params":[{"name":"vertices","type_name":"float[]","description":"3D model's geometry data, consisting of a floating-point array of vertices that define the model's shape.\n\n* `vertices` is an array of floating-point numbers representing 3D vertices.\n* The length of the `vertices` array is determined by the number of indices stored in `indices`.\n* Each element in `vertices` represents a 3D vertex with three components (x, y, z) representing its position in space.","complex_type":true},{"name":"indices","type_name":"int[]","description":"3D model's vertex index array, which is used to store the indices of the vertices that make up the model.\n\n* `indices` is an array of integers that represents the index of each vertex in the model.\n* The length of `indices` is equal to the number of vertices in the model, which is determined by the size of the `vertices` array passed as an argument.\n* Each element of `indices` corresponds to a unique vertex in the model, with the first vertex having index 0 and the last vertex having index `v_count-1`.","complex_type":true}],"returns":{"type_name":"Model","description":"a `Model` object representing the 3D model.\n\n* The returned output is of type `Model`.\n* The `vao` field contains the value of an integer that represents the vertex array object (VAO) created by the function.\n* The `v_count` field contains the value of an integer that represents the number of vertices stored in the VAO.\n\nThe output is a combination of a VAO and the number of vertices it contains, which are used to render 3D objects in a graphics pipeline.","complex_type":true},"name":"load","code":"public static Model load(float[] vertices, int[] indices) {\n\t\tint vao = createVAO();\n\t\tstoreIndices(indices);\n\t\tstoreData(0, vertices);\n\t\tunbindVAO();\n\t\tint v_count = indices.length;\n\t\treturn new Model(vao, v_count);\n\t}","location":{"start":46,"insert":46,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"906a9a4e-0841-e99a-a347-d83fd06eda21","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"creates a vertex array object (VBO) using the `glGenVertexArrays` method and binds it with `glBindVertexArray`. The created VBO is returned as an integer value.","params":[],"returns":{"type_name":"int","description":"an integer value representing the newly created vertex array object (VAO).","complex_type":false},"name":"createVAO","code":"private static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}","location":{"start":55,"insert":55,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"18b68c4c-197d-01ac-2f42-b86746cdeb89","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"genrates a vertex buffer object (VBO) and stores float data in it using `glBufferData`. It also sets vertex attributepoints for the data using `glVertexAttribPointer`.","params":[{"name":"attrib","type_name":"int","description":"2D vertex attribute index that contains the data to be stored in the VBO.","complex_type":false},{"name":"data","type_name":"float[]","description":"3D data to be stored in the VBO buffer.\n\n* `data` is an array of `float` type.\n* The length of the array is determined by the value of `Util.createFlippedBuffer(data)`, which is a method that creates a buffer object from the input data.\n* The buffer is bound to the vertex attribute pointer using `GL20.glVertexAttribPointer()`.\n* Two vertex attributes are defined in the function, one with 3 float values and another with 2 float values.\n* The first vertex attribute is defined as `GL11.GL_FLOAT`, indicating that the data should be stored as floating-point numbers.\n* The second vertex attribute is defined as `GL11.GL_FLOAT`, indicating that the data should be stored as floating-point numbers.\n* The `false` value for the `glBufferData()` method indicates that the buffer data should be stored in a static draw mode, meaning that it will be stored permanently in the GPU memory.","complex_type":true}],"name":"storeData","code":"private static void storeData(int attrib, float[] data) {\n\t\tint vbo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n\t\tGL15.glBufferData(GL15.GL_ARRAY_BUFFER, Util.createFlippedBuffer(data), GL15.GL_STATIC_DRAW);\n\t\tGL20.glVertexAttribPointer(attrib, 3, GL11.GL_FLOAT, false, 5 * 4,     0);\n\t\tGL20.glVertexAttribPointer(attrib + 1, 2, GL11.GL_FLOAT, false, 5 * 4, 3 * 4);\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n\t}","location":{"start":61,"insert":61,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"5ef7e210-afd2-8881-374d-a349bd351551","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"generates a new buffer object and binds it to an element array buffer slot, then stores the provided integer indices in the buffer using the `GLBufferData` method with `GL_STATIC_DRAW`.","params":[{"name":"indices","type_name":"int[]","description":"3D vertex indices of a geometric shape to be stored in an element array buffer for further rendering operations.\n\n* `indices` is an array of integers that represents the indices of vertices in a 3D model.\n* The size of the array is determined by the number of vertices in the model.\n* Each element of the array corresponds to a vertex in the model, with each vertex having an index assigned to it.\n* The values stored in the `indices` array are unique and non-negative, representing the order in which the vertices were defined in the 3D model.","complex_type":true}],"name":"storeIndices","code":"private static void storeIndices(int[] indices) {\n\t\tint ibo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, ibo);\n\t\tGL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, Util.createFlippedBuffer(indices), GL15.GL_STATIC_DRAW);\n\t}","location":{"start":70,"insert":70,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"d6ad114c-06ca-6d90-3f4c-e06ecf658cb4","ancestors":["5a955967-1e76-ffba-4d4a-8b58098f6088"],"type":"function","description":"binds a vertex array object (VAO) to a specific context, disabling its association with any vertex buffer objects (VBOs) or element arrays (EBOs).","params":[],"name":"unbindVAO","code":"private static void unbindVAO() {\n\t\tGL30.glBindVertexArray(0);\n\t}","location":{"start":76,"insert":76,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3}]}}}