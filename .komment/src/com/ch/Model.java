{"name":"Model.java","path":"src/com/ch/Model.java","content":{"structured":{"description":"","items":[{"id":"4e4c1555-e674-4d49-8798-c2de1c198f75","ancestors":[],"type":"function","name":"draw","location":{"offset":"\t","indent":1,"insert":17,"start":17},"returns":false,"params":[],"code":"public void draw() {\n\t\tGL30.glBindVertexArray(vao);\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t\t//GL11.glDrawArrays(GL11.GL_TRIANGLES, 0, size);\n\t\tGL11.glDrawElements(GL11.GL_TRIANGLES, size, GL11.GL_UNSIGNED_INT, 0);\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t\tGL30.glBindVertexArray(0);\n\t}","skip":false,"length":10,"comment":{"description":"binds a vertex array object, enables vertex attributes, and then draws a set of triangles using `glDrawElements`.","params":[],"returns":null}},{"id":"420fb269-ff12-4927-a6b9-2a5d42951fa9","ancestors":[],"type":"function","name":"enableAttribs","location":{"offset":"\t","indent":1,"insert":28,"start":28},"returns":false,"params":[],"code":"public static void enableAttribs() {\n\t\tGL20.glEnableVertexAttribArray(0);\n\t\tGL20.glEnableVertexAttribArray(1);\n\t}","skip":false,"length":4,"comment":{"description":"enables vertex attributes for two attributes, specified by the indices passed as arguments.","params":[],"returns":null}},{"id":"06a6342e-0e02-4eda-b0c0-bb4cc3c6141f","ancestors":[],"type":"function","name":"disableAttribs","location":{"offset":"\t","indent":1,"insert":33,"start":33},"returns":false,"params":[],"code":"public static void disableAttribs() {\n\t\tGL20.glDisableVertexAttribArray(0);\n\t\tGL20.glDisableVertexAttribArray(1);\n\t}","skip":false,"length":4,"comment":{"description":"disables the vertex attribute arrays for two attributes, specified by the function arguments.","params":[],"returns":null}},{"id":"8dc06ef5-5c9f-4ed3-ad8d-7857cc0dba73","ancestors":[],"type":"function","name":"getVAO","location":{"offset":"\t","indent":1,"insert":38,"start":38},"returns":"int","params":[],"code":"public int getVAO() {\n\t\treturn vao;\n\t}","skip":false,"length":3,"comment":{"description":"returns the value of the `vao` field.","params":[],"returns":{"type":"int","description":"an integer representing the value of `vao`."}}},{"id":"f9829833-f82e-4fa7-8a2f-f824d5d18129","ancestors":[],"type":"function","name":"getSize","location":{"offset":"\t","indent":1,"insert":42,"start":42},"returns":"int","params":[],"code":"public int getSize() {\n\t\treturn size;\n\t}","skip":false,"length":3,"comment":{"description":"returns the value of `size`.","params":[],"returns":{"type":"int","description":"the value of the `size` field."}}},{"id":"1b8e24db-8eee-47b5-bbbf-026de621b02c","ancestors":[],"type":"function","name":"load","location":{"offset":"\t","indent":1,"insert":46,"start":46},"returns":"Model","params":[{"name":"vertices","type":"float[]"},{"name":"indices","type":"int[]"}],"code":"public static Model load(float[] vertices, int[] indices) {\n\t\tint vao = createVAO();\n\t\tstoreIndices(indices);\n\t\tstoreData(0, vertices);\n\t\tunbindVAO();\n\t\tint v_count = indices.length;\n\t\treturn new Model(vao, v_count);\n\t}","skip":false,"length":8,"comment":{"description":"loads a model from vertex and index data stored elsewhere, creating and binding a Vertex Array Object (VAO) to store the indices, and then returning a new Model object containing the VAO and number of vertices.","params":[{"name":"vertices","type":"float[]","description":"3D model's geometry, which is stored as an array of floating-point values."},{"name":"indices","type":"int[]","description":"3D model's index array that contains the vertices' indices in the vertex buffer object (VBO)."}],"returns":{"type":"Model","description":"a `Model` object containing the loaded data."}}},{"id":"eb376487-59c0-4c29-a1a5-4fc4457ac6e1","ancestors":[],"type":"function","name":"createVAO","location":{"offset":"\t","indent":1,"insert":55,"start":55},"returns":"int","params":[],"code":"private static int createVAO() {\n\t\tint vao = GL30.glGenVertexArrays();\n\t\tGL30.glBindVertexArray(vao);\n\t\treturn vao;\n\t}","skip":false,"length":5,"comment":{"description":"generates a new vertex array object (VBO) and binds it to the current context, allowing for manipulation of vertices in the 3D graphics pipeline.","params":[],"returns":{"type":"int","description":"an integer value representing the generated vertex array object (Vao)."}}},{"id":"039f587f-efb8-4ddf-914c-dac18192dd03","ancestors":[],"type":"function","name":"storeData","location":{"offset":"\t","indent":1,"insert":61,"start":61},"returns":false,"params":[{"name":"attrib","type":"int"},{"name":"data","type":"float[]"}],"code":"private static void storeData(int attrib, float[] data) {\n\t\tint vbo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vbo);\n\t\tGL15.glBufferData(GL15.GL_ARRAY_BUFFER, Util.createFlippedBuffer(data), GL15.GL_STATIC_DRAW);\n\t\tGL20.glVertexAttribPointer(attrib, 3, GL11.GL_FLOAT, false, 5 * 4,     0);\n\t\tGL20.glVertexAttribPointer(attrib + 1, 2, GL11.GL_FLOAT, false, 5 * 4, 3 * 4);\n\t\tGL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);\n\t}","skip":false,"length":8,"comment":{"description":"creates a new VBO and binds it to an attribute in a shader program","params":[{"name":"attrib","type":"int","description":"3D attribute being stored, specifying the buffer object (VBO) for storing the data in the given format."},{"name":"data","type":"float[]","description":"3D vertex data to be stored in the VBO."}],"returns":null}},{"id":"fa3ecad1-6015-4b0c-90b9-8e681cf0b897","ancestors":[],"type":"function","name":"storeIndices","location":{"offset":"\t","indent":1,"insert":70,"start":70},"returns":false,"params":[{"name":"indices","type":"int[]"}],"code":"private static void storeIndices(int[] indices) {\n\t\tint ibo = GL15.glGenBuffers();\n\t\tGL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, ibo);\n\t\tGL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, Util.createFlippedBuffer(indices), GL15.GL_STATIC_DRAW);\n\t}","skip":false,"length":5,"comment":{"description":"genrates a new buffer for storing indices, binds it, and buffers the indices data using the `GL_STATIC_DRAW` mode.","params":[{"name":"indices","type":"int[]","description":"3D coordinates of the vertices that make up the geometry to be rendered, and is used to store them in a buffer for later use by the GPU."}],"returns":null}},{"id":"33d93358-b973-4422-968d-a923fe370d45","ancestors":[],"type":"function","name":"unbindVAO","location":{"offset":"\t","indent":1,"insert":76,"start":76},"returns":false,"params":[],"code":"private static void unbindVAO() {\n\t\tGL30.glBindVertexArray(0);\n\t}","skip":false,"length":3,"comment":{"description":"disables the Vertex Array Object (VAO) bound to vertex array index 0, effectively releasing any resources associated with it.","params":[],"returns":null}}]}}}