{"name":"Camera3D.java","path":"src/com/ch/Camera3D.java","content":{"structured":{"description":"a `Camera3D` class that inherits from the `Camera` interface. It provides a high-level summary of how the camera works:\n\nThe `Camera3D` class takes in various parameters when it is created, including the field of view (fov), aspect ratio, near and far distances, and sets up the necessary matrices to represent the camera's perspective projection. It also defines an inner class called `CameraStruct3D` that contains the necessary information to calculate the camera's projection matrix.\n\nThe `processInput()` method is where the camera responds to user input, specifically mouse and keyboard inputs. When the left shift key is pressed, the speed of movement is increased by a factor of 10. The method also moves the camera based on the direction specified by the user's input (either forward, backward, left or right).\n\nIn summary, this code defines a 3D camera class that sets up a perspective projection matrix and responds to user input to move the camera around in a 3D space.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera3D.CameraStruct3D Pages: 1 -->\n<svg width=\"198pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 198.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera3D.CameraStruct3D</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"190,-19 0,-19 0,0 190,0 190,-19\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D.CameraStruct3D</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera_1_1CameraStruct.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"176.5,-74 13.5,-74 13.5,-55 176.5,-55 176.5,-74\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera.CameraStruct</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95,-44.66C95,-35.93 95,-25.99 95,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"91.5,-44.75 95,-54.75 98.5,-44.75 91.5,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a811e6ee-ec8a-f8a9-8941-4873590b1dd9","ancestors":[],"type":"function","description":"TODO","name":"Camera3D","code":"public class Camera3D extends Camera {\n\n\tpublic Camera3D(float fov, float aspect, float zNear, float zFar) {\n\t\tsuper(new Matrix4f());\n\t\tthis.values = new CameraStruct3D(fov, aspect, zNear, zFar);\n\t\tcalculateProjectionMatrix(values);\n\t}\n\n\t@Override\n\tpublic Matrix4f calculateProjectionMatrix(CameraStruct data) {\n\t\treturn (projection = data.getAsMatrix4());\n\t}\n\n\t@Override\n\tpublic void adjustToViewport(int width, int height) {\n\t\t((CameraStruct3D) this.values).aspect = (float) width / height;\n\t\tcalculateProjectionMatrix(values);\n\t\ttry {\n\t\t\tcalculateViewMatrix();\n\t\t} catch (NullPointerException e) {\n\t\t}\n\t\tGL11.glViewport(0, 0, width, height);\n\t}\n\n\tprotected class CameraStruct3D extends CameraStruct {\n\n\t\tpublic float fov, aspect, zNear, zFar;\n\n\t\tpublic CameraStruct3D(float fov, float aspect, float zNear, float zFar) {\n\t\t\tthis.fov = fov;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.zNear = zNear;\n\t\t\tthis.zFar = zFar;\n\t\t}\n\n\t\tpublic Matrix4f getAsMatrix4() {\n\t\t\treturn new Matrix4f().initPerspective(fov, aspect, zNear, zFar);\n\t\t}\n\n\t}\n\n\tpublic void processInput(float dt, float speed, float sens) {\n\n\t\tfloat dx = Mouse.getDX();\n\t\tfloat dy = Mouse.getDY();\n\t\tfloat roty = (float)Math.toRadians(dx * sens);\n\t\tgetTransform().rotate(new Vector3f(0, 1, 0), (float) roty);\n\t\tgetTransform().rotate(getTransform().getRot().getRight(), (float) -Math.toRadians(dy * sens));\n\t\t\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT))\n\t\t\tspeed *= 10;\n\t\t\n\t\tfloat movAmt = speed * dt;\n\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_W))\n\t\t\tmove(getTransform().getRot().getForward(), movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_S))\n\t\t\tmove(getTransform().getRot().getForward(), -movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_A))\n\t\t\tmove(getTransform().getRot().getLeft(), movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_D))\n\t\t\tmove(getTransform().getRot().getRight(), movAmt);\n\t\t\n\t}\n\n\tprivate void move(Vector3f dir, float amt) {\n\t\tgetTransform().setPos(getTransform().getPos().add(dir.mul(amt)));\n\t}\n\n}","location":{"start":10,"insert":10,"offset":" ","indent":0},"item_type":"class","length":70},{"id":"6cdf0e58-44b5-7e81-1440-1b4c4de76ec0","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9"],"type":"function","description":"takes a `CameraStruct` object as input and returns a `Matrix4f` object representing the camera's projection matrix.","params":[{"name":"data","type_name":"CameraStruct","description":"3D camera structure, which contains the necessary information for calculating the perspective projection matrix.\n\n1. `getAsMatrix4()` returns a `Matrix4f` object representing the projection matrix as a 4x4 homogeneous transformation matrix.\n2. `projection` is a variable that stores the resulting projection matrix after applying the necessary calculations.","complex_type":true}],"returns":{"type_name":"Matrix4f","description":"a Matrix4f object representing the camera's projection matrix.\n\n1. Matrix4f structure: The function returns a `Matrix4f` object representing the projection matrix.\n2. Data member access: The function uses the `getAsMatrix4()` method to retrieve the projection matrix from the `data` parameter.\n3. Projection matrix creation: The function creates a new `Matrix4f` object that represents the projection matrix, as specified by the `data` parameter.","complex_type":true},"usage":{"language":"java","code":"CameraStruct data = new CameraStruct3D(fov, aspect, zNear, zFar);\nMatrix4f projection = camera.calculateProjectionMatrix(data);\n","description":""},"name":"calculateProjectionMatrix","code":"@Override\n\tpublic Matrix4f calculateProjectionMatrix(CameraStruct data) {\n\t\treturn (projection = data.getAsMatrix4());\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"0f5c5d2c-19bd-17a9-674f-1aa9afbe8488","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9"],"type":"function","description":"updates the view matrix and sets the viewport size based on the provided width and height parameters, ensuring the aspect ratio is maintained.","params":[{"name":"width","type_name":"int","description":"2D viewport size in pixels for which the view matrix is being calculated and displayed.","complex_type":false},{"name":"height","type_name":"int","description":"2D viewport size, which is used to calculate the perspective projection matrix and to set the viewport dimensions in GL11.glViewport().","complex_type":false}],"usage":{"language":"java","code":"@Override\n\tpublic void adjustToViewport(int width, int height) {\n\t\t((CameraStruct3D) this.values).aspect = (float) width / height;\n\t\tcalculateProjectionMatrix(values);\n\t\ttry {\n\t\t\tcalculateViewMatrix();\n\t\t} catch (NullPointerException e) {\n\t\t}\n\t\tGL11.glViewport(0, 0, width, height);\n\t}\n","description":""},"name":"adjustToViewport","code":"@Override\n\tpublic void adjustToViewport(int width, int height) {\n\t\t((CameraStruct3D) this.values).aspect = (float) width / height;\n\t\tcalculateProjectionMatrix(values);\n\t\ttry {\n\t\t\tcalculateViewMatrix();\n\t\t} catch (NullPointerException e) {\n\t\t}\n\t\tGL11.glViewport(0, 0, width, height);\n\t}","location":{"start":23,"insert":23,"offset":" ","indent":1},"item_type":"method","length":10},{"id":"4d9f6cfe-d820-5e94-bb45-085574fce919","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9"],"type":"function","description":"TODO","name":"CameraStruct3D","code":"protected class CameraStruct3D extends CameraStruct {\n\n\t\tpublic float fov, aspect, zNear, zFar;\n\n\t\tpublic CameraStruct3D(float fov, float aspect, float zNear, float zFar) {\n\t\t\tthis.fov = fov;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.zNear = zNear;\n\t\t\tthis.zFar = zFar;\n\t\t}\n\n\t\tpublic Matrix4f getAsMatrix4() {\n\t\t\treturn new Matrix4f().initPerspective(fov, aspect, zNear, zFar);\n\t\t}\n\n\t}","location":{"start":34,"insert":34,"offset":" ","indent":1},"item_type":"class","length":16},{"id":"af3436a3-00bb-e196-f848-8c400aeb94c4","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9","4d9f6cfe-d820-5e94-bb45-085574fce919"],"type":"function","description":"returns a matrix object representing a perspective projection matrix with specified field of view (fov), aspect ratio, near and far distances.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representation of a perspective projection transformation.\n\n1. The returned Matrix4f object represents a 4x4 matrix that contains the perspective projection matrix in homogeneous coordinate format.\n2. The elements of the matrix are initialized using the `initPerspective` method with the given field of view (fov), aspect ratio (aspect), near clipping plane (zNear), and far clipping plane (zFar).\n3. The resulting matrix is a 4x4 homogeneous transformation matrix, which means that it can be used to perform transformations in 4D space using homogeneous coordinates.","complex_type":true},"usage":{"language":"java","code":"Camera3D camera = new Camera3D(90, 16/9, 0.1, 100);\ncamera.getAsMatrix4();\n","description":"\nIn this example, we create a new instance of the Camera3D class and call the getAsMatrix4 method on it. The return value is then stored in the camera variable as a Matrix4f."},"name":"getAsMatrix4","code":"public Matrix4f getAsMatrix4() {\n\t\t\treturn new Matrix4f().initPerspective(fov, aspect, zNear, zFar);\n\t\t}","location":{"start":45,"insert":45,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"4050ca7c-edb5-f5a6-cc43-44f270e8e1ef","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9"],"type":"function","description":"processes input from the mouse and keyboard to update the rotation and translation of an object. It rotates the object based on mouse wheel and shift key inputs, and moves the object along the forward axis based on W, S, A, and D keys.","params":[{"name":"dt","type_name":"float","description":"time step of the simulation, which determines how much the game object moves during each iteration of the program.","complex_type":false},{"name":"speed","type_name":"float","description":"3D movement speed of the object being controlled, which is multiplied by the time step (`dt`) to determine the total movement distance.","complex_type":false},{"name":"sens","type_name":"float","description":"sensitivity of the character's movement in response to mouse movements, which determines how much the character will move based on the user's mouse input.","complex_type":false}],"usage":{"language":"java","code":"public void update(float dt) {\n\tprocessInput(dt, 300f, 180f);\n}\n","description":"\nIn this example the values of \"dt\", \"speed\" and \"sensitivity\" are hardcoded, but you can adjust them to your liking. This method will then use those values to update the position and rotation of the camera in response to user input."},"name":"processInput","code":"public void processInput(float dt, float speed, float sens) {\n\n\t\tfloat dx = Mouse.getDX();\n\t\tfloat dy = Mouse.getDY();\n\t\tfloat roty = (float)Math.toRadians(dx * sens);\n\t\tgetTransform().rotate(new Vector3f(0, 1, 0), (float) roty);\n\t\tgetTransform().rotate(getTransform().getRot().getRight(), (float) -Math.toRadians(dy * sens));\n\t\t\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT))\n\t\t\tspeed *= 10;\n\t\t\n\t\tfloat movAmt = speed * dt;\n\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_W))\n\t\t\tmove(getTransform().getRot().getForward(), movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_S))\n\t\t\tmove(getTransform().getRot().getForward(), -movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_A))\n\t\t\tmove(getTransform().getRot().getLeft(), movAmt);\n\t\tif (Keyboard.isKeyDown(Keyboard.KEY_D))\n\t\t\tmove(getTransform().getRot().getRight(), movAmt);\n\t\t\n\t}","location":{"start":51,"insert":51,"offset":" ","indent":1},"item_type":"method","length":23},{"id":"38c29ad5-fe07-419d-2144-f19c2276f5fe","ancestors":["a811e6ee-ec8a-f8a9-8941-4873590b1dd9"],"type":"function","description":"updates the position of an object by adding a vector direction to its current position, scaled by a given amount.","params":[{"name":"dir","type_name":"Vector3f","description":"3D direction of movement, specifying how much to move the object in that direction.\n\n* `dir` is a `Vector3f` object representing a 3D vector with three components (x, y, z) that can be used to specify a direction or movement.\n* The `mul()` method is used to multiply the `dir` vector by a scalar value (`amt`), which determines the amount of movement in the specified direction.","complex_type":true},{"name":"amt","type_name":"float","description":"amount of movement along the specified direction, as indicated by the `dir` parameter.","complex_type":false}],"usage":{"language":"java","code":"Vector3f forward = transform.getRot().getForward();\nmove(forward, 10); //moves the camera 10 units in front of it.\n","description":""},"name":"move","code":"private void move(Vector3f dir, float amt) {\n\t\tgetTransform().setPos(getTransform().getPos().add(dir.mul(amt)));\n\t}","location":{"start":75,"insert":75,"offset":" ","indent":1},"item_type":"method","length":3}]}}}