{"name":"Shader.java","path":"src/com/ch/Shader.java","content":{"structured":{"description":"A `Shader` class that loads and manages OpenGL shaders. It provides methods for binding the shader program, uniform float and matrix4f operations, and validating the program. The class also includes utility methods for loading shader source code from files and creating buffers for uniform data.","items":[{"id":"06366f1b-ea21-6eaf-424d-7b8d4ee536db","ancestors":[],"type":"function","description":"TODO","name":"Shader","code":"public class Shader {\n\t\n\tprivate int program;\n\t\n\tpublic Shader(int program) {\n\t\tthis.program = program;\n\t}\n\t\n\tpublic void bind() {\n\t\tGL20.glUseProgram(program);\n\t}\n\t\n\tpublic int getProgram() {\n\t\treturn this.program;\n\t}\n\t\n\tpublic void uniformf(String name, float ...vals) {\n\t\tswitch (vals.length) {\n\t\tcase 1:\n\t\t\tGL20.glUniform1f(getLoaction(name), vals[0]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGL20.glUniform2f(getLoaction(name), vals[0], vals[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tGL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tGL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tpublic void unifromMat4(String name, Matrix4f mat) {\n\t\tGL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));\n\t}\n\t\n\tpublic int getLoaction(String name) {\n\t\treturn GL20.glGetUniformLocation(program, name);\n\t}\n\t\n\tprivate static final String VERT = \".vert\", FRAG = \".frag\";\n\t\n\tpublic static Shader loadShader(String filename) {\n\t\tint program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\treturn new Shader(program);\n\t}\n\t\n\tprivate static void loadShader(int target, String src, int program) {\n\t\tint shader = GL20.glCreateShader(target);\n\t\t\n\t\tGL20.glShaderSource(shader, src);\n\t\tGL20.glCompileShader(shader);\n\t\t\n\t\tif (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetShaderInfoLog(shader, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glAttachShader(program, shader);\n\t}\n\t\n\tprivate static void validateProgram(int program) {\n\t\tGL20.glLinkProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glValidateProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n\t\n\tprivate static String getText(String file) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tint ch;\n\t\t\twhile ((ch = is.read()) != -1)\n\t\t\t\ttext += (char) ch;\n\t\t\tis.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\treturn text;\n\t}\n\n}","location":{"start":19,"insert":19,"offset":" ","indent":0},"item_type":"class","length":97},{"id":"5f2a75bc-cf6b-2a83-6048-990981052fa5","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"glues a program to the current GL context, enabling its use for rendering and other graphics-related tasks.","params":[],"usage":{"language":"java","code":"public class ShaderExample {\n    public static void main(String[] args) {\n        int program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\t\n        Shader shader = new Shader(program);\n\t\tshader.bind();\n    }\n}\n","description":""},"name":"bind","code":"public void bind() {\n\t\tGL20.glUseProgram(program);\n\t}","location":{"start":27,"insert":27,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"93ff1a95-7e6a-eba1-5c46-8e5911a1d09f","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"retrieves the value of a field named `program`.","params":[],"returns":{"type_name":"int","description":"an integer value representing the program.","complex_type":false},"usage":{"language":"java","code":"public class Game {\n    private Shader shader;\n    \n    public void init() {\n        //Initialize the shader\n        shader = new Shader(\"shader.vert\", \"shader.frag\");\n        shader.bind();\n    }\n    \n    public void render() {\n        //Rendering code here\n        \n        //Get the program object\n        int program = shader.getProgram();\n        //Use the program object for rendering\n    }\n}\n","description":""},"name":"getProgram","code":"public int getProgram() {\n\t\treturn this.program;\n\t}","location":{"start":31,"insert":31,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"36f6c855-7f89-02b3-214c-a3a1a6df8d2d","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"updates a uniform variable in a shader program based on the length of the passed float array. It calls `glUniformx` with the correct parameter for the length of the array.","params":[{"name":"name","type_name":"String","description":"name of the uniform location for which the values are being set.\n\n* `name`: A `String` variable representing the name of the uniform.\n* `vals`: An array of `float` values to be set as the uniform value. The length of the array determines the number of uniform values to be set.","complex_type":true}],"usage":{"language":"java","code":"Shader shader = Shader.load(\"path/to/shader\");\nshader.bind();\nfloat red = 0.5f; // value for red color component\nfloat green = 0.2f; // value for green color component\nfloat blue = 1.0f; // value for blue color component\nfloat alpha = 0.8f; // value for alpha color component\nshader.uniformf(\"u_color\", red, green, blue, alpha);\n","description":""},"name":"uniformf","code":"public void uniformf(String name, float ...vals) {\n\t\tswitch (vals.length) {\n\t\tcase 1:\n\t\t\tGL20.glUniform1f(getLoaction(name), vals[0]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGL20.glUniform2f(getLoaction(name), vals[0], vals[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tGL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tGL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);\n\t\t\tbreak;\n\t\t}\n\t}","location":{"start":35,"insert":35,"offset":" ","indent":1},"item_type":"method","length":16},{"id":"933ed2fb-1570-07be-0644-edc984ffeba1","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"sets a 4x4 matrix as a uniform buffer object (UBO) using the `glUniformMatrix4` method from OpenGL. The matrix is passed as an argument, and the function returns immediately after setting the matrix in the UBO.","params":[{"name":"name","type_name":"String","description":"name of the uniform variable to which the matrix will be assigned.\n\n* `name`: A string variable representing the name of the uniform location to which the matrix will be assigned.\n* `mat`: A `Matrix4f` object containing the matrix data that will be stored in the uniform location.\n* `getLocation()`: A function used to retrieve the desired uniform location based on the `name` argument.\n* `glUniformMatrix4()`: A method from the OpenGL API that sets a 4x4 matrix as a uniform in the current program. The `false` argument indicates that the matrix should be stored in row-major order.","complex_type":true},{"name":"mat","type_name":"Matrix4f","description":"4x4 homogeneous transformation matrix to be uniformed.\n\n* The input `mat` is an instance of the `Matrix4f` class, which represents a 4x4 matrix with floating-point elements.\n* The `getLinearData()` method returns a buffer containing the raw data elements of the matrix.\n* The `Util.createFlippedBuffer(mat.getLinearData())` call creates a new buffer that is the mirror image of the original buffer, which is necessary for some GPU functions to properly process the input data.","complex_type":true}],"usage":{"language":"java","code":"Shader shader = Shader.loadShader(\"myShader\"); // load a shader called \"myShader\"\nMatrix4f mat = new Matrix4f(); // create a 4x4 matrix\nmat.setIdentity(); // set the matrix to identity (a 16-element array containing zeros and ones)\nshader.uniformMat4(\"myUniform\", mat); // send the uniform variable \"myUniform\" to the shader with the value of the identity matrix\n","description":"\nIn this example, we first load a shader called \"myShader\" using the Shader.loadShader() method. We then create a Matrix4f object and set it to the identity matrix using the setIdentity() method. Finally, we use the uniformMat4() method to send the uniform variable \"myUniform\" with the value of the identity matrix to the shader."},"name":"unifromMat4","code":"public void unifromMat4(String name, Matrix4f mat) {\n\t\tGL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));\n\t}","location":{"start":52,"insert":52,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"40d9c9ea-5690-dcaa-354a-d4fec6e1928b","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"retrieves the location of a uniform in a program using the `GL20.glGetUniformLocation` method.","params":[{"name":"name","type_name":"String","description":"0-based index of a uniform location within a shader program that the `getLocation()` method will retrieve and return.\n\n* `name`: A string variable representing the name of a uniform in a computer graphics program's shader.\n* `program`: An integer value representing the ID of the shader program that the uniform belongs to.","complex_type":true}],"returns":{"type_name":"int","description":"an integer representing the location of a uniform in a program within theGL20 library.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    // Create shader object with location 0\n    Shader shader = new Shader(0);\n\n    // Set uniforms for vertex and fragment shaders\n    shader.uniformf(\"vert_pos\", 1.0f, 2.0f, 3.0f);\n    shader.uniformf(\"vert_col\", 1.0f, 0.5f, 0.75f);\n}\n","description":""},"name":"getLoaction","code":"public int getLoaction(String name) {\n\t\treturn GL20.glGetUniformLocation(program, name);\n\t}","location":{"start":56,"insert":56,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"681014c7-5e45-e689-3946-7cfff97f5a41","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"loads a shader program from a file and creates a new shader object to represent it.","params":[{"name":"filename","type_name":"String","description":"filename of the shader file to be loaded, which is used to identify and load the appropriate vertex and fragment shaders.\n\n* `filename`: A string representing the path to a shader file in the form of \"filename.vert\" or \"filename.frag\".\n* `GL20`: A class that provides methods for creating and managing OpenGL programs, including `glCreateProgram()` for creating a new program, `glCreateShader()` for creating a new shader, and `glLinkProgram()` for linking the shaders to the program.","complex_type":true}],"returns":{"type_name":"Shader","description":"a new `Shader` object representing a shader program created by combining a vertex shader and a fragment shader.\n\n* The `Shader` object returned is an instance of the class `Shader`, which represents a shader program in the OpenGL ES environment.\n* The `program` field of the returned `Shader` object contains the handle to the created shader program, which can be used for further operations such as setting uniforms or binding the shader to a render buffer.\n* The `getText` method used to load the vertex and fragment shaders returns the binary data of the shader code as a string.\n* The `validateProgram` method is called after creating the shader program to ensure that it is valid and can be used for rendering.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\t\tShader shader = Shader.loadShader(\"test\");\n}\n","description":""},"name":"loadShader","code":"public static Shader loadShader(String filename) {\n\t\tint program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\treturn new Shader(program);\n\t}","location":{"start":62,"insert":62,"offset":" ","indent":1},"item_type":"method","length":7},{"id":"54972c7c-fb75-6e8b-bc47-1b775d2159e5","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"creates a shader program and attaches it to the program handle provided.","params":[{"name":"target","type_name":"int","description":"type of shader to be created or modified, with valid values being 0 for vertex shaders and 1 for fragment shaders.","complex_type":false},{"name":"src","type_name":"String","description":"source code of the shader to be compiled.\n\n* `target`: An integer parameter representing the type of shader to be created, which can be either `GL_VERTEX_SHADER` or `GL_FRAGMENT_SHADER`.\n* `src`: A string parameter containing the source code of the shader, which is deserialized from a file or database.\n* `program`: An integer parameter representing the program to which the shader will be attached, which is created using the `GL20.glCreateProgram()` function.","complex_type":true},{"name":"program","type_name":"int","description":"3D graphics program that the loaded shader will be attached to.","complex_type":false}],"usage":{"language":"java","code":"loadShader(GL20.GL_VERTEX_SHADER, \"vertex shader source\", program);\n","description":""},"name":"loadShader","code":"private static void loadShader(int target, String src, int program) {\n\t\tint shader = GL20.glCreateShader(target);\n\t\t\n\t\tGL20.glShaderSource(shader, src);\n\t\tGL20.glCompileShader(shader);\n\t\t\n\t\tif (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetShaderInfoLog(shader, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glAttachShader(program, shader);\n\t}","location":{"start":70,"insert":70,"offset":" ","indent":1},"item_type":"method","length":13},{"id":"0bc2917d-48c4-418d-1643-14938de950da","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"validates a GPU program by linking and validating it with the OpenGL API.","params":[{"name":"program","type_name":"int","description":"3D graphics program to be validated, and its value is passed as an argument to the `glLinkProgram`, `glValidateProgram`, and `glGetProgramInfoLog` functions.","complex_type":false}],"usage":{"language":"java","code":"private static void validateProgram(int program) {\n\tGL20.glLinkProgram(program);\n\n\tif (GL20.glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\tSystem.err.println(GL20.glGetProgramInfoLog(program, 1024));\n\t\tSystem.exit(1);\n\t}\n\n\tGL20.glValidateProgram(program);\n\n\tif (GL20.glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\tSystem.err.println(GL20.glGetProgramInfoLog(program, 1024));\n\t\tSystem.exit(1);\n\t}\n}\n","description":""},"name":"validateProgram","code":"private static void validateProgram(int program) {\n\t\tGL20.glLinkProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glValidateProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","location":{"start":84,"insert":84,"offset":" ","indent":1},"item_type":"method","length":15},{"id":"e9607dcf-b454-ff9a-5345-d57ae731501b","ancestors":["06366f1b-ea21-6eaf-424d-7b8d4ee536db"],"type":"function","description":"reads the contents of a file as a string, handling potential IOExceptions gracefully.","params":[{"name":"file","type_name":"String","description":"path to the file containing the text to be read.\n\n* `file`: A `String` parameter that represents the path to the file to be read.\n* `InputStream is`: An `InputStream` object created from the file specified in `file`. This object provides access to the binary data contained within the file.\n* `int ch`: An integer variable used to read individual bytes from the input stream. The value of this variable ranges from -1 (end of file) to the value of a single byte.\n* `String text`: A `String` variable that is initialized to an empty string and will be populated with the binary data read from the input stream.\n* `IOException e`: An exception object that may be thrown if there is an error reading from the input stream. The `e.printStackTrace()` method is called to display any error messages to the user. If the error is severe enough, the program exits through the `System.exit(1)` method.","complex_type":true}],"returns":{"type_name":"String","description":"a string representation of the contents of a specified file.\n\n1. The output is a String object, which represents the text contents of the given file.\n2. The String object is created by reading the bytes of the file and converting them into characters using the ASCII code.\n3. The resulting String object contains the entire contents of the file as a sequence of characters.","complex_type":true},"usage":{"language":"java","code":"// filename is the name of the text file to read from\nString input = Shader.getText(filename); \n","description":"\nThis will load the contents of the specified file as a string and store it in the input variable."},"name":"getText","code":"private static String getText(String file) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tint ch;\n\t\t\twhile ((ch = is.read()) != -1)\n\t\t\t\ttext += (char) ch;\n\t\t\tis.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\treturn text;\n\t}","location":{"start":100,"insert":100,"offset":" ","indent":1},"item_type":"method","length":14}]}}}