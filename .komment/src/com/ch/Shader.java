{"name":"Shader.java","path":"src/com/ch/Shader.java","content":{"structured":{"description":"","items":[{"id":"b06c6acb-49e5-4d00-8bc6-b9ba6b66e7e6","ancestors":[],"type":"function","name":"bind","location":{"offset":"\t","indent":1,"insert":27,"start":27},"returns":false,"params":[],"code":"public void bind() {\n\t\tGL20.glUseProgram(program);\n\t}","skip":false,"length":3,"comment":{"description":"glUseProgram(program) to associate a program with a set of GL objects.","params":[],"returns":null}},{"id":"76a04dbc-d41e-453e-af3c-e6f7ab5ae3d1","ancestors":[],"type":"function","name":"getProgram","location":{"offset":"\t","indent":1,"insert":31,"start":31},"returns":"int","params":[],"code":"public int getProgram() {\n\t\treturn this.program;\n\t}","skip":false,"length":3,"comment":{"description":"retrieves and returns the value of the `program` field of the current object.","params":[],"returns":{"type":"int","description":"an integer representation of the program."}}},{"id":"879a9c6b-6bee-418b-838b-5ca59fc09c4e","ancestors":[],"type":"function","name":"uniformf","location":{"offset":"\t","indent":1,"insert":35,"start":35},"returns":false,"params":[{"name":"name","type":"String"},{"name":"vals","type":"float"}],"code":"public void uniformf(String name, float ...vals) {\n\t\tswitch (vals.length) {\n\t\tcase 1:\n\t\t\tGL20.glUniform1f(getLoaction(name), vals[0]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGL20.glUniform2f(getLoaction(name), vals[0], vals[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tGL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tGL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);\n\t\t\tbreak;\n\t\t}\n\t}","skip":false,"length":16,"comment":{"description":"sets a uniform float value to a specified location in an OpenGL context based on the length of the provided array of float values.","params":[{"name":"name","type":"String","description":"location of the uniform in the program."},{"name":"vals","type":"float","description":"0 or more values that will be passed to the corresponding GL function, depending on the length of the input array."}],"returns":null}},{"id":"342d1a55-c677-411f-a0a7-f223ec272469","ancestors":[],"type":"function","name":"unifromMat4","location":{"offset":"\t","indent":1,"insert":52,"start":52},"returns":false,"params":[{"name":"name","type":"String"},{"name":"mat","type":"Matrix4f"}],"code":"public void unifromMat4(String name, Matrix4f mat) {\n\t\tGL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));\n\t}","skip":false,"length":3,"comment":{"description":"glUniformMatrix4 on a specified location with false as the second argument and the matrix's linear data in a flipped buffer.","params":[{"name":"name","type":"String","description":"name of the uniform location to which the matrix will be assigned."},{"name":"mat","type":"Matrix4f","description":"4x4 homogeneous transformation matrix that is to be uniformized and passed as a buffer to the `glUniformMatrix4` method."}],"returns":null}},{"id":"b64e4f47-c528-4edf-af09-d64091c2f206","ancestors":[],"type":"function","name":"getLoaction","location":{"offset":"\t","indent":1,"insert":56,"start":56},"returns":"int","params":[{"name":"name","type":"String"}],"code":"public int getLoaction(String name) {\n\t\treturn GL20.glGetUniformLocation(program, name);\n\t}","skip":false,"length":3,"comment":{"description":"retrieves the location of a uniform in a program specified by the `name` parameter using the `GL20.glGetUniformLocation` method.","params":[{"name":"name","type":"String","description":"0-based index of the uniform location to retrieve in the OpenGL program."}],"returns":{"type":"int","description":"an integer representing the location of a uniform in a GPU program."}}},{"id":"ed8ad23e-22e4-4aea-9b5a-51bc0b2d31fe","ancestors":[],"type":"function","name":"loadShader","location":{"offset":"\t","indent":1,"insert":62,"start":62},"returns":"Shader","params":[{"name":"filename","type":"String"}],"code":"public static Shader loadShader(String filename) {\n\t\tint program = GL20.glCreateProgram();\n\t\tloadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);\n\t\tloadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);\n\t\tvalidateProgram(program);\n\t\treturn new Shader(program);\n\t}","skip":false,"length":7,"comment":{"description":"loads a shader from a file and creates a program in the OpenGL ES 2.0 framework. It loads two shaders, one for the vertex and one for the fragment, and validates the program before returning it as a new Shader object.","params":[{"name":"filename","type":"String","description":"path to a shader file that is being loaded into the program."}],"returns":{"type":"Shader","description":"a new instance of the `Shader` class, representing a shader program created from the specified vertex and fragment shaders."}}},{"id":"080343ca-5446-4909-82e4-36e0bc7a6ea7","ancestors":[],"type":"function","name":"loadShader","location":{"offset":"\t","indent":1,"insert":70,"start":70},"returns":false,"params":[{"name":"target","type":"int"},{"name":"src","type":"String"},{"name":"program","type":"int"}],"code":"private static void loadShader(int target, String src, int program) {\n\t\tint shader = GL20.glCreateShader(target);\n\t\t\n\t\tGL20.glShaderSource(shader, src);\n\t\tGL20.glCompileShader(shader);\n\t\t\n\t\tif (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetShaderInfoLog(shader, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glAttachShader(program, shader);\n\t}","skip":false,"length":13,"comment":{"description":"creates a new shader program and attaches it to the program. It compiles the shader source code into a shader object and logs any compilation errors if they occur.","params":[{"name":"target","type":"int","description":"type of shader (vertex or fragment) that the function is creating and compiling."},{"name":"src","type":"String","description":"Shaders source code to be compiled."},{"name":"program","type":"int","description":"3D graphics program in which the generated shader will be attached for use."}],"returns":null}},{"id":"71d55345-1c28-4324-9558-f853ac61d670","ancestors":[],"type":"function","name":"validateProgram","location":{"offset":"\t","indent":1,"insert":84,"start":84},"returns":false,"params":[{"name":"program","type":"int"}],"code":"private static void validateProgram(int program) {\n\t\tGL20.glLinkProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_LINK_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tGL20.glValidateProgram(program);\n\t\t\n\t\tif (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {\n\t\t\tSystem.err.println(glGetProgramInfoLog(program, 1024));\n\t\t\tSystem.exit(1);\n\t\t}\n\t}","skip":false,"length":15,"comment":{"description":"validates a program object by checking its link and validation statuses, printing any error messages to the console if necessary, and exiting the program if validation fails.","params":[{"name":"program","type":"int","description":"3D graphics program to be validated and linked with the OpenGL driver."}],"returns":null}},{"id":"d7b87176-d688-4abd-a4dd-db2554b2a9c5","ancestors":[],"type":"function","name":"getText","location":{"offset":"\t","indent":1,"insert":100,"start":100},"returns":"String","params":[{"name":"file","type":"String"}],"code":"private static String getText(String file) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tInputStream is = new FileInputStream(file);\n\t\t\tint ch;\n\t\t\twhile ((ch = is.read()) != -1)\n\t\t\t\ttext += (char) ch;\n\t\t\tis.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\treturn text;\n\t}","skip":false,"length":14,"comment":{"description":"reads the contents of a specified file and returns the resulting string.","params":[{"name":"file","type":"String","description":"file whose contents are to be read and returned as a string by the `getText()` function."}],"returns":{"type":"String","description":"a string representation of the contents of the specified file."}}}]}}}