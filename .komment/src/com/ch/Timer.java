{"name":"Timer.java","path":"src/com/ch/Timer.java","content":{"structured":{"description":"A `Timer` class with several methods for measuring and updating frames per second (FPS) and time elapsed. The class uses the `Sys` package to get the current time in milliseconds and calculate the FPS. The `init()` method initializes the timer, `calculateDelta()` calculates the delta time between two points, and `updateFPS()` updates the FPS counter. The `getDelta()` and `getFPS()` methods provide access to the calculated values, while the `update()` method updates the FPS and time counters.","items":[{"id":"ad0c08c0-ca4f-9dbe-be4b-127ebba13a55","ancestors":[],"type":"function","description":"TODO","name":"Timer","code":"public class Timer {\n\n\tprivate static float fps;\n\tprivate static long lastFPS;\n\tprivate static long lastFrame;\n\tpublic static float delta;\n\tpublic static float currentFPS;\n    public static float time;\n\n\tprivate static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}\n\n\tpublic static void init() {\n\t\tlastFPS = getTimeS();\n\t}\n\n\tprivate static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}\n\n\tprivate static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}\n\n\tpublic static float getDelta() {\n\t\treturn delta;\n\t}\n\n\tpublic static float getFPS() {\n\t\treturn currentFPS;\n\t}\n\n    public static float getTime() {\n        return time;\n    }\n\n    public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }\n\n}","location":{"start":5,"insert":5,"offset":" ","indent":0},"item_type":"class","length":53},{"id":"ccb79a2e-c41e-ee97-3b42-1b6e485ed7f1","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"multiplies the current time in milliseconds by a factor of 1000 and then divides it by the timer resolution to provide a consistent measurement of time.","params":[],"returns":{"type_name":"long","description":"a converted and scaled version of the current system time, represented as a long value in milliseconds.","complex_type":false},"usage":{"language":"java","code":"Timer timer = new Timer();\ntimer.init();\nfor (int i = 0; i < 100; i++) {\n\ttimer.update();\n\tSystem.out.println(\"FPS: \" + timer.getFPS());\n\tSystem.out.println(\"Delta: \" + timer.getDelta());\n}\n","description":""},"name":"getTimeS","code":"private static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}","location":{"start":14,"insert":14,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"9e3a6d62-1d6a-2084-e14c-d4975041552d","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"initializes a variable `lastFPS` with the current time using the `getTimeS()` method, which is used to track the frame rate of an application.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n    Timer.init();\n}\n","description":""},"name":"init","code":"public static void init() {\n\t\tlastFPS = getTimeS();\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"7efa2ba0-db96-8a93-bf4d-1327686dc0c8","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"calculates the time difference between two points, represented by `time` and `lastFrame`, respectively, using the `getTimeS()` method. It then returns the result as a float value.","params":[],"returns":{"type_name":"float","description":"a floating-point number representing the time difference between two frames.","complex_type":false},"usage":{"language":"java","code":"float delta = Timer.calculateDelta();\n","description":"\nThis line would call the calculateDelta() method and assign its return value to a variable named \"delta\"."},"name":"calculateDelta","code":"private static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}","location":{"start":22,"insert":22,"offset":" ","indent":1},"item_type":"method","length":6},{"id":"9946a9e8-46d6-3197-e748-395a2eb37d25","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"updates the frame rate by incrementing `currentFPS` every 1000 milliseconds, resetting `fps` to zero when the time since the last update exceeds 1 second, and storing the new value of `fps`.","params":[],"usage":{"language":"java","code":"private static void update() {\n    updateFPS();\n}\n","description":"\nIn this example, the method updateFPS() is called in a method named update(). This is done to calculate the frames per second of a program. The method updateFPS updates the currentFPS variable by adding the value of fps to it and resetting fps to zero if one thousand milliseconds have passed since lastFPS was set. This is done to avoid overflows in the fps counter."},"name":"updateFPS","code":"private static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}","location":{"start":29,"insert":29,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"f5795187-f64e-d1a6-1b46-d5eec0131ea3","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"returns the value of the `delta` field, which is a `float` variable storing an unspecified value.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the delta.","complex_type":false},"usage":{"language":"java","code":"import com.ch.*;\n\npublic class Example {\n    public static void main(String[] args) {\n        Timer.init(); // Initializes the timer\n        \n        // Do some work...\n        \n        float delta = Timer.getDelta(); // Get the time between frames (in seconds)\n        System.out.println(\"Delta: \" + delta);\n    }\n}\n","description":"\nIn this example, we first initialize the timer using `Timer.init()`. We then do some work in the main method. Finally, we use `Timer.getDelta()` to get the time between frames (in seconds) and print it to the console."},"name":"getDelta","code":"public static float getDelta() {\n\t\treturn delta;\n\t}","location":{"start":38,"insert":38,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"27b9f721-0a19-3fbc-4841-51e94fed7a9b","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"returns the current frame rate as a floating-point number.","params":[],"returns":{"type_name":"float","description":"the current frame rate in floats.","complex_type":false},"usage":{"language":"java","code":"import com.ch;\n\npublic class Example {\n\tpublic static void main(String[] args) {\n\t\tTimer.init();\n\t\twhile (true) {\n\t\t\tTimer.update();\n\t\t\tSystem.out.println(\"FPS: \" + Timer.getFPS());\n\t\t}\n\t}\n}\n","description":""},"name":"getFPS","code":"public static float getFPS() {\n\t\treturn currentFPS;\n\t}","location":{"start":42,"insert":42,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"c76d26ee-c8ca-c197-8f4d-79f058d46a77","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"returs a floating-point representation of the current time.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of time.","complex_type":false},"usage":{"language":"java","code":"import com.ch;\n\npublic class Main {\n    public static void main(String[] args) {\n        Timer timer = new Timer();\n        timer.init();\n        \n        float time = 0;\n        while (true) {\n            timer.update();\n            \n            // get the current frame time\n            time += timer.getDelta();\n            \n            // do something with the frame time\n            System.out.println(time);\n        }\n    }\n}\n","description":"\nThe above example initializes a Timer object, and calls its init() method to start the timer. The update() method is then called repeatedly inside a loop to update the timer. The getDelta() method is used to retrieve the delta time between frames, which can be used to determine how much time has passed since the last frame. In this example, the current frame time is printed to the console using System.out.println()."},"name":"getTime","code":"public static float getTime() {\n        return time;\n    }","location":{"start":46,"insert":46,"offset":" ","indent":4},"item_type":"method","length":3},{"id":"78d8463b-fc1f-47a1-3642-6c04172ed28f","ancestors":["ad0c08c0-ca4f-9dbe-be4b-127ebba13a55"],"type":"function","description":"updates the frame rate, calculates and stores the time elapsed since the last update, and scales the time value to the range [0, 1].","params":[],"usage":{"language":"java","code":"Timer.init();\nwhile (true) {\n    Timer.update();\n    // do stuff here\n}\n","description":""},"name":"update","code":"public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }","location":{"start":50,"insert":50,"offset":" ","indent":4},"item_type":"method","length":6}]}}}