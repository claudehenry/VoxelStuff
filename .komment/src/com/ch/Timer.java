{"name":"Timer.java","path":"src/com/ch/Timer.java","content":{"structured":{"description":"A `Timer` class that measures the frame rate of an application using the LWJGL library. It calculates the time elapsed between frames and updates the frame rate counter accordingly. The `init()` method initializes the frame rate counter, while the `update()` method updates the frame rate and calculates the delta time between frames. The `getDelta()` method returns the delta time, and the `getFPS()` method returns the current frame rate.","items":[{"id":"5fd4b56b-c026-fe99-cb4f-f60247d22565","ancestors":[],"type":"function","description":"is a Java class that provides functions for tracking and calculating the frame rate of an application. It has several static methods for calculating the current frame rate, the delta time between frames, and the total time elapsed since the initialization of the class. The class also has a private field for storing the current frame rate and a method for updating the frame rate counter.","name":"Timer","code":"public class Timer {\n\n\tprivate static float fps;\n\tprivate static long lastFPS;\n\tprivate static long lastFrame;\n\tpublic static float delta;\n\tpublic static float currentFPS;\n    public static float time;\n\n\tprivate static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}\n\n\tpublic static void init() {\n\t\tlastFPS = getTimeS();\n\t}\n\n\tprivate static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}\n\n\tprivate static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}\n\n\tpublic static float getDelta() {\n\t\treturn delta;\n\t}\n\n\tpublic static float getFPS() {\n\t\treturn currentFPS;\n\t}\n\n    public static float getTime() {\n        return time;\n    }\n\n    public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }\n\n}","location":{"start":5,"insert":5,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53},{"id":"64d7e420-93d9-c2a9-ad40-29ca70001231","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"calculates a timestamp in milliseconds based on the current system time and timer resolution, returning the result in a long value.","params":[],"returns":{"type_name":"long","description":"a long value representing the number of milliseconds since the epoch, calculated by multiplying the current system time in seconds by 1000 and dividing by the timer resolution.","complex_type":false},"name":"getTimeS","code":"private static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}","location":{"start":14,"insert":14,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"c5e384c8-f3ad-93ae-ac47-d3923b9e46bc","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"initializes a variable `lastFPS` and sets its value to the current time, measured in milliseconds.","params":[],"name":"init","code":"public static void init() {\n\t\tlastFPS = getTimeS();\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4bd75016-93bd-e199-304b-2fd98862fbe9","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"calculates the time difference between two points, represented by `lastFrame` and `time`, and returns the result as a floating-point number.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the time difference between two frames.","complex_type":false},"name":"calculateDelta","code":"private static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}","location":{"start":22,"insert":22,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"692317c8-6cb4-e8a4-5445-53574f252e2d","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"updates the frames per second (FPS) counter every 1000 milliseconds by incrementing the current FPS, resetting the counter to zero when a threshold is met, and storing the last FPS for future usage.","params":[],"name":"updateFPS","code":"private static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}","location":{"start":29,"insert":29,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"01e2be3f-327d-f8a6-a444-e712dd8078bd","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"returns the value of `delta`.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the difference between two values.","complex_type":false},"name":"getDelta","code":"public static float getDelta() {\n\t\treturn delta;\n\t}","location":{"start":38,"insert":38,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"4ec83622-f176-2b97-274a-dbc760751e17","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"returns the current frame rate as a floating-point value.","params":[],"returns":{"type_name":"float","description":"the current frames per second (FPS) of the system.","complex_type":false},"name":"getFPS","code":"public static float getFPS() {\n\t\treturn currentFPS;\n\t}","location":{"start":42,"insert":42,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"5e36d66b-d7c5-02a7-bf47-e87958fabec7","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"retrieves the value of the `time` field, which is a floating-point number representing current time.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the current system time.","complex_type":false},"name":"getTime","code":"public static float getTime() {\n        return time;\n    }","location":{"start":46,"insert":46,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"8edc4270-2232-1b9e-d642-3c769443b568","ancestors":["5fd4b56b-c026-fe99-cb4f-f60247d22565"],"type":"function","description":"updates the FPS, calculates and stores the time delta, and sets the time to the time delta.","params":[],"name":"update","code":"public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }","location":{"start":50,"insert":50,"offset":" ","indent":4,"comment":null},"item_type":"method","length":6}]}}}