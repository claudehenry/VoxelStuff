{"name":"Timer.java","path":"src/com/ch/Timer.java","content":{"structured":{"description":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n}\n","items":[{"id":"5b19a4e9-41f1-c7ad-dd47-5967362d4acc","ancestors":[],"type":"function","description":"is a Java utility class that provides real-time measurement of frames per second (FPS) and elapsed time. It has several public static methods for calculating and updating FPS, as well as getting the current FPS, time, and delta value. The class uses Sys.getTime() and Sys.getTimerResolution() to measure time and calculate delta, respectively.","name":"Timer","code":"public class Timer {\n\n\tprivate static float fps;\n\tprivate static long lastFPS;\n\tprivate static long lastFrame;\n\tpublic static float delta;\n\tpublic static float currentFPS;\n    public static float time;\n\n\tprivate static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}\n\n\tpublic static void init() {\n\t\tlastFPS = getTimeS();\n\t}\n\n\tprivate static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}\n\n\tprivate static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}\n\n\tpublic static float getDelta() {\n\t\treturn delta;\n\t}\n\n\tpublic static float getFPS() {\n\t\treturn currentFPS;\n\t}\n\n    public static float getTime() {\n        return time;\n    }\n\n    public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }\n\n}","location":{"start":5,"insert":5,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"79f8566c-191e-298b-cd43-529bdac69b12","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"calculates the current Unix time in milliseconds by multiplying the system time in seconds by 1000 and dividing it by the timer resolution in seconds.","params":[],"returns":{"type_name":"long","description":"a long value representing milliseconds since the Unix epoch.","complex_type":false},"name":"getTimeS","code":"private static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}","location":{"start":14,"insert":14,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"0bb6b920-0011-aba4-b845-b9c769cd1943","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"measures and stores the current FPS in a variable called `lastFPS`.","params":[],"name":"init","code":"public static void init() {\n\t\tlastFPS = getTimeS();\n\t}","location":{"start":18,"insert":18,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"7542cdc5-15e5-67a2-ef46-082174be5fad","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"calculates the time difference between two frames, represented by `time` and `lastFrame`, respectively, and returns it as a float value.","params":[],"returns":{"type_name":"float","description":"a float value representing the time difference between two frames.","complex_type":false},"name":"calculateDelta","code":"private static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}","location":{"start":22,"insert":22,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"2b71febb-b2bd-959d-b04a-6ce4e41da299","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"updates the frames per second (FPS) counter every second, incrementing the FPS count by 1 and resetting it to 0 after 1 second has passed since the last update.","params":[],"name":"updateFPS","code":"private static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}","location":{"start":29,"insert":29,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"86942d89-973b-2f9a-c744-d4a08e9be4da","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"retrieves the value of the `delta` variable, which is presumably used to compute some other value or perform an action.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the difference between two values.","complex_type":false},"name":"getDelta","code":"public static float getDelta() {\n\t\treturn delta;\n\t}","location":{"start":38,"insert":38,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"54318a11-ff0f-2d9b-5448-78bb11193f34","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"retrieves the current frame rate as a floating-point number representing the frames per second (FPS) of an application.","params":[],"returns":{"type_name":"float","description":"the current frame rate of the application in floating-point format.","complex_type":false},"name":"getFPS","code":"public static float getFPS() {\n\t\treturn currentFPS;\n\t}","location":{"start":42,"insert":42,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"ffca9ca8-a9f9-a9a5-2d48-073aebc52911","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"returns the value of a `time` field, which is presumably used to represent a time of day or other time-related metric.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the current time.","complex_type":false},"name":"getTime","code":"public static float getTime() {\n        return time;\n    }","location":{"start":46,"insert":46,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."},{"id":"1d31dbff-b717-9fb4-504e-f5c7bb46c857","ancestors":["5b19a4e9-41f1-c7ad-dd47-5967362d4acc"],"type":"function","description":"updates FPS, calculates and sets delta time, and increases the time variable by the delta value within a range of 0 to 1.","params":[],"name":"update","code":"public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }","location":{"start":50,"insert":50,"offset":" ","indent":4,"comment":null},"item_type":"method","length":6,"docLength":null,"doc":"a `Timer` class with various methods for calculating and updating frame rate (FPS) and time. The class uses the `Sys` package for getting timer resolution and calculating elapsed time. The `init()` method initializes variables for FPS tracking, while the `calculateDelta()` method calculates the delta time between two frames. The `updateFPS()` method updates the FPS counter every second, and the `getDelta()` method returns the delta time. The `getFPS()` method returns the current FPS value, and the `getTime()` method returns the elapsed time since initialization. The `update()` method updates the FPS and time values simultaneously."}]}}}