{"name":"Timer.java","path":"src/com/ch/Timer.java","content":{"structured":{"description":"a `Timer` class with various methods for tracking frame rate and time. The class uses the `Sys` package to get timing resolution and calculate delta time. The `init()` method initializes lastFPS, currentFPS, and time variables. The `calculateDelta()` method calculates the delta time between two frames based on the time difference. The `updateFPS()` method updates the frame rate every 1000 milliseconds and increments fps variable. The `getDelta()` method returns the delta time, while the `getFPS()` method returns the current frame rate. Finally, the `update()` method calls `updateFPS()` and `calculateDelta()` to update the time variable.","items":[{"id":"f882b5ca-2156-f28e-5d48-93741f48a50a","ancestors":[],"type":"function","description":"is a Java class that provides functions to measure the elapsed time and frame rate. The class has several methods for calculating and updating the frame rate, as well as accessing the current frame rate and elapsed time. These methods include `getDelta()`, `getFPS()`, and `getTime()`.","name":"Timer","code":"public class Timer {\n\n\tprivate static float fps;\n\tprivate static long lastFPS;\n\tprivate static long lastFrame;\n\tpublic static float delta;\n\tpublic static float currentFPS;\n    public static float time;\n\n\tprivate static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}\n\n\tpublic static void init() {\n\t\tlastFPS = getTimeS();\n\t}\n\n\tprivate static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}\n\n\tprivate static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}\n\n\tpublic static float getDelta() {\n\t\treturn delta;\n\t}\n\n\tpublic static float getFPS() {\n\t\treturn currentFPS;\n\t}\n\n    public static float getTime() {\n        return time;\n    }\n\n    public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }\n\n}","location":{"start":5,"insert":5,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53},{"id":"1ee9040a-2172-53be-bd4d-aa55ebdbb614","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"calculates seconds since the epoch by multiplying milliseconds by a resolution factor and then dividing by 1000.","params":[],"returns":{"type_name":"long","description":"a long value representing a time interval in milliseconds based on the system's timer resolution.","complex_type":false},"name":"getTimeS","code":"private static long getTimeS() {\n\t\treturn (Sys.getTime() * 1000) / Sys.getTimerResolution();\n\t}","location":{"start":14,"insert":14,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"5a92b771-d569-a6a6-154e-53ec0119cb0b","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"initializes a variable `lastFPS` with the current time's value using the `getTimeS()` method, which captures the FPS (frames per second) of the application at startup.","params":[],"name":"init","code":"public static void init() {\n\t\tlastFPS = getTimeS();\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f5e1ae0d-0cce-46a6-f645-674a2efad36d","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"calculates the time difference between two points, represented by `lastFrame` and `time`, respectively. The returned value is a floating-point number representing the delta time in seconds.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the time difference between two frames.","complex_type":false},"name":"calculateDelta","code":"private static float calculateDelta() {\n\t\tlong time = getTimeS();\n\t\tfloat delta = (int) (time - lastFrame);\n\t\tlastFrame = getTimeS();\n\t\treturn delta;\n\t}","location":{"start":22,"insert":22,"offset":" ","indent":1,"comment":null},"item_type":"method","length":6},{"id":"87073308-a2e3-89bc-9d45-ec76dd5f0775","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"updates the frames per second (FPS) count every 1 second, resetting the counter when 10 seconds have passed since the last update.","params":[],"name":"updateFPS","code":"private static void updateFPS() {\n\t\tif (getTimeS() - lastFPS > 1000) {\n\t\t\tcurrentFPS = fps;\n\t\t\tfps = 0;\n\t\t\tlastFPS += 1000;\n\t\t}\n\t\tfps++;\n\t}","location":{"start":29,"insert":29,"offset":" ","indent":1,"comment":null},"item_type":"method","length":8},{"id":"7fd7a48b-8d8a-0f9c-de4a-29d888c50bf3","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"retrieves the value of the `delta` field, which is a private static variable storing an unknown value.","params":[],"returns":{"type_name":"float","description":"a floating-point value representing the delta.","complex_type":false},"name":"getDelta","code":"public static float getDelta() {\n\t\treturn delta;\n\t}","location":{"start":38,"insert":38,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"9d1ec1bf-549e-5595-4d44-7feecae201f9","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"retrieves the current frame rate per second (FPS) and returns it as a float value.","params":[],"returns":{"type_name":"float","description":"the current frame rate of the application.","complex_type":false},"name":"getFPS","code":"public static float getFPS() {\n\t\treturn currentFPS;\n\t}","location":{"start":42,"insert":42,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"b9253798-75d9-e0ac-f04e-f70aa6527ed8","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"returns the value of a `time` field, which is likely used to store the current time or date.","params":[],"returns":{"type_name":"float","description":"a floating-point representation of the current time.","complex_type":false},"name":"getTime","code":"public static float getTime() {\n        return time;\n    }","location":{"start":46,"insert":46,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"a062bfe8-76d5-af85-534e-fe00196328d8","ancestors":["f882b5ca-2156-f28e-5d48-93741f48a50a"],"type":"function","description":"updates the frame rate, calculates and sets a delta time value, and increments a time variable.","params":[],"name":"update","code":"public static void update() {\n        updateFPS();\n        delta = ((calculateDelta() / 1000));\n        delta = delta < 0 || delta > 1 ? 0 : delta;\n        time += delta;\n    }","location":{"start":50,"insert":50,"offset":" ","indent":4,"comment":null},"item_type":"method","length":6}]}}}