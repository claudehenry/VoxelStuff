{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"","items":[{"id":"25f4992e-8413-490c-8e04-1163e4c3c845","ancestors":[],"type":"function","name":"bind","location":{"offset":"\t","indent":1,"insert":40,"start":40},"returns":false,"params":[],"code":"public void bind() {\n\t\tbind(0);\n\t}","skip":false,"length":3,"comment":{"description":"sets the value of an object's field to a specified value.","params":[],"returns":null}},{"id":"acd0abc9-1b5b-428f-82a7-9c64bd9ac956","ancestors":[],"type":"function","name":"bind","location":{"offset":"\t","indent":1,"insert":44,"start":44},"returns":false,"params":[{"name":"samplerSlot","type":"int"}],"code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","skip":false,"length":5,"comment":{"description":"specifies which texture to use for rendering by setting the active texture slot and binding the specified texture to that slot using glBindTexture().","params":[{"name":"samplerSlot","type":"int","description":"0-based index of a texture slot that the function binds to the current GL context."}],"returns":null}},{"id":"89c5c465-6520-4b68-8820-9b8d819c5a22","ancestors":[],"type":"function","name":"getID","location":{"offset":"\t","indent":1,"insert":50,"start":50},"returns":"int","params":[],"code":"public int getID() {\n\t\treturn id;\n\t}","skip":false,"length":3,"comment":{"description":"returns the `id` field of an object.","params":[],"returns":{"type":"int","description":"an integer representing the ID of the object."}}},{"id":"51b94e91-497b-4b51-b1ec-5a1adfccd1c0","ancestors":[],"type":"function","name":"loadTexture","location":{"offset":"\t","indent":1,"insert":54,"start":54},"returns":"int","params":[{"name":"fileName","type":"String"}],"code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","skip":false,"length":48,"comment":{"description":"loads an image from a file and creates a texture object in OpenGL using the `glGenTextures`, `glBindTexture`, `glTexParameteri`, `glTexImage2D`, and `glGenerateMipmap` methods. It returns the ID of the created texture object.","params":[{"name":"fileName","type":"String","description":"filename of the texture image to be loaded and processed by the `loadTexture()` method."}],"returns":{"type":"int","description":"an integer representing the ID of the generated texture."}}}]}}}