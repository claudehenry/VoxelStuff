{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A class `Texture` that loads and manages an image as a texture in an OpenGL context. The class has a constructor that takes the image file path as input, and methods to bind the texture to a specific sampler slot and retrieve its ID. Additionally, the code includes the necessary code to generate mipmaps for the texture.","items":[{"id":"6c7f7baf-eab3-e28b-6e45-98975dfae20e","ancestors":[],"type":"function","description":"in this code provides a way to load and manage textures in a graphics application. It allows for loading textures from files, binding them to the GPU, and providing methods to manipulate and control the texture. The class also provides a high-level overview of how textures are managed by the GPU through its glTexImage2D method.","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":29,"insert":29,"offset":" ","indent":0,"comment":null},"item_type":"class","length":75},{"id":"24bc36b0-8bec-9499-6044-da14342f0684","ancestors":["6c7f7baf-eab3-e28b-6e45-98975dfae20e"],"type":"function","description":"0 is invoked, presumably binding some resource or setting a parameter to value 0.","params":[],"usage":{"language":"java","code":"Texture texture = new Texture(\"some_file_name\");\ntexture.bind(0);\n","description":"\nThis will bind the texture to sampler slot 0, which can be accessed in a shader using the variable \"sampler2D tex\"."},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"f2b66640-ab34-3a8e-b248-774f27446f89","ancestors":["6c7f7baf-eab3-e28b-6e45-98975dfae20e"],"type":"function","description":"sets the active texture slot to a specific index (0-31) and binds a texture to that slot using the `glBindTexture()` method.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of the sampler slot into which the bound texture will be assigned, with valid values ranging from 0 to 31.","complex_type":false}],"usage":{"language":"java","code":"Texture texture = new Texture(\"image.png\");\ntexture.bind(0); // binds to GL_TEXTURE0\n","description":""},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"3db78ee1-c6ed-f6ad-904f-621c3fce49c0","ancestors":["6c7f7baf-eab3-e28b-6e45-98975dfae20e"],"type":"function","description":"returns the `id` field of a class instance.","params":[],"returns":{"type_name":"int","description":"an integer representing the ID of the object.","complex_type":false},"usage":{"language":"java","code":"Texture texture = new Texture(\"grass.jpg\");\nint texId = texture.getId();\n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":50,"insert":50,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"df1c6c39-0bc9-0793-c74e-df2500898ea2","ancestors":["6c7f7baf-eab3-e28b-6e45-98975dfae20e"],"type":"function","description":"loads an image from a file and creates a texture object in OpenGL using the loaded image as data.","params":[{"name":"fileName","type_name":"String","description":"name of the file containing the image to be loaded as a texture.","complex_type":false}],"returns":{"type_name":"int","description":"an integer ID representing a textured OpenGL resource.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":54,"insert":54,"offset":" ","indent":1,"comment":null},"item_type":"method","length":48}]}}}