{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A `Texture` class that loads and manages textures for use in an OpenGL environment. The `loadTexture()` method reads an image file and returns a texture ID, while the `bind()` and `bind(int samplerSlot)` methods bind the texture to a specific slot in the graphics pipeline. The `getID()` method returns the ID of the loaded texture.","items":[{"id":"dbb4013e-9b06-05b7-a143-814c01c7908c","ancestors":[],"description":"False","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":29,"insert":29,"offset":" ","indent":0},"item_type":"class","length":75},{"id":"af65cd51-33b3-42a2-fa49-a9512d4595b6","ancestors":["dbb4013e-9b06-05b7-a143-814c01c7908c"],"description":"0 invokes the bind method with no arguments, resulting in a void return type.","params":[],"usage":{"language":"java","code":"Texture texture = new Texture(\"file path\");\ntexture.bind();\n","description":""},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"bbd529a5-1118-a78e-e34a-77b33ca3413f","ancestors":["dbb4013e-9b06-05b7-a143-814c01c7908c"],"description":"sets the active texture slot to a specified value within a range of 0 to 31 and binds a texture to the respective slot using the `glBindTexture()` function.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot in the current texture unit, with values ranging from 0 to 31, and is used to select and bind a specific texture in the current texture unit.","complex_type":false}],"usage":{"language":"java","code":"public void bind(int samplerSlot) {\nassert (samplerSlot >= 0 && samplerSlot <= 31);\nglActiveTexture(GL_TEXTURE0 + samplerSlot);\nglBindTexture(GL_TEXTURE_2D, id);\n}\n","description":""},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"fe8a3fb1-fa40-1dad-354c-9c80c6d3212b","ancestors":["dbb4013e-9b06-05b7-a143-814c01c7908c"],"description":"returns the `id` variable's value.","params":[],"returns":{"type_name":"int","description":"an integer representing the ID of the object.","complex_type":false},"usage":{"language":"java","code":"public class Example{\n\tpublic static void main(String[] args){\n\tTexture texture = new Texture(\"image.jpg\");\n\tint textureId = texture.getID();\n\t// Use textureId in the rest of your code\n}\n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":50,"insert":50,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"d75e9f48-ec8e-1e90-6247-494c942d2d1c","ancestors":["dbb4013e-9b06-05b7-a143-814c01c7908c"],"description":"loads an image file and generates a textured buffer for use in a graphics rendering pipeline. It reads the image file using `ImageIO`, converts it to a byte array, and then binds it as a texture using `GL11`.","params":[{"name":"fileName","type_name":"String","description":"name of the texture file to be loaded.\n\n* `File fileName`: represents the file path of the texture to be loaded.\n* `BufferedImage image`: holds the pixel data of the specified file as an instance of the `BufferedImage` class.\n* `int[] pixels`: stores the color values of each pixel in the `image`, with each value represented by an integer value between 0 and 255 (inclusive).\n* `Boolean hasAlpha`: indicates whether the texture has alpha channel or not, which is represented by a boolean value.\n* `GL11 glGenTextures()`: generates a new texture ID using the `glGenTextures` function from the OpenGL API.\n* `int id`: stores the newly generated texture ID returned by `glGenTextures()`.\n* `glBindTexture(GL_TEXTURE_2D, id)`: binds the specified texture ID to the current context using the `glBindTexture` function.\n* `glTexParameteri(GL_TEXTURE_2D, ...)`: sets various texture parameters such as wrapping, filtering, and mipmap generation using the `glTexParameteri` function.\n* `glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, ...)`: uploads the pixel data of the specified file to the newly bound texture ID using the `glTexImage2D` function. The `0` argument specifies that the texture is an RGBA8 texture.\n* `GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D)`: generates mipmap levels for the specified texture ID using the `GL30.glGenerateMipmap` function.\n* `GL11.glTexParameteri(GL11.GL_TEXTURE_2D, ...)`: sets additional texture parameters such as minimum filtering and lod bias using the `glTexParameteri` function.","complex_type":true}],"returns":{"type_name":"int","description":"an OpenGL texture ID representing a loaded image.","complex_type":false},"usage":{"language":"java","code":"private static int loadTexture(String fileName) {\n\tint textureID = 0;\n\n\ttry {\n\t\ttextureID = loadTexture(fileName);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\n\treturn textureID;\n}\n","description":"\nThe example code would be called in the following way:\n"},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":54,"insert":54,"offset":" ","indent":1},"item_type":"method","length":48}]}}}