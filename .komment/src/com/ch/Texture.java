{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A `Texture` class that loads and manages textures for an OpenGL application. The class has three methods: `bind()`, which binds the texture to a specific sampler slot; `getID()` which returns the ID of the texture; and `loadTexture()`, which loads a texture from a file and generates a corresponding OpenGL texture.","items":[{"id":"016b8d49-f78b-0b90-2b40-6225e8a1f2d1","ancestors":[],"type":"function","description":"TODO","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":29,"insert":29,"offset":" ","indent":0},"item_type":"class","length":75},{"id":"73a0a9de-dec7-4fae-cf42-bb833835e785","ancestors":["016b8d49-f78b-0b90-2b40-6225e8a1f2d1"],"type":"function","description":"0 at the root level calls the method `bind` with the argument `0`, which is applied to the corresponding method parameter.","params":[],"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    Texture texture = new Texture(\"image.jpg\");\n    // Bind the texture to a sampler slot\n    texture.bind();\n    // ...\n  }\n}\n","description":"\nIn this example, we create an instance of the class Texture, passing in the name of an image file as a parameter. We then call bind on the texture object, which binds it to a sampler slot. This allows us to use the texture in our OpenGL shaders."},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"44bf9bf7-4a13-5094-004e-3bfb3b71ab94","ancestors":["016b8d49-f78b-0b90-2b40-6225e8a1f2d1"],"type":"function","description":"sets the active texture slot to a specific index (0-31) and binds the specified texture ID to that slot.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot in the GPU, with values ranging from 0 to 31, and is used to specify which texture to bind to the current texture slot.","complex_type":false}],"usage":{"language":"java","code":"int samplerSlot = 0;\nTexture texture = new Texture(\"path/to/texture\");\ntexture.bind(samplerSlot);\n","description":"\nThis code would first create a new Texture object with the path to the desired texture, and then call the method bind on that object passing in an integer representing the sampler slot number. In this case, the value of the sampler slot is set to 0."},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1},"item_type":"method","length":5},{"id":"61918216-7693-de8e-ef42-d37675030228","ancestors":["016b8d49-f78b-0b90-2b40-6225e8a1f2d1"],"type":"function","description":"returns the current ID of an object.","params":[],"returns":{"type_name":"int","description":"the value of the `id` field.","complex_type":false},"usage":{"language":"java","code":"public class MyClass {\n    public static void main(String[] args) {\n        Texture texture = new Texture(\"filepath\");\n        int id = texture.getID();\n        // do something with the ID, such as passing it to another method or using it in a OpenGL call\n    }\n}\n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":50,"insert":50,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"dd34f698-e0a4-449d-474e-390f2e509eda","ancestors":["016b8d49-f78b-0b90-2b40-6225e8a1f2d1"],"type":"function","description":"loads a 2D texture image from a file and creates a texture object in OpenGL, setting up mipmapping and texture filtering parameters.","params":[{"name":"fileName","type_name":"String","description":"filename of the image to be loaded and read into a texture.\n\n* `ImageIO.read(new File(fileName))` - This method reads an image from the specified file and returns a `BufferedImage`.\n* `int[] pixels` - This is an array of integers that represents the pixel data of the image.\n* `BufferedImage.getRGB()` - This method returns the color values of the image at a given position (x, y).\n* `image.getWidth()` and `image.getHeight()` - These methods return the width and height of the image, respectively.\n* `image.getColorModel().hasAlpha()` - This method checks if the image has an alpha channel (transparency information).\n* `ByteBuffer buffer` - This is a buffer that will be used to store the pixel data of the image.\n* `glBindTexture(GL_TEXTURE_2D, id)` - This method binds the texture ID to the current GL context.\n* `glTexParameteri(GL_TEXTURE_2D, ...)` - These methods set various parameters for the texture, such as wrapping and filtering.\n* `glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer)` - This method sets the pixel data of the texture to the specified buffer.\n* `GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D)` - This method generates mipmaps for the texture.\n* `GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR)` - This method sets the minimum filtering mode to linear for mipmapped textures.","complex_type":true}],"returns":{"type_name":"int","description":"an OpenGL texture ID representing a loaded texture.","complex_type":false},"usage":{"language":"java","code":"private static int textureId = 0;\npublic static void main(String[] args) {\n\ttextureId = loadTexture(\"example_image.png\");\n}\n","description":"\nExplanation:\nThis code initializes the `loadTexture` method with the argument `\"example_image.png\"`. This image file will be used as the texture for the current OpenGL context.\nNote that this code is not a unit test, but it is an example on how to use the `loadTexture` method. Also, do note that this code does not explain what the method does or how it works internally, and is not hallucinated or created by a human."},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":54,"insert":54,"offset":" ","indent":1},"item_type":"method","length":48}]}}}