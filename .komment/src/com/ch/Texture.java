{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A class called `TextureLoader` which loads 2D textures from files and returns their IDs for use in OpenGL rendering. The class reads the image data, creates a ByteBuffer, and uses GL functions to bind the texture, set its parameters, and store the image data in it. The `loadTexture()` method takes a file path as an argument and returns the ID of the loaded texture.","items":[{"id":"30b2c8ab-00e0-0bbe-9549-16dc149f17d2","ancestors":[],"type":"function","description":"is an abstract class that provides functionality for loading and binding textures in OpenGL. It has fields for the texture file name and an ID generated by the `loadTexture()` method, which loads the texture from a file and returns its ID for use in OpenGL rendering. The `bind()` method binds a texture to a specific slot in the GPU's texture array, and the `getID()` method returns the value of the `id` field.","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n /**\n  * 0 invokes a method that is not shown, passing `0` as an argument.\n  */\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n /**\n  * binds a texture to a specific slot in the GPU's texture array, using the\n  * `glActiveTexture()` and `glBindTexture()` methods. The function checks that the\n  * input `samplerSlot` is within the valid range of 0 to 31, and then selects the\n  * appropriate texture handle from an array of 32 textures using the `id` variable.\n  * \n  * @param samplerSlot 0-based index of a texture slot that the function binds to the\n  * GPU.\n  */\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n /**\n  * retrieves the `id` field value of an object and returns it as an `int`.\n  * \n  * @returns the value of the `id` field.\n  */\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n /**\n  * loads a 2D texture from a file and returns its ID for use in OpenGL rendering. It\n  * reads the image data, creates a ByteBuffer, and then uses GL functions to bind the\n  * texture, set its parameters, and store the image data in it.\n  * \n  * @param fileName 2D texture image file to be loaded and processed by the `loadTexture()`\n  * method.\n  * \n  * @returns an integer ID representing a loaded texture.\n  */\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":35,"insert":35,"offset":" ","indent":0,"comment":{"start":28,"end":34}},"item_type":"class","length":102},{"id":"8853b59a-490d-7595-a24e-e1e40689e8dd","ancestors":["30b2c8ab-00e0-0bbe-9549-16dc149f17d2"],"type":"function","description":"0 invokes a method that is not specified in the provided code snippet.","params":[],"usage":{"language":"java","code":"public void bind() {\n\tbind(0);\n}\n\n// This code demonstrates the use of the method by binding the object at index 0 to OpenGL's state.\npublic static void main(String[] args) {\n\tObject obj = new Object();\n\tobj.bind(0);\n}\n","description":"\nThis example is very simple and does not demonstrate much of the features that bind could do in a real-world setting, but it should illustrate how one might call the method and use its return value.    The important thing to note here is that the code is calling a method (bind) on an object (obj), which is passed the value 0 as an argument.     This method then returns a value, in this case it is not used for anything but may be used later to store information about the object's state.    The bind method will likely have additional features and parameters that are not illustrated here, but it should demonstrate how one might call it from outside of its own class.\n\nI hope this helps to clarify some aspects of the question for you."},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":49,"insert":49,"offset":" ","indent":1,"comment":{"start":45,"end":48}},"item_type":"method","length":3},{"id":"2c2ed566-ddbd-ab86-0649-3572cf24cb7e","ancestors":["30b2c8ab-00e0-0bbe-9549-16dc149f17d2"],"type":"function","description":"sets the active texture slot to a specific index (0-31) and binds a texture to it using the `glBindTexture` method.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot in the GPU, with values ranging from 0 to 31, which determines the active texture slot for binding a texture using the `glBindTexture()` function.","complex_type":false}],"usage":{"language":"java","code":"int samplerSlot = 3;\nTexture tex = new Texture(filepath);\ntex.bind(samplerSlot);\n","description":"\nIn this example, we create a Texture object with the file path of a .png image file. We then call the bind method on the texture object and pass in an integer that represents which texture sampler slot to use for this specific texture. This slot number is between 0 and 31, and each slot corresponds to a different texture unit in the shader.\n\nThe code works because we are calling glBindTexture with a valid GL_TEXTURE_2D value as the first parameter (GL_TEXTURE_2D), an integer that represents the OpenGL texture object to bind to (tex.id) as the second parameter, and then setting the active texture unit using glActiveTexture to use slot 3 for this specific texture with the third parameter being GL_TEXTURE0 + samplerSlot.\n\nNote that the method is not static because it requires a Texture object in order to bind it to a texture unit. If we were to use the method on an uninitialized Texture object, we would receive a NullPointerException since the id field has not yet been initialized in this case."},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":62,"insert":62,"offset":" ","indent":1,"comment":{"start":52,"end":61}},"item_type":"method","length":5},{"id":"2a78c291-7c3d-acbc-e24b-f524500aeae8","ancestors":["30b2c8ab-00e0-0bbe-9549-16dc149f17d2"],"type":"function","description":"returns the `id` field of an object.","params":[],"returns":{"type_name":"int","description":"an integer representing the ID of the object.","complex_type":false},"usage":{"language":"java","code":"public class Object {\n    private int id;\n}\n\nObject obj = new Object();\nint objectID = obj.getID(); // returns the value of the field 'id' in the 'obj' instance of the class 'Object'. \n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":73,"insert":73,"offset":" ","indent":1,"comment":{"start":67,"end":72}},"item_type":"method","length":3},{"id":"b2fd7b9b-1dd0-f38b-8f46-c76be4ac4aba","ancestors":["30b2c8ab-00e0-0bbe-9549-16dc149f17d2"],"type":"function","description":"loads a texture from a file and returns its ID. It reads the image data, converts it to a byte array, and sets up the texture parameters for linear filtering and repeating the texture across the entire screen.","params":[{"name":"fileName","type_name":"String","description":"file path of the texture image to load.","complex_type":false}],"returns":{"type_name":"int","description":"an integer identifier of a loaded texture.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":87,"insert":87,"offset":" ","indent":1,"comment":{"start":76,"end":86}},"item_type":"method","length":48}]}}}