{"name":"Texture.java","path":"src/com/ch/Texture.java","content":{"structured":{"description":"A class `Texture` that manages an OpenGL texture object. The class has a constructor that takes a file path as argument and loads the image data into a `ByteBuffer`. The class also provides methods for binding the texture to a specific texture slot (`bind()`) and getting the ID of the texture (`getID()`). Additionally, the code includes a static method `loadTexture()` that loads an image from a file and returns the ID of the resulting texture object.","items":[{"id":"fec70701-3ac1-b693-c544-2cac1fbc9923","ancestors":[],"type":"function","description":"in this code file loads and manages textures for use in OpenGL rendering. It allows for binding the texture to a specific slot in the GPU and provides methods for loading and manipulating textures. Additionally, it provides an ID for each loaded texture that can be used for further reference or manipulation.","name":"Texture","code":"public class Texture {\n\n\tprivate int id;\n\tprivate String fileName;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = loadTexture(fileName);\n\t}\n\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n}","location":{"start":29,"insert":29,"offset":" ","indent":0,"comment":null},"item_type":"class","length":75},{"id":"1150dda5-18e2-55ab-594b-f72028111ca6","ancestors":["fec70701-3ac1-b693-c544-2cac1fbc9923"],"type":"function","description":"0 invokes a method that is not shown, passing `0` as an argument.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tTexture texture = new Texture(\"path to image\");\n\ttexture.bind(); // binds the texture at slot 0\n}\n","description":""},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"6c84d345-2631-c089-9d4f-d7e2855e48be","ancestors":["fec70701-3ac1-b693-c544-2cac1fbc9923"],"type":"function","description":"binds a texture to a specific slot in the GPU's texture array, using the `glActiveTexture()` and `glBindTexture()` methods. The function checks that the input `samplerSlot` is within the valid range of 0 to 31, and then selects the appropriate texture handle from an array of 32 textures using the `id` variable.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot that the function binds to the GPU.","complex_type":false}],"usage":{"language":"java","code":"int samplerSlot = 0;\nTexture texture = new Texture(\"someImage.png\");\ntexture.bind(samplerSlot);\n","description":""},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"fe4c0fb9-95e3-fdb2-a14c-8740d6a0793a","ancestors":["fec70701-3ac1-b693-c544-2cac1fbc9923"],"type":"function","description":"retrieves the `id` field value of an object and returns it as an `int`.","params":[],"returns":{"type_name":"int","description":"the value of the `id` field.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        String fileName = \"texture.png\";\n        Texture texture = new Texture(fileName);\n        int id = texture.getID();\n        System.out.println(\"Texture ID is: \" + id);\n    }\n}\n","description":""},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":50,"insert":50,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"140a504c-920e-5595-b047-56da177ab444","ancestors":["fec70701-3ac1-b693-c544-2cac1fbc9923"],"type":"function","description":"loads a 2D texture from a file and returns its ID for use in OpenGL rendering. It reads the image data, creates a ByteBuffer, and then uses GL functions to bind the texture, set its parameters, and store the image data in it.","params":[{"name":"fileName","type_name":"String","description":"2D texture image file to be loaded and processed by the `loadTexture()` method.","complex_type":false}],"returns":{"type_name":"int","description":"an integer ID representing a loaded texture.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = image.getHeight() - 1; y >= 0; y--) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\tGL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);\n\t\t\tGL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\tGL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);\n\t\t\t\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":54,"insert":54,"offset":" ","indent":1,"comment":null},"item_type":"method","length":48}]}}}