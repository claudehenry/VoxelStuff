{"name":"Camera.java","path":"src/com/ch/Camera.java","content":{"structured":{"description":"A `Camera` class that provides methods for calculating view and projection matrices and adjusting the camera to fit within a specified viewport. It also includes an abstract class `CameraStruct` that provides an abstract method `getAsMatrix4()` which is not implemented in this class. The `Camera` class has several methods, including `getViewProjection()`, `calculateViewMatrix()`, `getTranslationMatrix()`, and `getTransform()`. These methods allow for calculations of view and projection matrices, as well as translation and rotation of the camera in 3D space.","items":[{"id":"f2df9608-8142-88ae-ab48-e798d0f6c7ea","ancestors":[],"type":"function","description":"is an abstract class that provides functionality for transforming 3D points in world space to camera space and vice versa. It has various methods for calculating view and projection matrices, as well as adjusting the matrix to fit a specific viewport size. The class also has an abstract method `getAsMatrix4()` which is not implemented in this class, and is meant to provide a common framework for other classes to inherit functionality from.","name":"Camera","code":"public abstract class Camera {\n\n\tprotected Matrix4f projection;\n\tprotected Matrix4f viewProjectionMat4;\n\tprotected CameraStruct values;\n\tprotected Transform transform;\n\n\tprotected Camera(Matrix4f projection) {\n\t\tthis.projection = projection;\n\t\ttransform = new Transform();\n\t}\n\n /**\n  * computes and returns a matrix that represents the view projection transformation,\n  * based on the current view matrix and other transforms.\n  * \n  * @returns a Matrix4f object representing the view and projection transformation.\n  * \n  * The `getViewProjection` function returns a `Matrix4f` object representing the view\n  * projection matrix. This matrix is used to transform 3D points from the world\n  * coordinate system to the camera's coordinate system. The matrix has four rows and\n  * four columns, with elements representing the transformations of x, y, z, and w coordinates.\n  * The function first checks if the `viewProjectionMat4` object is null or if the\n  * `transform` field has changed since the last call to this function. If either of\n  * these conditions is true, the function calculates the view matrix using a proprietary\n  * method. The view matrix is then returned by the function.\n  */\n\tpublic Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}\n\n /**\n  * calculates a view matrix that combines the rotation and translation of a camera\n  * with the projection of a 3D scene.\n  * \n  * @returns a 4x4 matrix representing the view projection transformation.\n  * \n  * \t- The output is a matrix object of type `Matrix4f`.\n  * \t- The matrix represents the view transformation of the camera, combining the\n  * rotation and translation of the camera.\n  * \t- The rotation part of the matrix is represented by the `cameraRotation` variable,\n  * which is a conjugate transpose of a rotation matrix.\n  * \t- The translation part of the matrix is represented by the `cameraTranslation`\n  * variable, which contains the displacement of the camera in 3D space.\n  * \t- The multiplication of the `projection` matrix with the `cameraRotation` and\n  * then with the `cameraTranslation` results in the final view transformation matrix.\n  */\n\tpublic Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}\n\n /**\n  * generates a 4x4 transformation matrix that represents a translation from the current\n  * position of the transform to a new position.\n  * \n  * @returns a 4x4 transformation matrix representing the camera's position in world\n  * coordinates, with the origin at the camera's position.\n  * \n  * \t- The Matrix4f object represents a 4x4 transformation matrix that translates by\n  * the vector (x, y, z) in the world coordinates.\n  * \t- The translation vector is computed as the inverse of the transform position\n  * vector multiplied by -1.\n  * \t- The resulting matrix is stored in a new Matrix4f object and returned from the\n  * function.\n  */\n\tpublic Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}\n\n /**\n  * returns the `transform` object, which contains the mapping between original and\n  * transformed data.\n  * \n  * @returns a reference to an instance of the `Transform` class.\n  * \n  * The `transform` variable is an instance of the `Transform` class, which represents\n  * a transformation matrix. The `Transform` class has several properties and methods\n  * for manipulating transformations, including scaling, rotating, and translating\n  * objects in 3D space.\n  */\n\tpublic Transform getTransform() {\n\t\treturn transform;\n\t}\n\t\n\tpublic abstract Matrix4f calculateProjectionMatrix(CameraStruct data);\n\n\tpublic abstract void adjustToViewport(int width, int height);\n\n /**\n  * is an abstract class that serves as a base for other classes inheriting from it\n  * in the Camera package. It contains an abstract method `getAsMatrix4()` that returns\n  * a Matrix4f object, which is not implemented in this class. The purpose of this\n  * class seems to be to provide a common framework for other classes to build upon\n  * and inherit functionality from.\n  */\n\tprotected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}\n\n}","location":{"start":13,"insert":13,"offset":" ","indent":0,"comment":{"start":5,"end":12}},"item_type":"class","length":113},{"id":"fdd6ddb6-2420-be98-1e47-18700623ea25","ancestors":["f2df9608-8142-88ae-ab48-e798d0f6c7ea"],"type":"function","description":"computes and returns a `Matrix4f` object representing the view-projection transformation for a given transform state. If the view-projection matrix has changed or is null, it recalculates it using the `calculateViewMatrix` method.","params":[],"returns":{"type_name":"Matrix4f","description":"a Matrix4f object representing the view and projection transformations.\n\n* The `Matrix4f` object represents the view-projection matrix, which is used to transform 3D points from world space to screen space.\n* If the `viewProjectionMat4` variable is null or has changed, a new view matrix is calculated using the `calculateViewMatrix()` function.\n* The matrix is returned as a `Matrix4f` object.","complex_type":true},"usage":{"language":"java","code":"public class MyCamera extends Camera {\n    public static void main(String[] args) {\n        MyCamera camera = new MyCamera();\n        Matrix4f viewProjectionMatrix = camera.getViewProjection();\n        // Use the view projection matrix to transform 3D points in the scene\n    }\n}\n","description":"\nIn this example, we create a new instance of the `MyCamera` class that inherits from the `Camera` abstract class. We then call the `getViewProjection()` method to retrieve a matrix that represents the view projection transformation. Finally, we use the resulting matrix to transform 3D points in the scene. Note that this is just an example and may not be a practical use case for the `getViewProjection()` method, but it demonstrates how it can be used."},"name":"getViewProjection","code":"public Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1,"comment":{"start":24,"end":39}},"item_type":"method","length":8},{"id":"57eb6549-1cb0-42ab-e243-c4caeb57f065","ancestors":["f2df9608-8142-88ae-ab48-e798d0f6c7ea"],"type":"function","description":"calculates a view matrix for a given camera transformation, including rotation and translation. The resulting matrix is used to transform 3D points into screen coordinates.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representing the combined effect of camera rotation and translation on the view space.\n\n* `viewProjectionMat4`: The resulting matrix that represents the view projection transformation. It is a 4x4 homogeneous matrix, where the first three columns represent the camera's view direction (in homogeneous coordinates), and the fourth column represents the camera's translation vector.\n* `cameraRotation`: A 3x3 rotation matrix representing the rotation of the camera around its center.\n* `cameraTranslation`: A 3x1 vector representing the translation of the camera relative to its initial position.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    Camera camera = new Camera(); // Create a new instance of the Camera class\n    Matrix4f viewProjectionMat4 = camera.calculateViewMatrix();\n    System.out.println(viewProjectionMat4);\n  }\n}\n","description":""},"name":"calculateViewMatrix","code":"public Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}","location":{"start":65,"insert":65,"offset":" ","indent":1,"comment":{"start":48,"end":64}},"item_type":"method","length":8},{"id":"62bfbfed-c9fa-15bc-de49-d6e84e6ce8e9","ancestors":["f2df9608-8142-88ae-ab48-e798d0f6c7ea"],"type":"function","description":"generates a 4x4 transformation matrix that represents a translation from the origin to the position of a 3D transform.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representing a translation in 3D space, with the x, y, and z components of the translation vector as the respective elements of the matrix.\n\n* The Matrix4f object represents a 4x4 transformation matrix that translates the origin by a vector in 3D space.\n* The elements of the matrix represent the coordinates of the translation vector in the order X, Y, Z, and W (in that order).\n* The translation vector is negative of the camera position due to the mul() method call. This means that the translated position will be opposite to the original camera position.","complex_type":true},"usage":{"language":"java","code":"public class CameraExample {\n    public static void main(String[] args) {\n        Matrix4f translation = new Matrix4f().initTranslation(1, 2, 3);\n        System.out.println(translation);\n    }\n}\n","description":""},"name":"getTranslationMatrix","code":"public Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}","location":{"start":88,"insert":88,"offset":" ","indent":1,"comment":{"start":73,"end":87}},"item_type":"method","length":4},{"id":"48b462e8-7d7d-d9a6-8a41-e9326a3a166d","ancestors":["f2df9608-8142-88ae-ab48-e798d0f6c7ea"],"type":"function","description":"returns the `transform` object, which is a central component of the application's logic.","params":[],"returns":{"type_name":"Transform","description":"a reference to an instance of the `Transform` class.\n\n* The `transform` variable is of type `Transform`, which represents a transformation matrix.\n* It contains information about the position, rotation, and scaling of an object in 3D space.\n* The values of the matrix represent the transformation coefficients that can be applied to a 3D point to obtain its transformed position.","complex_type":true},"usage":{"language":"java","code":"Camera camera = new Camera(Matrix4f projection);\nTransform transform = camera.getTransform();\n","description":""},"name":"getTransform","code":"public Transform getTransform() {\n\t\treturn transform;\n\t}","location":{"start":104,"insert":104,"offset":" ","indent":1,"comment":{"start":92,"end":103}},"item_type":"method","length":3},{"id":"021b85a5-26cb-6583-0249-2a8a7dcee307","ancestors":["f2df9608-8142-88ae-ab48-e798d0f6c7ea"],"type":"function","description":"is an abstract class that serves as a base for other classes in the Camera package. It contains an abstract method `getAsMatrix4()` that returns a Matrix4f object, which is not implemented in this class. The purpose of this class seems to be to provide a common framework for other classes to build upon and inherit functionality from.","name":"CameraStruct","code":"protected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}","location":{"start":119,"insert":119,"offset":" ","indent":1,"comment":{"start":111,"end":118}},"item_type":"class","length":5}]}}}