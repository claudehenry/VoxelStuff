{"name":"Camera.java","path":"src/com/ch/Camera.java","content":{"structured":{"description":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations.","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"voxel\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        World\n    }\n    subgraph cluster_1 {\n        label=\"math\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        Matrix4f\n    }\n    edge [color=\"#26de81\"]\n    Camera -> Transform \n    Camera -> World \n    Camera -> Matrix4f \n    CameraStruct -> Camera \n}\n","items":[{"id":"c11af31e-07fa-3cb0-814a-7e7f5082b374","ancestors":[],"type":"function","description":"is an abstract class that provides methods for calculating and manipulating views and projections of a 3D scene from a camera's perspective. It includes fields for storing camera position, rotation, and projection matrix, as well as methods for calculating view and projection matrices, and adjusting to the size of a target viewport. The class also includes an abstract method for calculating a projection matrix for a given camera structure.","name":"Camera","code":"public abstract class Camera {\n\tprotected Matrix4f projection;\n\tprotected Matrix4f viewProjectionMat4;\n\tprotected CameraStruct values;\n\tprotected Transform transform;\n\n\tprotected Camera(Matrix4f projection) {\n\t\tthis.projection = projection;\n\t\ttransform = new Transform();\n\t}\n\n\tpublic Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}\n\n\tpublic Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}\n\n\tpublic Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}\n\n\tpublic Transform getTransform() {\n\t\treturn transform;\n\t}\n\t\n\tpublic abstract Matrix4f calculateProjectionMatrix(CameraStruct data);\n\n\tpublic abstract void adjustToViewport(int width, int height);\n\n\tprotected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}\n\n}","location":{"start":6,"insert":6,"offset":" ","indent":0,"comment":null},"item_type":"class","length":49,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."},{"id":"49ac89b7-4374-e79b-f940-89ec1063fb53","ancestors":["c11af31e-07fa-3cb0-814a-7e7f5082b374"],"type":"function","description":"calculates and returns a `Matrix4f` object representing the view projection matrix, which combines the view and projection matrices needed for rendering 3D graphics.","params":[],"returns":{"type_name":"Matrix4f","description":"a `Matrix4f` object representing the view projection matrix.\n\n* `viewProjectionMat4`: A matrix representing the view projection transformation. It is a product of the view and projection matrices.\n* `transform`: A reference to the transform state, which is used to determine whether the view projection matrix needs to be recalculated.\n\nThe function returns the view projection matrix, which is used to transform 3D points from the world coordinate system to the screen coordinate system. The matrix is a product of the view and projection matrices, and it represents the transformation that combines the view and projection effects.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tCamera camera = new FirstPersonCamera();\n\tMatrix4f viewProj = camera.getViewProjection(); // Returns the combined view and projection matrix for rendering purposes\n}\n","description":""},"name":"getViewProjection","code":"public Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}","location":{"start":17,"insert":17,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."},{"id":"1acaa102-c7f9-ffa9-2d42-8719bc25e580","ancestors":["c11af31e-07fa-3cb0-814a-7e7f5082b374"],"type":"function","description":"calculates a view matrix by multiplying the camera rotation and translation matrices, then applying them to a projection matrix.","params":[],"returns":{"type_name":"Matrix4f","description":"a matrix representation of the view transformation, which combines the camera rotation and translation matrices.\n\nThe `calculateViewMatrix` function takes the `projection`, `transform`, and `getTranslationMatrix` methods as inputs and returns a `Matrix4f` object representing the view matrix. The view matrix is a 4x4 homogeneous transformation matrix that encodes the orientation and translation of the camera relative to the world coordinate system.\n\nThe `projection` method multiplies the camera rotation matrix (represented by `cameraRotation`) with the camera translation matrix (represented by `cameraTranslation`), producing a new matrix that represents the view transformation. This operation combines the effects of both rotations and translations on the camera's position in the world.\n\nThe resulting view matrix is then returned as the output of the `calculateViewMatrix` function.","complex_type":true},"usage":{"language":"java","code":"public class MyCamera extends Camera {\n\tpublic Matrix4f calculateProjectionMatrix(CameraStruct data) {\n\t\t//calculate projection matrix based on given data\n\t}\n\n\tpublic void adjustToViewport(int width, int height) {\n\t\t//adjust camera settings to viewport size\n\t}\n}\n\nMyCamera myCamera = new MyCamera(new Matrix4f());\nmyCamera.calculateProjectionMatrix(data);\nmyCamera.adjustToViewport(width, height);\n","description":""},"name":"calculateViewMatrix","code":"public Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}","location":{"start":26,"insert":26,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."},{"id":"636ab744-4b03-5f81-b048-cdcd5618e6e8","ancestors":["c11af31e-07fa-3cb0-814a-7e7f5082b374"],"type":"function","description":"generates a 4x4 transformation matrix that represents a translation, where the translation vector is negative of the current position of the transform node.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representing the translation of the camera position from its initial state.\n\n* The Matrix4f object represents a 4x4 transformation matrix that contains the translation vector (in the format (x, y, z)) in the top-left corner.\n* The translation vector is computed by taking the negative of the transform position, which is represented as a Vector3f instance.\n* The resulting Matrix4f object can be used to perform transformations on 3D objects or scenes, such as moving an object from one location to another.","complex_type":true},"usage":{"language":"java","code":"Camera camera = new Camera();\nVector3f pos = new Vector3f(0, 1, -5);\ncamera.getTransform().setPosition(pos);\n\n// Get the translation matrix for the camera\nMatrix4f translation = camera.getTranslationMatrix();\n\n// Translate a vector by the inverse of the camera position\nVector3f vec = new Vector3f(-1, 0, 0);\nVector3f translatedVec = translation.transform(vec);\n","description":""},"name":"getTranslationMatrix","code":"public Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}","location":{"start":35,"insert":35,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."},{"id":"390cb83e-1bf7-1886-2b4a-3f690d3462fb","ancestors":["c11af31e-07fa-3cb0-814a-7e7f5082b374"],"type":"function","description":"retrieves the `transform` object, which is an instance of the `Transform` class and represents a transformation in a mathematical or computational context.","params":[],"returns":{"type_name":"Transform","description":"a reference to a `Transform` object.\n\n* `transform`: The transformed value is a `Transform` object representing the result of applying the transformation to the input.","complex_type":true},"usage":{"language":"java","code":"public class TestCamera {\n    public static void main(String[] args) {\n        Camera camera = new PerspectiveCamera();\n        Transform transform = camera.getTransform();\n        System.out.println(\"Transform values: \" + transform);\n    }\n}\n","description":""},"name":"getTransform","code":"public Transform getTransform() {\n\t\treturn transform;\n\t}","location":{"start":40,"insert":40,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."},{"id":"933bde48-29f9-8d98-7443-b48cd00ed522","ancestors":["c11af31e-07fa-3cb0-814a-7e7f5082b374"],"type":"function","description":"is an abstract class that provides a framework for implementing various camera-related structures. It has an abstract method `getAsMatrix4()` that returns a Matrix4f object, which can be used to represent the camera's projection matrix. The class also provides a high level of flexibility by allowing subclasses to define their own methods and fields as needed.","name":"CameraStruct","code":"protected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}","location":{"start":48,"insert":48,"offset":"\t","indent":1,"comment":null},"item_type":"class","length":5,"docLength":null,"doc":"A class `Camera` that handles various aspects of camera functionality, including projection and view transformation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while `getTranslationMatrix()` returns a matrix for translating the camera position in 3D space. The `adjustToViewport()` method adjusts the camera's projection and view matrices to fit within a specified viewport size. The code also defines subclasses `CameraStruct` and `Transform`, which provide additional functionality related to camera calculations."}]}}}