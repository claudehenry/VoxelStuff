{"name":"Camera.java","path":"src/com/ch/Camera.java","content":{"structured":{"description":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector.","diagram":"digraph G {\n    label=\"com.ch.Camera\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n    \n    subgraph cluster_0 {\n        label=\"math\"\n        color=\"#33363A\"\n        Matrix4f\n    }\n    subgraph cluster_1 {\n        label=\"voxel\"\n        color=\"#33363A\"\n        World\n    }\n    subgraph cluster_main {\n        // style=filled;\n        color=\"#00000000\"; \n        Camera [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n        label = \"\"\n    }\n    Transform\n    CameraStruct\n    Camera -> Matrix4f \n    CameraStruct -> Camera \n    Camera -> World \n    Camera -> Transform \n}\n","items":[{"id":"e86dcf84-15b4-df84-e448-853f3aae8886","ancestors":[],"type":"function","description":"is an abstract class that provides methods for calculating view and projection matrices, as well as handling transformations and adjusting to the viewport. The class has various fields and methods for managing camera parameters and transformations, but the overall purpose of the class is to provide a framework for creating cameras with different properties and behaviors.","name":"Camera","code":"public abstract class Camera {\n\tprotected Matrix4f projection;\n\tprotected Matrix4f viewProjectionMat4;\n\tprotected CameraStruct values;\n\tprotected Transform transform;\n\n\tprotected Camera(Matrix4f projection) {\n\t\tthis.projection = projection;\n\t\ttransform = new Transform();\n\t}\n\n\tpublic Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}\n\n\tpublic Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}\n\n\tpublic Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}\n\n\tpublic Transform getTransform() {\n\t\treturn transform;\n\t}\n\t\n\tpublic abstract Matrix4f calculateProjectionMatrix(CameraStruct data);\n\n\tpublic abstract void adjustToViewport(int width, int height);\n\n\tprotected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}\n\n}","location":{"start":6,"insert":6,"offset":" ","indent":0,"comment":null},"item_type":"class","length":49,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."},{"id":"52019a4d-3a5e-5094-044e-367527f01a3c","ancestors":["e86dcf84-15b4-df84-e448-853f3aae8886"],"type":"function","description":"computes and returns a `Matrix4f` object representing the view projection transformation. It checks if the `viewProjectionMat4` is null or has changed, and calculates it when necessary using the `calculateViewMatrix()` method.","params":[],"returns":{"type_name":"Matrix4f","description":"a `Matrix4f` object representing the view projection matrix.\n\n* The `viewProjectionMat4` variable is an instance of the `Matrix4f` class in Java, representing a 4x4 matrix that encodes the view and projection transformations.\n* If the `viewProjectionMat4` matrix is null or has changed since the last call to the function, it will be recalculated using the `calculateViewMatrix()` method.\n* The `viewProjectionMat4` matrix contains 16 elements that represent the coefficients of the view and projection transformations, which are applied to the input image coordinates to produce the final output coordinates.","complex_type":true},"usage":{"language":"java","code":"Camera cam = new PerspectiveCamera();\ncam.getTransform().setPosition(new Vector3f(0, 10, -5));\nMatrix4f viewProjMat = cam.getViewProjection();\n// Use the matrix for rendering\n","description":"\nIn this example, a new perspective camera is created and its position is set to (0, 10, -5). The method getViewProjection() is then called on the camera object, which returns the view-projection matrix. This matrix can be used for rendering."},"name":"getViewProjection","code":"public Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}","location":{"start":17,"insert":17,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."},{"id":"2d234760-cabb-2590-8945-f388f60bdbcb","ancestors":["e86dcf84-15b4-df84-e448-853f3aae8886"],"type":"function","description":"calculates a view matrix that represents the combination of a camera rotation and translation, using the `projection` matrix to transform the result.","params":[],"returns":{"type_name":"Matrix4f","description":"a matrix representing the view transformation of a camera.\n\n* The output is a 4x4 matrix represented as a product of three matrices: `projection`, `cameraRotation`, and `cameraTranslation`.\n* The resulting matrix represents the view projection matrix, which combines the effects of camera rotation and translation.\n* The `projection` matrix is responsible for projecting the 3D scene onto the image plane, based on the camera's intrinsic and extrinsic parameters.\n* The `cameraRotation` matrix represents the rotation of the camera relative to the world coordinates, which is applied after the projection step.\n* The `cameraTranslation` matrix represents the translation of the camera relative to the world origin, which is also applied after the rotation step.\n\nOverall, the `calculateViewMatrix` function returns a view projection matrix that takes into account the camera's orientation and position in the world, allowing for accurate rendering of 3D scenes from different viewpoints.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\t// Create a Camera instance\n\tCamera camera = new MyCamera();\n\n\t// Set the projection matrix of the camera\n\tcamera.setProjectionMatrix(new Matrix4f().initPerspective(90, 16/9, 0.1, 100));\n\n\t// Calculate the view matrix of the camera\n\tMatrix4f viewMatrix = camera.calculateViewMatrix();\n\n\t// Print the calculated view matrix\n\tSystem.out.println(viewMatrix);\n}\n","description":""},"name":"calculateViewMatrix","code":"public Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}","location":{"start":26,"insert":26,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."},{"id":"f33965ae-725a-ccb7-0849-59672f4c6993","ancestors":["e86dcf84-15b4-df84-e448-853f3aae8886"],"type":"function","description":"generates a transformation matrix that translates the origin of the world coordinate system by a vector represented by the `Vector3f` object `cameraPos`.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representing the translation of the camera position by a vector in the x, y, and z directions.\n\nThe returned Matrix4f object represents a 4x4 transformation matrix that translates the origin of the coordinate system by the vector (x, y, z). The translation vector is computed as the negative of the transform position of the parent GameObject.\n\nThe components of the translation vector are represented in the column major order, with the x-coordinate in the first column, followed by the y-coordinate in the second column, and so on. This means that the z-coordinate is in the third column, and the w-coordinate is in the fourth column.\n\nThe resulting matrix represents a 4x4 transformation matrix that can be applied to any vector or point in 3D space to translate it by the specified amount.","complex_type":true},"usage":{"language":"java","code":"public class MyCamera extends Camera {\n\t@Override\n\tpublic Matrix4f calculateProjectionMatrix(CameraStruct data) {\n\t\t// Calculate the projection matrix based on the given data\n\t}\n\n\t@Override\n\tpublic void adjustToViewport(int width, int height) {\n\t\t// Adjust the camera's viewport to the new dimensions\n\t}\n}\n","description":"\nIn this example, a class MyCamera extends the Camera class and overrides the calculateProjectionMatrix() and adjustToViewport() methods. The getTranslationMatrix() method is used in the calculateProjectionMatrix() method to create a translation matrix that moves the camera's position to the opposite of its current position."},"name":"getTranslationMatrix","code":"public Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}","location":{"start":35,"insert":35,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."},{"id":"99334c18-533b-3c8d-9b4c-1a656a11b764","ancestors":["e86dcf84-15b4-df84-e448-853f3aae8886"],"type":"function","description":"returns the `transform` object, which is a variable containing the transformation logic for the application.","params":[],"returns":{"type_name":"Transform","description":"a reference to a `Transform` object.\n\nThe returned transform object represents the result of applying a transformation to the input.\nIt has access to the original input through the `transform` field, which is a reference to the original input.\nThe transform object provides methods for manipulating and transforming the input, such as scaling, rotating, and translating.","complex_type":true},"usage":{"language":"java","code":"Transform myCameraTransform = myCamera.getTransform();\nVector3f cameraPos = myCameraTransform.getTransformedPos().mul(-1);\nMatrix4f cameraTranslation = new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n","description":"\nIn this example, the transform of the camera is retrieved using getTransform method and stored in myCameraTransform variable. Then it gets the position of the camera by using mul(-1) on the transformed position and then creates a new Matrix4f object to initialize the translation component with the position."},"name":"getTransform","code":"public Transform getTransform() {\n\t\treturn transform;\n\t}","location":{"start":40,"insert":40,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."},{"id":"d1e2e18d-f6b2-1ca7-cb43-5c0d54408374","ancestors":["e86dcf84-15b4-df84-e448-853f3aae8886"],"type":"function","description":"is an abstract class that provides a framework for storing and manipulating camera-related data. It contains an abstract method `getAsMatrix4()` that returns a Matrix4f object, which can be used to represent the camera's projection matrix in 3D space. The class does not provide any field or method information.","name":"CameraStruct","code":"protected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}","location":{"start":48,"insert":48,"offset":"\t","indent":1,"comment":null},"item_type":"class","length":5,"docLength":null,"doc":"A camera class with various methods for calculating view and projection matrices, as well as transforming the camera's position and rotation. The `calculateViewMatrix()` method calculates the view matrix based on the camera's rotation and translation, while the `calculateProjectionMatrix()` method calculates the projection matrix based on the camera's struct data. The `adjustToViewport()` method adjusts the camera's position and size to fit within a specified viewport. The `getTransform()` method returns the camera's transformation matrix, and the `getTranslationMatrix()` method returns the camera's translation vector."}]}}}