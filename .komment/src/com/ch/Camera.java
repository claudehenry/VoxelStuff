{"name":"Camera.java","path":"src/com/ch/Camera.java","content":{"structured":{"description":"a `Camera` class that represents a camera in 3D space. It contains methods for calculating and retrieving the view projection matrix, which is used to transform 3D points into screen coordinates. The code also includes an abstract class `CameraStruct` that provides a way to store and manipulate camera data. Additionally, the code defines two concrete subclasses of `Camera`, `Matrix4f`, and `Transform`, which are used in the calculation of the view projection matrix and the transformation of 3D points. Overall, the code provides a flexible framework for implementing various types of cameras in 3D space.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.ch.Camera.CameraStruct Pages: 1 -->\n<svg width=\"198pt\" height=\"82pt\"\n viewBox=\"0.00 0.00 198.00 82.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 78)\">\n<title>com.ch.Camera.CameraStruct</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"176.5,-74 13.5,-74 13.5,-55 176.5,-55 176.5,-74\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera.CameraStruct</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1ch_1_1Camera3D_1_1CameraStruct3D.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"190,-19 0,-19 0,0 190,0 190,-19\"/>\n<text text-anchor=\"middle\" x=\"95\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.ch.Camera3D.CameraStruct3D</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95,-44.66C95,-35.93 95,-25.99 95,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"91.5,-44.75 95,-54.75 98.5,-44.75 91.5,-44.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"e95c9a70-f25a-b78c-424e-23750fa61f08","ancestors":[],"type":"function","description":"TODO","name":"Camera","code":"public abstract class Camera {\n\n\tprotected Matrix4f projection;\n\tprotected Matrix4f viewProjectionMat4;\n\tprotected CameraStruct values;\n\tprotected Transform transform;\n\n\tprotected Camera(Matrix4f projection) {\n\t\tthis.projection = projection;\n\t\ttransform = new Transform();\n\t}\n\n\tpublic Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}\n\n\tpublic Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}\n\n\tpublic Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}\n\n\tpublic Transform getTransform() {\n\t\treturn transform;\n\t}\n\t\n\tpublic abstract Matrix4f calculateProjectionMatrix(CameraStruct data);\n\n\tpublic abstract void adjustToViewport(int width, int height);\n\n\tprotected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}\n\n}","location":{"start":6,"insert":6,"offset":" ","indent":0},"item_type":"class","length":50},{"id":"8334c952-731f-9380-304e-cc0b8f667694","ancestors":["e95c9a70-f25a-b78c-424e-23750fa61f08"],"type":"function","description":"retrieves a Matrix4f object representing the view projection transformation, calculated or retrieved from a previous calculation or storage.","params":[],"returns":{"type_name":"Matrix4f","description":"a `Matrix4f` object representing the view projection matrix.\n\n* `viewProjectionMat4`: This is a `Matrix4f` object that represents the view projection matrix, which combines the view and projection matrices. It is calculated based on the camera's position, orientation, and field of view.\n* `transform`: This refers to the transform component that is used to update the view projection matrix when the camera moves or rotates. It indicates whether the view projection matrix has changed.","complex_type":true},"usage":{"language":"java","code":"Camera camera = new Camera(Matrix4f());\ncamera.getTransform().setPosition(0, 0, -10); // Set the camera position to (0, 0, -10)\ncamera.adjustToViewport(1280, 720); // Adjust the camera view to fit within a 1280x720 window\nMatrix4f viewProjection = camera.getViewProjection(); // Get the view projection matrix\n","description":"\nIn this example, we create a new Camera instance with an empty Matrix4f object as the projection matrix. We then set the position of the camera to (0, 0, -10) and adjust the view to fit within a 1280x720 window using the `adjustToViewport` method. Finally, we retrieve the view projection matrix using the `getViewProjection` method."},"name":"getViewProjection","code":"public Matrix4f getViewProjection() {\n\n\t\tif (viewProjectionMat4 == null || transform.hasChanged()) {\n\t\t\tcalculateViewMatrix();\n\t\t}\n\n\t\treturn viewProjectionMat4;\n\t}","location":{"start":18,"insert":18,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"710894bd-3212-6cbf-bf49-b67fdb1b0d3f","ancestors":["e95c9a70-f25a-b78c-424e-23750fa61f08"],"type":"function","description":"calculates a view matrix based on a camera's rotation and translation vectors. The function takes the transformation matrix, rotation matrix, and translation vector as inputs and returns the resulting view matrix.","params":[],"returns":{"type_name":"Matrix4f","description":"a Matrix4f object representing the view matrix, which combines the camera rotation and translation matrices.\n\nThe `calculateViewMatrix` function returns a `Matrix4f` object, representing a 4x4 homogeneous transformation matrix. This matrix contains the view and projection transformations applied to the camera's position, rotation, and scale. Specifically, it is the result of multiplying the camera rotation matrix (`cameraRotation`) with the camera translation vector (`cameraTranslation`), followed by the multiplication with the projection matrix (`projection`).\n\nThe `Matrix4f` object contains several attributes that can be used to describe its properties:\n\n* `values`: a 16-element array containing the components of the matrix in row-major order. This can be accessed and modified using the `get()` and `set()` methods.\n* `determinant`: the determinant of the matrix, which is used to determine the invertibility of the matrix. This can be accessed using the `determinant()` method.\n* `isInvertible(): a boolean indicating whether the matrix is invertible or not. This can be accessed using the `isInvertible()` method.\n\nOverall, the `calculateViewMatrix` function returns a transformation matrix that encodes the view and projection transformations applied to the camera's position, rotation, and scale, which can be used in various applications such as 3D rendering, computer vision, or robotics.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n  Camera camera = new Camera();\n  camera.calculateViewMatrix(); // Returns a Matrix4f object representing the view matrix\n}\n","description":""},"name":"calculateViewMatrix","code":"public Matrix4f calculateViewMatrix() {\n\n\t\tMatrix4f cameraRotation = transform.getTransformedRot().conjugate().toRotationMatrix();\n\t\tMatrix4f cameraTranslation = getTranslationMatrix();\n\n\t\treturn (viewProjectionMat4 = projection.mul(cameraRotation.mul(cameraTranslation)));\n\n\t}","location":{"start":27,"insert":27,"offset":" ","indent":1},"item_type":"method","length":8},{"id":"11f4a292-b04d-26a1-4c4e-c086bb9c3ab2","ancestors":["e95c9a70-f25a-b78c-424e-23750fa61f08"],"type":"function","description":"generates a 4x4 transformation matrix that translates a virtual camera by a specified distance in the x, y, and z directions.","params":[],"returns":{"type_name":"Matrix4f","description":"a 4x4 matrix representing the translation of the camera position by (-1, -1, -1).\n\nThe `Matrix4f` object represents a 4x4 matrix that contains the translation vector in its elements.\n\nThe `initTranslation` method takes three float arguments representing the x, y, and z components of the translation vector. These values are used to initialize the matrix with the specified translation.\n\nThe resulting matrix will have the form:\n```\n[translation_x, 0, 0, 0]\n[0, translation_y, 0, 0]\n[0, 0, translation_z, 0]\n[0, 0, 0, 1]\n```\nwhere `translation_x`, `translation_y`, and `translation_z` are the x, y, and z components of the translation vector, respectively.","complex_type":true},"usage":{"language":"java","code":"public class MyCamera extends Camera {\n    private Vector3f cameraPosition;\n    public MyCamera(Matrix4f projection) {\n        super(projection);\n        cameraPosition = new Vector3f();\n    }\n    public void setPosition(float x, float y, float z) {\n        cameraPosition.set(x, y, z);\n    }\n    @Override\n    public Matrix4f getTranslationMatrix() {\n        return super.getTranslationMatrix().mul(new Matrix4f().initTranslation(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ()));\n    }\n}\n","description":""},"name":"getTranslationMatrix","code":"public Matrix4f getTranslationMatrix() {\n\t\tVector3f cameraPos = transform.getTransformedPos().mul(-1);\n\t\treturn new Matrix4f().initTranslation(cameraPos.getX(), cameraPos.getY(), cameraPos.getZ());\n\t}","location":{"start":36,"insert":36,"offset":" ","indent":1},"item_type":"method","length":4},{"id":"a3753781-b9b6-5992-ea41-12634129792a","ancestors":["e95c9a70-f25a-b78c-424e-23750fa61f08"],"type":"function","description":"returns the `transform` object, which is an instance of the `Transform` class.","params":[],"returns":{"type_name":"Transform","description":"a `Transform` object containing the transformation details.\n\nThe output is a `Transform` object, which represents a transformation in the system.\nThis transformation can be used to apply various effects to the input data, such as scaling, rotating, or translating it.\nThe `Transform` class has several attributes that determine its behavior, including `getType`, `getX`, `getY`, and `getZ`.\nThese attributes provide information about the transformation's location and orientation in 3D space.","complex_type":true},"usage":{"language":"java","code":"Camera camera = new Camera();\nTransform transform = camera.getTransform();\n// do something with the transform object\n","description":""},"name":"getTransform","code":"public Transform getTransform() {\n\t\treturn transform;\n\t}","location":{"start":41,"insert":41,"offset":" ","indent":1},"item_type":"method","length":3},{"id":"5596eff8-e94e-d5b5-4347-4fba4b0918bd","ancestors":["e95c9a70-f25a-b78c-424e-23750fa61f08"],"type":"function","description":"TODO","name":"CameraStruct","code":"protected abstract class CameraStruct {\n\n\t\tprotected abstract Matrix4f getAsMatrix4();\n\n\t}","location":{"start":49,"insert":49,"offset":" ","indent":1},"item_type":"class","length":5}]}}}