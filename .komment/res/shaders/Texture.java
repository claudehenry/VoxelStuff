{"name":"Texture.java","path":"res/shaders/Texture.java","content":{"structured":{"description":"","items":[{"id":"8cb3e550-f541-4973-b916-64395e12ee40","ancestors":[],"type":"function","name":"finalize","location":{"offset":"\t","indent":1,"insert":40,"start":40},"returns":false,"params":[],"code":"@Override\n\tprotected void finalize() {\n\t}","skip":false,"length":3,"comment":{"description":"has no defined functionality as it is marked `abstract`.","params":[],"returns":null}},{"id":"6908689c-3d0f-473a-9fa0-2f18434883f3","ancestors":[],"type":"function","name":"bind","location":{"offset":"\t","indent":1,"insert":44,"start":44},"returns":false,"params":[],"code":"public void bind() {\n\t\tbind(0);\n\t}","skip":false,"length":3,"comment":{"description":"binds a connection to a specific address and port number.","params":[],"returns":null}},{"id":"29ce108b-d3cc-422a-8dbc-30eac84bfcf2","ancestors":[],"type":"function","name":"bind","location":{"offset":"\t","indent":1,"insert":48,"start":48},"returns":false,"params":[{"name":"samplerSlot","type":"int"}],"code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","skip":false,"length":5,"comment":{"description":"sets the texture ID for a specified slot in the GPU's texture buffer. It ensures that the input is within the valid range and then binds the specified texture to the slot.","params":[{"name":"samplerSlot","type":"int","description":"0-based index of the desired texture slot to bind within the range of 0 to 31."}],"returns":null}},{"id":"2ef11f57-deb2-46ab-93ad-495b82813288","ancestors":[],"type":"function","name":"getID","location":{"offset":"\t","indent":1,"insert":54,"start":54},"returns":"int","params":[],"code":"public int getID() {\n\t\treturn id;\n\t}","skip":false,"length":3,"comment":{"description":"returns the value of `id`.","params":[],"returns":{"type":"int","description":"an integer representing the object's ID."}}},{"id":"3ebc3b74-94e0-4342-8596-359d54004b08","ancestors":[],"type":"function","name":"loadTexture","location":{"offset":"\t","indent":1,"insert":58,"start":58},"returns":"int","params":[{"name":"fileName","type":"String"}],"code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","skip":false,"length":49,"comment":{"description":"loads a texture from an image file and creates a GL_TEXTURE_2D texture in the GPU memory. It reads the image data using `ImageIO.read`, converts it to RGBA8 format, and stores it in the texture buffer. The function then sets up texture parameters and uploads the texture data to the GPU.","params":[{"name":"fileName","type":"String","description":"filename of the image to be loaded and converted into a texture."}],"returns":{"type":"int","description":"an integer representing the ID of the generated texture."}}}]}}}