{"name":"Texture.java","path":"res/shaders/Texture.java","content":{"structured":{"description":"A `Texture` class that manages an image as a texture in an OpenGL context. The `loadTexture()` method loads an image from a file and creates a texture ID using the `glGenTextures()` function. The `bind()` and `bind(int samplerSlot)` methods bind the texture to a specific slot in the shader program's texture uniform array. The `getID()` method returns the ID of the created texture.","items":[{"id":"e20f0b62-0ea3-8082-8c4d-992ba0ee1833","ancestors":[],"type":"function","description":"provides a way to load and bind textures in a OpenGL environment. It takes a file name as a constructor parameter and returns the ID of the loaded texture. The `bind()` method binds the texture to a specific slot, while the `getID()` method returns the ID of the loaded texture. The `loadTexture()` method loads a texture from a file and returns its ID.","name":"Texture","code":"public class Texture {\n\t\n\tprivate String fileName;\n\tprivate int id;\n\n\tpublic Texture(String fileName) {\n\t\tthis.fileName = fileName;\n\t\tthis.id = Texture.loadTexture(fileName);\n\t}\n\n\t@Override\n\tprotected void finalize() {\n\t}\n\n\tpublic void bind() {\n\t\tbind(0);\n\t}\n\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n\n\tpublic int getID() {\n\t\treturn id;\n\t}\n\n\tprivate static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t\n}","location":{"start":30,"insert":30,"offset":" ","indent":0,"comment":null},"item_type":"class","length":80},{"id":"47280bc8-c235-e48c-c54b-9098de42fdaa","ancestors":["e20f0b62-0ea3-8082-8c4d-992ba0ee1833"],"type":"function","description":"is a protected method in Java that has no functional purpose and is intended to be overridden by subclasses. It is typically used as a hook for subclass-specific cleanup or resource management.","params":[],"usage":{"language":"java","code":"public class MyClass extends Texture {\n    private static int[] textureArray;\n\n    public void myMethod() {\n        super(fileName);\n\n        // do something with the texture id\n        glBindTexture(GL_TEXTURE_2D, textureArray[id]);\n\n        // do other stuff...\n    }\n\n    protected void finalize() throws Throwable {\n        // free up resources used by the Texture class\n        super.finalize();\n        GL11.glDeleteTextures(textureArray);\n    }\n}\n","description":""},"name":"finalize","code":"@Override\n\tprotected void finalize() {\n\t}","location":{"start":40,"insert":40,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"2a5416e9-d303-8a89-f84e-9f2849100b6f","ancestors":["e20f0b62-0ea3-8082-8c4d-992ba0ee1833"],"type":"function","description":"0 is called, invoking its implementation to perform an operation.","params":[],"usage":{"language":"java","code":"public class MyClass {\n    public void myMethod() {\n        Texture texture = new Texture(\"myTexture.jpg\");\n        texture.bind(); // binds the texture to GL_TEXTURE0, i.e., sampler slot 0\n    }\n}\n","description":""},"name":"bind","code":"public void bind() {\n\t\tbind(0);\n\t}","location":{"start":44,"insert":44,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"150d6d53-1a87-4e91-904f-07f64d4001c8","ancestors":["e20f0b62-0ea3-8082-8c4d-992ba0ee1833"],"type":"function","description":"sets the active texture slot in the GPU to a specific ID.","params":[{"name":"samplerSlot","type_name":"int","description":"0-based index of a texture slot in which to bind a texture.","complex_type":false}],"usage":{"language":"java","code":"public class Texture {\n\tprivate String fileName;\n\tprivate int id;\n\t\n\tpublic void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}\n}\n","description":""},"name":"bind","code":"public void bind(int samplerSlot) {\n\t\tassert (samplerSlot >= 0 && samplerSlot <= 31);\n\t\tglActiveTexture(GL_TEXTURE0 + samplerSlot);\n\t\tglBindTexture(GL_TEXTURE_2D, id);\n\t}","location":{"start":48,"insert":48,"offset":" ","indent":1,"comment":null},"item_type":"method","length":5},{"id":"111bc79d-0c8f-b9af-cf4e-4e1f9d644afa","ancestors":["e20f0b62-0ea3-8082-8c4d-992ba0ee1833"],"type":"function","description":"returns the `id` field of an object.","params":[],"returns":{"type_name":"int","description":"an integer representing the value of the `id` field.","complex_type":false},"usage":{"language":"java","code":"Texture texture = new Texture(\"texture.png\");\nint id = texture.getID();\nGL11.glBindTexture(GL_TEXTURE_2D, id);\n","description":"\nExplanation:\nThe above code creates a new object of the class Texture and initializes it with the path to a texture file. Then it gets the ID of the texture using the getID method and binds the texture to the currently bound texture unit using glBindTexture with the GL_TEXTURE_2D target."},"name":"getID","code":"public int getID() {\n\t\treturn id;\n\t}","location":{"start":54,"insert":54,"offset":" ","indent":1,"comment":null},"item_type":"method","length":3},{"id":"15812cd6-b06c-9c80-d449-7c68f2154941","ancestors":["e20f0b62-0ea3-8082-8c4d-992ba0ee1833"],"type":"function","description":"loads an image from a file, converts it to an OpenGL texture, and returns the ID of the created texture.","params":[{"name":"fileName","type_name":"String","description":"file name of the image to be loaded and processed by the `loadTexture()` method.","complex_type":false}],"returns":{"type_name":"int","description":"an integer ID representing a loaded texture.","complex_type":false},"name":"loadTexture","code":"private static int loadTexture(String fileName) {\n\t\ttry {\n\t\t\tBufferedImage image = ImageIO.read(new File(fileName));\n\t\t\tint[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());\n\n\t\t\tByteBuffer buffer = BufferUtils.createByteBuffer(image.getHeight() * image.getWidth() * 4);\n\t\t\tboolean hasAlpha = image.getColorModel().hasAlpha();\n\n\t\t\tfor (int y = 0; y < image.getHeight(); y++) {\n\t\t\t\tfor (int x = 0; x < image.getWidth(); x++) {\n\t\t\t\t\tint pixel = pixels[y * image.getWidth() + x];\n\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 16) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel >> 8) & 0xFF));\n\t\t\t\t\tbuffer.put((byte) ((pixel) & 0xFF));\n\t\t\t\t\tif (hasAlpha)\n\t\t\t\t\t\tbuffer.put((byte) ((pixel >> 24) & 0xFF));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffer.put((byte) (0xFF));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer.flip();\n\n\t\t\tint id = GL11.glGenTextures();\n\t\t\t\n\t\t\tglBindTexture(GL_TEXTURE_2D, id);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n\t\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n//\t\t\tGL30.glGenerateMipmap(GL_TEXTURE_2D);\n//\t\t\tGL11.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);\n\t\t\t\n//\t\t\tif (GL11.glE)\n\t\t\t\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n\t\t\treturn id;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\treturn 0;\n\t}","location":{"start":58,"insert":58,"offset":" ","indent":1,"comment":null},"item_type":"method","length":49}]}}}