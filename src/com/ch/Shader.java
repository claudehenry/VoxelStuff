package com.ch;

import static org.lwjgl.opengl.GL20.GL_COMPILE_STATUS;
import static org.lwjgl.opengl.GL20.GL_LINK_STATUS;
import static org.lwjgl.opengl.GL20.GL_VALIDATE_STATUS;
import static org.lwjgl.opengl.GL20.glGetProgramInfoLog;
import static org.lwjgl.opengl.GL20.glGetProgrami;
import static org.lwjgl.opengl.GL20.glGetShaderInfoLog;
import static org.lwjgl.opengl.GL20.glGetShaderi;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.lwjgl.opengl.GL20;

import com.ch.math.Matrix4f;

/**
 * is used to create and manage shaders for use in a 3D graphics pipeline. It provides
 * methods for binding the shader program, setting uniform values, and loading shader
 * code from files. The class also includes utility methods for handling matrix
 * operations and validating the shader program.
 */
public class Shader {
	
	private int program;
	
	public Shader(int program) {
		this.program = program;
	}
	
 /**
  * glues a program object to a specific GL context, allowing the use of shaders and
  * other program-related resources.
  */
	public void bind() {
		GL20.glUseProgram(program);
	}
	
 /**
  * returns the value of a class member variable `program`.
  * 
  * @returns the value of the `program` field.
  */
	public int getProgram() {
		return this.program;
	}
	
 /**
  * updates a uniform variable in a shader program based on the length of an array of
  * float values passed as an argument. It calls the appropriate GL method (glUniform1f,
  * glUniform2f, etc.) to set the value of the uniform at the specified location.
  * 
  * @param name location of the uniform in the program, which is used to specify the
  * target glUniform() method.
  */
	public void uniformf(String name, float ...vals) {
		switch (vals.length) {
		case 1:
			GL20.glUniform1f(getLoaction(name), vals[0]);
			break;
		case 2:
			GL20.glUniform2f(getLoaction(name), vals[0], vals[1]);
			break;
		case 3:
			GL20.glUniform3f(getLoaction(name), vals[0], vals[1], vals[2]);
			break;
		case 4:
			GL20.glUniform4f(getLoaction(name), vals[0], vals[1], vals[2], vals[3]);
			break;
		}
	}
	
 /**
  * glUniformMatrix4 method to set a 4x4 matrix as a uniform buffer in OpenGL.
  * 
  * @param name 0-based index of the uniform location where the matrix is to be stored.
  * 
  * @param mat 4x4 matrix to be uniformed and is passed as a `Matrix4f` object to the
  * `unifromMat4()` function.
  * 
  * 	- `name`: The name of the uniform variable being assigned.
  * 	- `mat`: A `Matrix4f` object representing a 4x4 homogeneous matrix in standard
  * form (i.e., column-major order).
  * 	- `getLocation()`: A method that returns an integer indicating the location where
  * the uniform variable will be stored.
  * 	- `false`: A boolean value indicating whether the uniform variable should be
  * stored as a 16-bit float or a 32-bit floating-point number.
  */
	public void unifromMat4(String name, Matrix4f mat) {
		GL20.glUniformMatrix4(getLoaction(name), false, Util.createFlippedBuffer(mat.getLinearData()));
	}
	
 /**
  * retrieves the location of a uniform named `name` within a program's uniform buffer
  * using the `GL20` class and its `glGetUniformLocation()` method.
  * 
  * @param name 0-based index of a uniform location in the current program, which is
  * used by the `GL20.glGetUniformLocation()` method to retrieve information about the
  * uniform.
  * 
  * @returns an integer representing the location of a uniform within a program.
  */
	public int getLoaction(String name) {
		return GL20.glGetUniformLocation(program, name);
	}
	
	private static final String VERT = ".vert", FRAG = ".frag";
	
 /**
  * loads a shader program from a file and validates it.
  * 
  * @param filename name of the shader file to be loaded.
  * 
  * @returns a new instance of the `Shader` class, representing a shader program created
  * by combining a vertex shader and a fragment shader.
  * 
  * 	- The output is a new Shader object representing a program created by combining
  * two shaders using the `glCreateProgram` method.
  * 	- The Shader object contains the program ID generated by the `glCreateProgram`
  * method, which can be used to access and manipulate the program's contents.
  * 	- The Shader object provides methods for validating the program and setting various
  * attributes such as the vertex and fragment shaders used to create it.
  */
	public static Shader loadShader(String filename) {
		int program = GL20.glCreateProgram();
		loadShader(GL20.GL_VERTEX_SHADER, getText(filename + VERT), program);
		loadShader(GL20.GL_FRAGMENT_SHADER, getText(filename + FRAG), program);
		validateProgram(program);
		return new Shader(program);
	}
	
 /**
  * creates a shader program and attaches it to a program object. It also compiles and
  * logs any error messages if they occur.
  * 
  * @param target 3D graphics program that the shader will be added to or modified
  * within the function.
  * 
  * @param src 1:1 equivalent of the source code for the shader to be loaded and compiled.
  * 
  * @param program 3D graphics program that the shader will be attached to after being
  * compiled.
  */
	private static void loadShader(int target, String src, int program) {
		int shader = GL20.glCreateShader(target);
		
		GL20.glShaderSource(shader, src);
		GL20.glCompileShader(shader);
		
		if (glGetShaderi(shader, GL_COMPILE_STATUS) == 0) {
			System.err.println(glGetShaderInfoLog(shader, 1024));
			System.exit(1);
		}
		
		GL20.glAttachShader(program, shader);
	}
	
 /**
  * validates a program object by linking and validating it with the OpenGL API,
  * printing any error messages to `System.err` if there are any.
  * 
  * @param program 3D graphics program to be validated and linked with the GPU.
  */
	private static void validateProgram(int program) {
		GL20.glLinkProgram(program);
		
		if (glGetProgrami(program, GL_LINK_STATUS) == 0) {
			System.err.println(glGetProgramInfoLog(program, 1024));
			System.exit(1);
		}
		
		GL20.glValidateProgram(program);
		
		if (glGetProgrami(program, GL_VALIDATE_STATUS) == 0) {
			System.err.println(glGetProgramInfoLog(program, 1024));
			System.exit(1);
		}
	}
	
 /**
  * reads the contents of a specified file and returns its text content as a string.
  * 
  * @param file file from which the text is to be read.
  * 
  * @returns a string representation of the contents of a specified file.
  */
	private static String getText(String file) {
		String text = "";
		try {
			InputStream is = new FileInputStream(file);
			int ch;
			while ((ch = is.read()) != -1)
				text += (char) ch;
			is.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
		return text;
	}

}
