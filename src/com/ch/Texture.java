package com.ch;

import static org.lwjgl.opengl.GL11.GL_REPEAT;
import static org.lwjgl.opengl.GL11.GL_RGBA;
import static org.lwjgl.opengl.GL11.GL_RGBA8;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_MAG_FILTER;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_MIN_FILTER;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_WRAP_S;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_WRAP_T;
import static org.lwjgl.opengl.GL11.GL_UNSIGNED_BYTE;
import static org.lwjgl.opengl.GL11.glBindTexture;
import static org.lwjgl.opengl.GL11.glTexImage2D;
import static org.lwjgl.opengl.GL11.glTexParameterf;
import static org.lwjgl.opengl.GL11.glTexParameteri;
import static org.lwjgl.opengl.GL13.GL_TEXTURE0;
import static org.lwjgl.opengl.GL13.glActiveTexture;

import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;

import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL30;

/**
 * in this code file loads and manages textures for use in OpenGL rendering. It allows
 * for binding the texture to a specific slot in the GPU and provides methods for
 * loading and manipulating textures. Additionally, it provides an ID for each loaded
 * texture that can be used for further reference or manipulation.
 */
/**
 * is an abstract class that provides functionality for loading and binding textures
 * in OpenGL. It has fields for the texture file name and an ID generated by the
 * `loadTexture()` method, which loads the texture from a file and returns its ID for
 * use in OpenGL rendering. The `bind()` method binds a texture to a specific slot
 * in the GPU's texture array, and the `getID()` method returns the value of the `id`
 * field.
 */
public class Texture {

	private int id;
	private String fileName;

	public Texture(String fileName) {
		this.fileName = fileName;
		this.id = loadTexture(fileName);
	}


 /**
  * 0 invokes a method that is not shown, passing `0` as an argument.
  */
 /**
  * 0 invokes a method that is not specified in the provided code snippet.
  */
	public void bind() {
		bind(0);
	}

 /**
  * binds a texture to a specific slot in the GPU's texture array, using the
  * `glActiveTexture()` and `glBindTexture()` methods. The function checks that the
  * input `samplerSlot` is within the valid range of 0 to 31, and then selects the
  * appropriate texture handle from an array of 32 textures using the `id` variable.
  * 
  * @param samplerSlot 0-based index of a texture slot that the function binds to the
  * GPU.
  */
 /**
  * sets the active texture slot to a specific index (0-31) and binds a texture to it
  * using the `glBindTexture` method.
  * 
  * @param samplerSlot 0-based index of a texture slot in the GPU, with values ranging
  * from 0 to 31, which determines the active texture slot for binding a texture using
  * the `glBindTexture()` function.
  */
	public void bind(int samplerSlot) {
		assert (samplerSlot >= 0 && samplerSlot <= 31);
		glActiveTexture(GL_TEXTURE0 + samplerSlot);
		glBindTexture(GL_TEXTURE_2D, id);
	}

 /**
  * retrieves the `id` field value of an object and returns it as an `int`.
  * 
  * @returns the value of the `id` field.
  */
 /**
  * returns the `id` field of an object.
  * 
  * @returns an integer representing the ID of the object.
  */
	public int getID() {
		return id;
	}

 /**
  * loads a 2D texture from a file and returns its ID for use in OpenGL rendering. It
  * reads the image data, creates a ByteBuffer, and then uses GL functions to bind the
  * texture, set its parameters, and store the image data in it.
  * 
  * @param fileName 2D texture image file to be loaded and processed by the `loadTexture()`
  * method.
  * 
  * @returns an integer ID representing a loaded texture.
  */
 /**
  * loads a texture from a file and returns its ID. It reads the image data, converts
  * it to a byte array, and sets up the texture parameters for linear filtering and
  * repeating the texture across the entire screen.
  * 
  * @param fileName file path of the texture image to load.
  * 
  * @returns an integer identifier of a loaded texture.
  */
	private static int loadTexture(String fileName) {
		try {
			BufferedImage image = ImageIO.read(new File(fileName));
			int[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());

			ByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);
			boolean hasAlpha = image.getColorModel().hasAlpha();

			for (int y = image.getHeight() - 1; y >= 0; y--) {
				for (int x = 0; x < image.getWidth(); x++) {
					int pixel = pixels[y * image.getWidth() + x];

					buffer.put((byte) ((pixel >> 16) & 0xFF));
					buffer.put((byte) ((pixel >> 8) & 0xFF));
					buffer.put((byte) ((pixel) & 0xFF));
					if (hasAlpha)
						buffer.put((byte) ((pixel >> 24) & 0xFF));
					else
						buffer.put((byte) (0xFF));
				}
			}

			buffer.flip();

			int id = GL11.glGenTextures();
			
			glBindTexture(GL_TEXTURE_2D, id);

			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
			
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);

			GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
			GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL14.GL_TEXTURE_LOD_BIAS, -.6f);
			
			return id;
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}

		return 0;
	}

}
